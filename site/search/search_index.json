{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Leetcode notes", "text": "<p>Welcome to homepage. Latest problem</p>"}, {"location": "#latest-problem", "title": "Latest problem", "text": "Problem Last update 746. Min Cost Climbing Stairs 12:55 AM - October 14, 2023 2038. Remove Colored Pieces if Both Neighbors are the Same Color 12:06 AM - October 14, 2023 94. Binary Tree Inorder Traversal 8:52 PM - October 02, 2023 97. Interleaving String 8:52 PM - October 02, 2023 98. Validate Binary Search Tree 8:52 PM - October 02, 2023"}, {"location": "#separated-by-language", "title": "Separated by language", "text": ""}, {"location": "#c-language", "title": "C language", "text": "Problem Last update 746. Min Cost Climbing Stairs 12:55 AM - October 14, 2023 2038. Remove Colored Pieces if Both Neighbors are the Same Color 12:06 AM - October 14, 2023 temp_leet_code 8:52 PM - October 02, 2023 Quick sort 8:52 PM - October 02, 2023 Radix sort 8:52 PM - October 02, 2023"}, {"location": "#go", "title": "Go", "text": "Problem Last update 746. Min Cost Climbing Stairs 12:55 AM - October 14, 2023 905. Sort Array By Parity 8:52 PM - October 02, 2023 799. Champagne Tower 8:52 PM - October 02, 2023 389. Find the Difference 8:52 PM - October 02, 2023 110. Balanced Binary Tree 8:52 PM - October 02, 2023"}, {"location": "#python", "title": "Python", "text": "Problem Last update 746. Min Cost Climbing Stairs 12:55 AM - October 14, 2023 94. Binary Tree Inorder Traversal 8:52 PM - October 02, 2023 97. Interleaving String 8:52 PM - October 02, 2023 98. Validate Binary Search Tree 8:52 PM - October 02, 2023 74. Search a 2D Matrix 8:52 PM - October 02, 2023"}, {"location": "#java", "title": "Java", "text": "Problem Last update 80. Remove Duplicates from Sorted Array II 8:52 PM - October 02, 2023 767. Reorganize String 8:52 PM - October 02, 2023 63. Unique Paths II 8:52 PM - October 02, 2023 518. Coin Change II 8:52 PM - October 02, 2023 131. Palindrome Partitioning 8:52 PM - October 02, 2023"}, {"location": "#rust", "title": "Rust", "text": "Problem Last update 63. Unique Paths II 8:52 PM - October 02, 2023 518. Coin Change II 8:52 PM - October 02, 2023 459. Repeated Substring Pattern 8:52 PM - October 02, 2023 134. Gas Station 8:52 PM - October 02, 2023"}, {"location": "#misc", "title": "Misc.", "text": "<p>This page is auto generated using Dataview Query Language. Inline Fields is used for natural-looking annotation, via a <code>&lt;Key&gt;:: &lt;Value&gt;</code></p>"}, {"location": "resume/", "title": "Resume", "text": ""}, {"location": "resume/#ngo-duc-nghia", "title": "NGO DUC NGHIA", "text": "<ul> <li>Email: ducnghia.tin47@gmail.com</li> <li>Github: https://github.com/nghiango1</li> <li>Phone: +84 949 955 246</li> <li>Location: Hanoi, Vietnam</li> </ul>"}, {"location": "resume/#employment", "title": "EMPLOYMENT", "text": "<p>Team manager  (Oct 2022 \u2013 Present)</p> <ul> <li>Led a team of 6 as a secondary team lead. Responsible for maintaining the Disaster Recovery infrastructure of Vietnam\u2019s Resident Database, which provides National Identify Numbers, National ID Cards, and National Electronic Identification Services. Ensured the functionality of the backup plan for a highly available Resident database that served both internal applications and public APIs for national usage.</li> <li>Led a team of 3 as a secondary team lead. Responsible for collaborated with other Ministry departments on Resident-related projects that spanned the nation. Led evaluation, reporting, and recommendation to inform Upper Leadership\u2019s instruction, both internally within the Ministry of Public Security and across other Ministries at the national level. Projects included using National Identify Numbers to replace Social Health Insurance IDs, Social Insurance IDs, Tax Identification Numbers, and Driver\u2019s Licenses; as well as Resident Data cleaning for most of the Ministry.</li> <li>Led a team of 3 as a secondary team lead. Responsible for managed the public APIs of Vietnam\u2019s Resident Database, ensuring integration with other Ministry developer\u2019s applications, which include: Registered new services; updated existing ones in the API registry, provided technical support, developed documentation and training materials. Monitored API usage and performance metrics and collaborated with other departments or organizations that used the APIs to meet their needs.</li> </ul>"}, {"location": "resume/#skill", "title": "SKILL", "text": "<p>IT</p> <ul> <li>Python, Machine Learning, SQL, Web application, Documenting, Report, Data Analysis and Visualized, Infrastructure management Soft Skills</li> <li>Leadership, Team Management, Project Management, Technical Support, Communication and Collaboration, Attention to Detail, Problem-Solving, Time Management, Microsoft Office</li> </ul>"}, {"location": "resume/#education", "title": "EDUCATION", "text": "<p>University (Sep 2015 \u2013 Sep 2020) Bachelor\u2019s Degree of Information Security Engineer </p> <ul> <li>School: H\u1ecdc vi\u1ec7n An ninh nh\u00e2n d\u00e2n (People\u2019s Security Academy), Ha Noi</li> <li>GPA: 3.34 Other</li> <li>Third prized in National Excellent Student Selection Exam for Computer Science of Vietnam 2015</li> </ul>"}, {"location": "tags/", "title": "Tags", "text": ""}, {"location": "tags/#bfs", "title": "BFS", "text": "<ul> <li>46. Permutations</li> <li>130. Surrounded Regions</li> <li>542. 01 Matrix</li> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#o1", "title": "O(1)", "text": "<ul> <li>Array</li> <li>50. Pow(x, n)</li> </ul>"}, {"location": "tags/#olog-mn", "title": "O(log (m+n))", "text": "<ul> <li>4. Median of Two Sorted Arrays</li> </ul>"}, {"location": "tags/#olog-n-m", "title": "O(log (n + m))", "text": "<ul> <li>4. Median of Two Sorted Arrays</li> </ul>"}, {"location": "tags/#olog-n", "title": "O(log n)", "text": "<ul> <li>Binary search</li> <li>33. Search in Rotated Sorted Array</li> <li>50. Pow(x, n)</li> <li>74. Search a 2D Matrix</li> </ul>"}, {"location": "tags/#on-2-n", "title": "O(n * 2 ** n)", "text": "<ul> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#on-2-2-n", "title": "O(n ** 2 * 2 ** n)", "text": "<ul> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#on-2-log-n", "title": "O(n ** 2 log n)", "text": "<ul> <li>84. Largest Rectangle in Histogram</li> </ul>"}, {"location": "tags/#on-2", "title": "O(n ** 2)", "text": "<ul> <li>Bubble sort</li> <li>63. Unique Paths II</li> <li>84. Largest Rectangle in Histogram</li> <li>118. Pascal\u2019s Triangle</li> <li>119. Pascal\u2019s Triangle II</li> <li>121. Best Time to Buy and Sell Stock</li> <li>134. Gas Station</li> <li>377. Combination Sum IV</li> <li>518. Coin Change II</li> <li>1337. The K Weakest Rows in a Matrix</li> </ul>"}, {"location": "tags/#on-3-2-n", "title": "O(n ** 3 * 2 ** n)", "text": "<ul> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#on-log-n", "title": "O(n log n)", "text": "<ul> <li>Quick sort</li> <li>4. Median of Two Sorted Arrays</li> <li>148. Sort List</li> <li>338. Counting Bits</li> <li>1326. Minimum Number of Taps to Open to Water a Garden</li> <li>1337. The K Weakest Rows in a Matrix</li> <li>1658. Minimum Operations to Reduce X to Zero</li> </ul>"}, {"location": "tags/#on", "title": "O(n!)", "text": "<ul> <li>46. Permutations</li> <li>77. Combinations</li> </ul>"}, {"location": "tags/#on_1", "title": "O(n)", "text": "<ul> <li>Linear search</li> <li>45. Jump Game II</li> <li>55. Jump Game</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>81. Search in Rotated Sorted Array II</li> <li>86. Partition List</li> <li>88. Merge Sorted Array</li> <li>92. Reverse Linked List II</li> <li>101. Symmetric Tree</li> <li>102. Binary Tree Level Order Traversal</li> <li>103. Binary Tree Zigzag Level Order Traversal</li> <li>104. Maximum Depth of Binary Tree</li> <li>108. Convert Sorted Array to Binary Search Tree</li> <li>110. Balanced Binary Tree</li> <li>116. Populating Next Right Pointers in Each Node</li> <li>121. Best Time to Buy and Sell Stock</li> <li>134. Gas Station</li> <li>150. Evaluate Reverse Polish Notation</li> <li>225. Implement Stack using Queues</li> <li>338. Counting Bits</li> <li>389. Find the Difference</li> <li>392. Is Subsequence</li> <li>746. Min Cost Climbing Stairs</li> <li>905. Sort Array By Parity</li> <li>1326. Minimum Number of Taps to Open to Water a Garden</li> <li>1658. Minimum Operations to Reduce X to Zero</li> <li>1793. Maximum Score of a Good Subarray</li> <li>2038. Remove Colored Pieces if Both Neighbors are the Same Color</li> <li>2366. Minimum Replacements to Sort the Array</li> </ul>"}, {"location": "tags/#osqrt-n", "title": "O(sqrt n)", "text": "<ul> <li>Two Crystal Ball</li> </ul>"}, {"location": "tags/#array", "title": "array", "text": "<ul> <li>33. Search in Rotated Sorted Array</li> <li>45. Jump Game II</li> <li>46. Permutations</li> <li>63. Unique Paths II</li> <li>74. Search a 2D Matrix</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>84. Largest Rectangle in Histogram</li> <li>215. Kth Largest Element in an Array</li> <li>274. H Index</li> <li>2366. Minimum Replacements to Sort the Array</li> </ul>"}, {"location": "tags/#binary_search", "title": "binary_search", "text": "<ul> <li>74. Search a 2D Matrix</li> <li>81. Search in Rotated Sorted Array II</li> <li>84. Largest Rectangle in Histogram</li> <li>274. H Index</li> </ul>"}, {"location": "tags/#bit_manipulation", "title": "bit_manipulation", "text": "<ul> <li>50. Pow(x, n)</li> </ul>"}, {"location": "tags/#c", "title": "c", "text": "<ul> <li>Quick sort</li> <li>Two Crystal Ball</li> <li>4. Median of Two Sorted Arrays</li> <li>50. Pow(x, n)</li> <li>63. Unique Paths II</li> <li>74. Search a 2D Matrix</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>81. Search in Rotated Sorted Array II</li> <li>92. Reverse Linked List II</li> <li>118. Pascal\u2019s Triangle</li> <li>119. Pascal\u2019s Triangle II</li> <li>134. Gas Station</li> <li>138. Copy List with Random Pointer</li> <li>148. Sort List</li> <li>150. Evaluate Reverse Polish Notation</li> <li>168. Excel Sheet Column Title</li> <li>518. Coin Change II</li> <li>1793. Maximum Score of a Good Subarray</li> </ul>"}, {"location": "tags/#cache", "title": "cache", "text": "<ul> <li>84. Largest Rectangle in Histogram</li> </ul>"}, {"location": "tags/#coding_chalenge", "title": "coding_chalenge", "text": "<ul> <li>Mathematic expression calculation</li> <li>4. Median of Two Sorted Arrays</li> <li>33. Search in Rotated Sorted Array</li> <li>45. Jump Game II</li> <li>46. Permutations</li> <li>50. Pow(x, n)</li> <li>55. Jump Game</li> <li>62. Unique Paths</li> <li>63. Unique Paths II</li> <li>74. Search a 2D Matrix</li> <li>77. Combinations</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>81. Search in Rotated Sorted Array II</li> <li>84. Largest Rectangle in Histogram</li> <li>86. Partition List</li> <li>88. Merge Sorted Array</li> <li>91. Decode Ways</li> <li>92. Reverse Linked List II</li> <li>94. Binary Tree Inorder Traversal</li> <li>98. Validate Binary Search Tree</li> <li>101. Symmetric Tree</li> <li>102. Binary Tree Level Order Traversal</li> <li>103. Binary Tree Zigzag Level Order Traversal</li> <li>104. Maximum Depth of Binary Tree</li> <li>108. Convert Sorted Array to Binary Search Tree</li> <li>110. Balanced Binary Tree</li> <li>116. Populating Next Right Pointers in Each Node</li> <li>118. Pascal\u2019s Triangle</li> <li>119. Pascal\u2019s Triangle II</li> <li>121. Best Time to Buy and Sell Stock</li> <li>122. Best Time to Buy and Sell Stock II</li> <li>124. Binary Tree Maximum Path Sum</li> <li>125. Valid Palindrome</li> <li>130. Surrounded Regions</li> <li>131. Palindrome Partitioning</li> <li>134. Gas Station</li> <li>136. Single Number</li> <li>138. Copy List with Random Pointer</li> <li>139. Word Break</li> <li>141. Linked List Cycle</li> <li>146. LRU Cache</li> <li>148. Sort List</li> <li>149. Max Points on a Line</li> <li>150. Evaluate Reverse Polish Notation</li> <li>168. Excel Sheet Column Title</li> <li>169. Majority Element</li> <li>171. Excel Sheet Column Number</li> <li>190. Reverse Bits</li> <li>191. Number of 1 Bits</li> <li>202. Happy Number</li> <li>206. Reverse Linked List</li> <li>207. Course Schedule</li> <li>212. Word Search II</li> <li>215. Kth Largest Element in an Array</li> <li>217. Contains Duplicate</li> <li>225. Implement Stack using Queues</li> <li>234. Palindrome Linked List</li> <li>239. Sliding Window Maximum</li> <li>242. Valid Anagram</li> <li>268. Missing Number</li> <li>274. H Index</li> <li>283. Move Zeroes</li> <li>326. Power of Three</li> <li>338. Counting Bits</li> <li>344. Reverse String</li> <li>350. Intersection of Two Arrays II</li> <li>373. Find K Pairs with Smallest Sums</li> <li>377. Combination Sum IV</li> <li>380. Insert Delete GetRandom O(1)</li> <li>387. First Unique Character in a String</li> <li>389. Find the Difference</li> <li>392. Is Subsequence</li> <li>412. Fizz Buzz</li> <li>435. Non overlapping Intervals</li> <li>445. Add Two Numbers II</li> <li>456. 132 Pattern</li> <li>459. Repeated Substring Pattern</li> <li>518. Coin Change II</li> <li>530. Minimum Absolute Difference in BST</li> <li>542. 01 Matrix</li> <li>688. Knight Probability in Chessboard</li> <li>712. Minimum ASCII Delete Sum for Two Strings</li> <li>714. Best Time to Buy and Sell Stock with Transaction Fee</li> <li>735. Asteroid Collision</li> <li>746. Min Cost Climbing Stairs</li> <li>767. Reorganize String</li> <li>799. Champagne Tower</li> <li>802. Find Eventual Safe States</li> <li>847. Shortest Path Visiting All Nodes</li> <li>852. Peak Index in a Mountain Array</li> <li>859. Buddy Strings</li> <li>894. All Possible Full Binary Trees</li> <li>905. Sort Array By Parity</li> <li>1125. Smallest Sufficient Team</li> <li>1143. Longest Common Subsequence</li> <li>1326. Minimum Number of Taps to Open to Water a Garden</li> <li>1337. The K Weakest Rows in a Matrix</li> <li>1569. Number of Ways to Reorder Array to Get Same BST</li> <li>1601. Maximum Number of Achievable Transfer Requests</li> <li>1615. Maximal Network Rank</li> <li>1658. Minimum Operations to Reduce X to Zero</li> <li>1751. Maximum Number of Events That Can Be Attended II</li> <li>1793. Maximum Score of a Good Subarray</li> <li>1802. Maximum Value at a Given Index in a Bounded Array</li> <li>2008. Maximum Earnings From Taxi</li> <li>2038. Remove Colored Pieces if Both Neighbors are the Same Color</li> <li>2140. Questions With Brainpower</li> <li>2141. Maximum Running Time of N Computers</li> <li>2328. Number of Increasing Paths in a Grid</li> <li>2352. Equal Row and Column Pairs   solve</li> <li>2366. Minimum Replacements to Sort the Array</li> <li>2369. Check if There is a Valid Partition For The Array</li> <li>2448. Minimum Cost to Make Array Equal</li> <li>2462. Total Cost to Hire K Workers</li> <li>2616. Minimize the Maximum Difference of Pairs</li> </ul>"}, {"location": "tags/#computer_sience", "title": "computer_sience", "text": "<ul> <li>Array</li> <li>Big O Time Complexity</li> <li>Binary search</li> <li>Bubble sort</li> <li>Linear search</li> <li>Linked List</li> <li>List</li> <li>Mathematic expression calculation</li> <li>Quick sort</li> <li>Two Crystal Ball</li> <li>4. Median of Two Sorted Arrays</li> <li>33. Search in Rotated Sorted Array</li> <li>45. Jump Game II</li> <li>46. Permutations</li> <li>50. Pow(x, n)</li> <li>55. Jump Game</li> <li>62. Unique Paths</li> <li>63. Unique Paths II</li> <li>74. Search a 2D Matrix</li> <li>77. Combinations</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>81. Search in Rotated Sorted Array II</li> <li>84. Largest Rectangle in Histogram</li> <li>86. Partition List</li> <li>88. Merge Sorted Array</li> <li>91. Decode Ways</li> <li>92. Reverse Linked List II</li> <li>94. Binary Tree Inorder Traversal</li> <li>98. Validate Binary Search Tree</li> <li>101. Symmetric Tree</li> <li>102. Binary Tree Level Order Traversal</li> <li>103. Binary Tree Zigzag Level Order Traversal</li> <li>104. Maximum Depth of Binary Tree</li> <li>108. Convert Sorted Array to Binary Search Tree</li> <li>110. Balanced Binary Tree</li> <li>116. Populating Next Right Pointers in Each Node</li> <li>118. Pascal\u2019s Triangle</li> <li>119. Pascal\u2019s Triangle II</li> <li>121. Best Time to Buy and Sell Stock</li> <li>122. Best Time to Buy and Sell Stock II</li> <li>124. Binary Tree Maximum Path Sum</li> <li>125. Valid Palindrome</li> <li>130. Surrounded Regions</li> <li>131. Palindrome Partitioning</li> <li>134. Gas Station</li> <li>136. Single Number</li> <li>138. Copy List with Random Pointer</li> <li>139. Word Break</li> <li>141. Linked List Cycle</li> <li>146. LRU Cache</li> <li>148. Sort List</li> <li>149. Max Points on a Line</li> <li>150. Evaluate Reverse Polish Notation</li> <li>168. Excel Sheet Column Title</li> <li>169. Majority Element</li> <li>171. Excel Sheet Column Number</li> <li>190. Reverse Bits</li> <li>191. Number of 1 Bits</li> <li>202. Happy Number</li> <li>206. Reverse Linked List</li> <li>207. Course Schedule</li> <li>212. Word Search II</li> <li>215. Kth Largest Element in an Array</li> <li>217. Contains Duplicate</li> <li>225. Implement Stack using Queues</li> <li>234. Palindrome Linked List</li> <li>239. Sliding Window Maximum</li> <li>242. Valid Anagram</li> <li>268. Missing Number</li> <li>274. H Index</li> <li>283. Move Zeroes</li> <li>326. Power of Three</li> <li>338. Counting Bits</li> <li>344. Reverse String</li> <li>350. Intersection of Two Arrays II</li> <li>373. Find K Pairs with Smallest Sums</li> <li>377. Combination Sum IV</li> <li>380. Insert Delete GetRandom O(1)</li> <li>387. First Unique Character in a String</li> <li>389. Find the Difference</li> <li>392. Is Subsequence</li> <li>412. Fizz Buzz</li> <li>435. Non overlapping Intervals</li> <li>445. Add Two Numbers II</li> <li>456. 132 Pattern</li> <li>459. Repeated Substring Pattern</li> <li>518. Coin Change II</li> <li>530. Minimum Absolute Difference in BST</li> <li>542. 01 Matrix</li> <li>688. Knight Probability in Chessboard</li> <li>712. Minimum ASCII Delete Sum for Two Strings</li> <li>714. Best Time to Buy and Sell Stock with Transaction Fee</li> <li>735. Asteroid Collision</li> <li>746. Min Cost Climbing Stairs</li> <li>767. Reorganize String</li> <li>799. Champagne Tower</li> <li>802. Find Eventual Safe States</li> <li>847. Shortest Path Visiting All Nodes</li> <li>852. Peak Index in a Mountain Array</li> <li>859. Buddy Strings</li> <li>894. All Possible Full Binary Trees</li> <li>905. Sort Array By Parity</li> <li>1125. Smallest Sufficient Team</li> <li>1143. Longest Common Subsequence</li> <li>1326. Minimum Number of Taps to Open to Water a Garden</li> <li>1337. The K Weakest Rows in a Matrix</li> <li>1569. Number of Ways to Reorder Array to Get Same BST</li> <li>1601. Maximum Number of Achievable Transfer Requests</li> <li>1615. Maximal Network Rank</li> <li>1658. Minimum Operations to Reduce X to Zero</li> <li>1751. Maximum Number of Events That Can Be Attended II</li> <li>1793. Maximum Score of a Good Subarray</li> <li>1802. Maximum Value at a Given Index in a Bounded Array</li> <li>2008. Maximum Earnings From Taxi</li> <li>2038. Remove Colored Pieces if Both Neighbors are the Same Color</li> <li>2140. Questions With Brainpower</li> <li>2141. Maximum Running Time of N Computers</li> <li>2328. Number of Increasing Paths in a Grid</li> <li>2352. Equal Row and Column Pairs   solve</li> <li>2366. Minimum Replacements to Sort the Array</li> <li>2369. Check if There is a Valid Partition For The Array</li> <li>2448. Minimum Cost to Make Array Equal</li> <li>2462. Total Cost to Hire K Workers</li> <li>2616. Minimize the Maximum Difference of Pairs</li> </ul>"}, {"location": "tags/#divide_and_conquer", "title": "divide_and_conquer", "text": "<ul> <li>215. Kth Largest Element in an Array</li> </ul>"}, {"location": "tags/#dynamic_programing", "title": "dynamic_programing", "text": "<ul> <li>55. Jump Game</li> <li>63. Unique Paths II</li> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#go", "title": "go", "text": "<ul> <li>110. Balanced Binary Tree</li> <li>389. Find the Difference</li> <li>746. Min Cost Climbing Stairs</li> <li>799. Champagne Tower</li> <li>905. Sort Array By Parity</li> <li>1793. Maximum Score of a Good Subarray</li> </ul>"}, {"location": "tags/#graph", "title": "graph", "text": "<ul> <li>1615. Maximal Network Rank</li> </ul>"}, {"location": "tags/#heap", "title": "heap", "text": "<ul> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#heap_c_lang", "title": "heap_c_lang", "text": "<ul> <li>74. Search a 2D Matrix</li> </ul>"}, {"location": "tags/#java", "title": "java", "text": "<ul> <li>63. Unique Paths II</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>518. Coin Change II</li> </ul>"}, {"location": "tags/#javascript", "title": "javascript", "text": "<ul> <li>767. Reorganize String</li> </ul>"}, {"location": "tags/#leetcode", "title": "leetcode", "text": "<ul> <li>4. Median of Two Sorted Arrays</li> <li>33. Search in Rotated Sorted Array</li> <li>45. Jump Game II</li> <li>46. Permutations</li> <li>50. Pow(x, n)</li> <li>55. Jump Game</li> <li>62. Unique Paths</li> <li>63. Unique Paths II</li> <li>74. Search a 2D Matrix</li> <li>77. Combinations</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>81. Search in Rotated Sorted Array II</li> <li>84. Largest Rectangle in Histogram</li> <li>86. Partition List</li> <li>88. Merge Sorted Array</li> <li>91. Decode Ways</li> <li>92. Reverse Linked List II</li> <li>94. Binary Tree Inorder Traversal</li> <li>98. Validate Binary Search Tree</li> <li>101. Symmetric Tree</li> <li>102. Binary Tree Level Order Traversal</li> <li>103. Binary Tree Zigzag Level Order Traversal</li> <li>104. Maximum Depth of Binary Tree</li> <li>108. Convert Sorted Array to Binary Search Tree</li> <li>110. Balanced Binary Tree</li> <li>116. Populating Next Right Pointers in Each Node</li> <li>118. Pascal\u2019s Triangle</li> <li>119. Pascal\u2019s Triangle II</li> <li>121. Best Time to Buy and Sell Stock</li> <li>122. Best Time to Buy and Sell Stock II</li> <li>124. Binary Tree Maximum Path Sum</li> <li>125. Valid Palindrome</li> <li>130. Surrounded Regions</li> <li>131. Palindrome Partitioning</li> <li>134. Gas Station</li> <li>136. Single Number</li> <li>138. Copy List with Random Pointer</li> <li>139. Word Break</li> <li>141. Linked List Cycle</li> <li>146. LRU Cache</li> <li>148. Sort List</li> <li>149. Max Points on a Line</li> <li>150. Evaluate Reverse Polish Notation</li> <li>168. Excel Sheet Column Title</li> <li>169. Majority Element</li> <li>171. Excel Sheet Column Number</li> <li>190. Reverse Bits</li> <li>191. Number of 1 Bits</li> <li>202. Happy Number</li> <li>206. Reverse Linked List</li> <li>207. Course Schedule</li> <li>212. Word Search II</li> <li>215. Kth Largest Element in an Array</li> <li>217. Contains Duplicate</li> <li>225. Implement Stack using Queues</li> <li>234. Palindrome Linked List</li> <li>239. Sliding Window Maximum</li> <li>242. Valid Anagram</li> <li>268. Missing Number</li> <li>274. H Index</li> <li>283. Move Zeroes</li> <li>326. Power of Three</li> <li>338. Counting Bits</li> <li>344. Reverse String</li> <li>350. Intersection of Two Arrays II</li> <li>373. Find K Pairs with Smallest Sums</li> <li>377. Combination Sum IV</li> <li>380. Insert Delete GetRandom O(1)</li> <li>387. First Unique Character in a String</li> <li>389. Find the Difference</li> <li>392. Is Subsequence</li> <li>412. Fizz Buzz</li> <li>435. Non overlapping Intervals</li> <li>445. Add Two Numbers II</li> <li>456. 132 Pattern</li> <li>459. Repeated Substring Pattern</li> <li>518. Coin Change II</li> <li>530. Minimum Absolute Difference in BST</li> <li>542. 01 Matrix</li> <li>688. Knight Probability in Chessboard</li> <li>712. Minimum ASCII Delete Sum for Two Strings</li> <li>714. Best Time to Buy and Sell Stock with Transaction Fee</li> <li>735. Asteroid Collision</li> <li>746. Min Cost Climbing Stairs</li> <li>767. Reorganize String</li> <li>799. Champagne Tower</li> <li>802. Find Eventual Safe States</li> <li>847. Shortest Path Visiting All Nodes</li> <li>852. Peak Index in a Mountain Array</li> <li>859. Buddy Strings</li> <li>894. All Possible Full Binary Trees</li> <li>905. Sort Array By Parity</li> <li>1125. Smallest Sufficient Team</li> <li>1143. Longest Common Subsequence</li> <li>1326. Minimum Number of Taps to Open to Water a Garden</li> <li>1337. The K Weakest Rows in a Matrix</li> <li>1569. Number of Ways to Reorder Array to Get Same BST</li> <li>1601. Maximum Number of Achievable Transfer Requests</li> <li>1615. Maximal Network Rank</li> <li>1658. Minimum Operations to Reduce X to Zero</li> <li>1751. Maximum Number of Events That Can Be Attended II</li> <li>1793. Maximum Score of a Good Subarray</li> <li>1802. Maximum Value at a Given Index in a Bounded Array</li> <li>2008. Maximum Earnings From Taxi</li> <li>2038. Remove Colored Pieces if Both Neighbors are the Same Color</li> <li>2140. Questions With Brainpower</li> <li>2141. Maximum Running Time of N Computers</li> <li>2328. Number of Increasing Paths in a Grid</li> <li>2352. Equal Row and Column Pairs   solve</li> <li>2366. Minimum Replacements to Sort the Array</li> <li>2369. Check if There is a Valid Partition For The Array</li> <li>2448. Minimum Cost to Make Array Equal</li> <li>2462. Total Cost to Hire K Workers</li> <li>2616. Minimize the Maximum Difference of Pairs</li> </ul>"}, {"location": "tags/#linear_search", "title": "linear_search", "text": "<ul> <li>121. Best Time to Buy and Sell Stock</li> </ul>"}, {"location": "tags/#math", "title": "math", "text": "<ul> <li>168. Excel Sheet Column Title</li> </ul>"}, {"location": "tags/#matrix", "title": "matrix", "text": "<ul> <li>74. Search a 2D Matrix</li> </ul>"}, {"location": "tags/#network", "title": "network", "text": "<ul> <li>LAP 1   Routing</li> </ul>"}, {"location": "tags/#pascal", "title": "pascal", "text": "<ul> <li>List</li> <li>Mathematic expression calculation</li> <li>Quick sort</li> </ul>"}, {"location": "tags/#python", "title": "python", "text": "<ul> <li>Binary search</li> <li>Bubble sort</li> <li>Two Crystal Ball</li> <li>4. Median of Two Sorted Arrays</li> <li>33. Search in Rotated Sorted Array</li> <li>45. Jump Game II</li> <li>46. Permutations</li> <li>50. Pow(x, n)</li> <li>55. Jump Game</li> <li>63. Unique Paths II</li> <li>74. Search a 2D Matrix</li> <li>77. Combinations</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>81. Search in Rotated Sorted Array II</li> <li>84. Largest Rectangle in Histogram</li> <li>86. Partition List</li> <li>88. Merge Sorted Array</li> <li>101. Symmetric Tree</li> <li>102. Binary Tree Level Order Traversal</li> <li>103. Binary Tree Zigzag Level Order Traversal</li> <li>104. Maximum Depth of Binary Tree</li> <li>108. Convert Sorted Array to Binary Search Tree</li> <li>116. Populating Next Right Pointers in Each Node</li> <li>118. Pascal\u2019s Triangle</li> <li>121. Best Time to Buy and Sell Stock</li> <li>122. Best Time to Buy and Sell Stock II</li> <li>130. Surrounded Regions</li> <li>134. Gas Station</li> <li>168. Excel Sheet Column Title</li> <li>212. Word Search II</li> <li>225. Implement Stack using Queues</li> <li>338. Counting Bits</li> <li>377. Combination Sum IV</li> <li>392. Is Subsequence</li> <li>459. Repeated Substring Pattern</li> <li>518. Coin Change II</li> <li>542. 01 Matrix</li> <li>746. Min Cost Climbing Stairs</li> <li>767. Reorganize String</li> <li>847. Shortest Path Visiting All Nodes</li> <li>905. Sort Array By Parity</li> <li>1326. Minimum Number of Taps to Open to Water a Garden</li> <li>1337. The K Weakest Rows in a Matrix</li> <li>1615. Maximal Network Rank</li> <li>1658. Minimum Operations to Reduce X to Zero</li> <li>2366. Minimum Replacements to Sort the Array</li> </ul>"}, {"location": "tags/#queue", "title": "queue", "text": "<ul> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#recusion", "title": "recusion", "text": "<ul> <li>50. Pow(x, n)</li> <li>77. Combinations</li> </ul>"}, {"location": "tags/#runtime_memory_alocation", "title": "runtime_memory_alocation", "text": "<ul> <li>74. Search a 2D Matrix</li> </ul>"}, {"location": "tags/#rust", "title": "rust", "text": "<ul> <li>63. Unique Paths II</li> <li>134. Gas Station</li> <li>459. Repeated Substring Pattern</li> <li>518. Coin Change II</li> </ul>"}, {"location": "tags/#sort", "title": "sort", "text": "<ul> <li>215. Kth Largest Element in an Array</li> </ul>"}, {"location": "tags/#stack_c_lang", "title": "stack_c_lang", "text": "<ul> <li>74. Search a 2D Matrix</li> </ul>"}, {"location": "tags/#tree", "title": "tree", "text": "<ul> <li>1569. Number of Ways to Reorder Array to Get Same BST</li> </ul>"}, {"location": "tags/#typescript", "title": "typescript", "text": "<ul> <li>Binary search</li> <li>Linear search</li> <li>Two Crystal Ball</li> </ul>"}, {"location": "Basic/Array/", "title": "Array", "text": "", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#1-problem", "title": "1. Problem", "text": "<p>Tell about <code>array</code>, what is it?</p>", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#2-solve", "title": "2. Solve", "text": "<p>Array is a continue space of memory</p> <p>Memory it self is a problem, every language do different thing to allocating memory, which affecting how array work under the hood.</p> <ul> <li>Get: Which usually come with a offset, which the computer will jump to array stored memory, take into the element size of that array, multiple it with <code>offset</code>. Then load it to the CPU. <pre><code>load &lt;arr&gt; + &lt;offset&gt; * &lt;size&gt;\n</code></pre></li> <li>Set: We accessing the memory need to change and modify it data <pre><code>set &lt;arr&gt; + &lt;offset&gt; * &lt;size&gt;, &lt;value&gt;\n</code></pre></li> </ul> <p>By using the randomize accessing memory, knowing exact where we want to access, and how much size we want to get. By leverage our Hardware <code>O(1)</code> </p>", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#3-array-reference", "title": "3. Array reference", "text": "<p>By focusing on a specific language, we can have a deeper talk of array concept:</p>", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#31-c-language-array-and-memory-allocation", "title": "3.1. C language array and memory allocation", "text": "", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#311-lap-1-array-in-c", "title": "3.1.1. LAP 1 - Array in C", "text": "<p>This being compile with this flag (using vim config and vim make)</p> <pre><code>set makeprg=gcc\\ -fdiagnostics-plain-output\\ -g\\ -I.\\ -o\\ dist/%:r\\ %\n</code></pre> <p>If you using -O3, then this meh, not even work. As they change the stack layout to optimize.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\nchar hello[13] = \"Hello world!\";\nlong long arr[4] = {1, 1, 1, 1};\nint arr_2[8] = {4, 4, 4, 4, 4, 4, 4, 4};\nint printHex(unsigned int* arr, int length){\nprintf(\"Array with %d length:\\n\", length);\nfor (int i = 0; i &lt; length; i++) {\nprintf(\"%08x\", ((unsigned int*)arr)[i]);\nif (i != length - 1) printf(\", \");\n}\nprintf(\"\\n\");\nreturn 0;\n}\nint main(){\nprintf(\"size of arr = %lu\\n\", sizeof(arr));\nprintf(\"size of arr element = %lu\\n\", sizeof(arr[0]));\nprintHex((unsigned int*)arr, sizeof(arr)/sizeof(unsigned int));\nunsigned int *arr_view = (unsigned int *) &amp;arr;\nunsigned int arr_length = (unsigned int) (sizeof(arr)/sizeof(unsigned int));\nprintHex(arr_view, arr_length);\narr_view[1] = (unsigned int)~0;\nprintHex(arr_view, arr_length);\nprintf(\"New value of arr[0] = %lld\\n\\n\\n\", arr[0]);\nprintf(\"String: %s with length of %lu, memory size %lu\\n\", hello, strlen(hello), sizeof(hello) );\nfor (int i = 0; i &lt;= strlen(hello); i++) {\nprintf(\"%2x \", hello[i]);\n}\nprintf(\"\\n\");\nfor (int i = 0; i &lt;= strlen(hello); i++) {\nprintf(\"%2c \", hello[i]);\n}\nprintf(\"\\n%s\\n\",hello);\nprintHex((unsigned int*) hello, strlen(hello)/(4*sizeof(char)) + 1);\nprintHex((unsigned int*) hello, 40);\nprintf(\"\\n\");\nprintf(\"\\n\");\nprintf(\"\\n\");\n// The continue of the stack alocation\nprintf(\"We working with arr_2 (all init with 4)\\n\");\nprintHex((unsigned int*)arr_2, sizeof(arr_2)/sizeof(unsigned int));\n// Change arr, but arr_2 will be affected\nfor (int i = 4; i &lt; 8; i++) {\narr[i] = 2;\n}\nprintHex((unsigned int*)arr_2, sizeof(arr_2)/sizeof(unsigned int));\nreturn 0;\n}\n</code></pre> <p>The above program it self, return this:</p> <pre><code>size of arr = 32\nsize of arr element = 8\nArray with 8 length:\n00000001, 00000000, 00000001, 00000000, 00000001, 00000000, 00000001, 00000000\nArray with 8 length:\n00000001, 00000000, 00000001, 00000000, 00000001, 00000000, 00000001, 00000000\nArray with 8 length:\n00000001, ffffffff, 00000001, 00000000, 00000001, 00000000, 00000001, 00000000\nNew value of arr[0] = -4294967295\n\nString: Hello world! with length of 12, memory size 13\n48 65 6c 6c 6f 20 77 6f 72 6c 64 21  0\n H  e  l  l  o     w  o  r  l  d  !\nHello world!\nArray with 4 length:\n6c6c6548, 6f77206f, 21646c72, 00000000\nArray with 40 length:\n6c6c6548, 6f77206f, 21646c72, 00000000, 00000000, 00000000, 00000000, 00000000, 00000001, ffffffff, 00000001, 00000000, 00000001, 00000000, 00000001, 00000000, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000\n\nWe working with arr_2 (all init with 4)\nArray with 8 length:\n00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004\nArray with 8 length:\n00000002, 00000000, 00000002, 00000000, 00000002, 00000000, 00000002, 00000000\n</code></pre>", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#312-explaination-what-happening-here", "title": "3.1.2. Explaination - What happening here?", "text": "", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#3121-created-an-array-variable", "title": "3.1.2.1. Created an array variable:", "text": "<pre><code>char hello[13] = \"Hello world!\";\nlong long arr[4] = {1, 1, 1, 1};\nint arr_2[8] = {4, 4, 4, 4, 4, 4, 4, 4};\n</code></pre> <ul> <li><code>hello</code> is an array of <code>char</code> type, that being initiation with <code>\"Hello world!\"</code></li> <li><code>arr</code> is an array of <code>long long</code> (8 bytes number) type, that all element initiation with 1;</li> <li><code>arr_2</code> is an array of <code>int</code> (4 bytes number) type, that all element initiation with 4;</li> </ul>", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#3122-helper-function-that-printout-the-exact-value-in-hex-of-a-memory", "title": "3.1.2.2. Helper function that printout the exact value (in hex) of a memory", "text": "<pre><code>int printHex(unsigned int* arr, int length){\nprintf(\"Array with %d length:\\n\", length);\nfor (int i = 0; i &lt; length; i++) {\nprintf(\"%02x\", ((unsigned int*)arr)[i]);\nif (i != length - 1) printf(\", \");\n}\nprintf(\"\\n\");\nreturn 0;\n}\n</code></pre>", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#3123-check-the-memory-of-array-arr", "title": "3.1.2.3. Check the memory of array <code>arr</code>:", "text": "<p>Which mean how much byte size we used to allocating <code>arr</code>, we doing it by calling <code>sizeof()</code> std function.</p> <pre><code>printf(\"size of arr = %lu\\n\", sizeof(arr));\nprintf(\"size of arr element = %lu\\n\", sizeof(arr[0]));\n</code></pre> <p>which return:</p> <pre><code>size of arr = 32\nsize of arr element = 8\n</code></pre> <p>If using this on <code>arr_2</code>, we will get <code>(array size, element size) = (32, 4)</code> </p> <p>We also try to print out the array <code>arr</code> memory:</p> <pre><code>printHex((unsigned int*)arr, sizeof(arr)/sizeof(unsigned int));\n</code></pre> <p>which return: <pre><code>Array with 8 length:\n00000001, 00000000, 00000001, 00000000, 00000001, 00000000, 00000001, 00000000\n</code></pre></p> <p>What we see, is hex value of array <code>arr</code>, that spanning over length of 32 bytes, with each hex number separated by \u201c,\u201d (example <code>00000001</code>) above representing 4 byte.</p> <p>As each element is represented by 8 bytes, which mean, a element in array <code>arr</code>, which is set as <code>1</code> is represented as:</p> <pre><code>00000001, 00000000\n</code></pre> <p>The number not actually representing as <code>00000...0001</code>,  this meaning we having a little-endian architecture, where the byte order is reverse. But we\u2019re not covering this yet, there a lot to know to even understanding this type of problem (We have 32 bit computer memory here).</p>", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#3124-a-different-viewaccessing-way-to-the-memory-of-array-arr", "title": "3.1.2.4. A different view/accessing way to the memory of array <code>arr</code>:", "text": "<p>I create a new view for <code>arr</code> (via C pointer ):</p> <pre><code>unsigned int *arr_view = (unsigned int *) &amp;arr;\nunsigned int arr_length = (unsigned int) (sizeof(arr)/sizeof(unsigned int));\nprintHex(arr_view, arr_length);\n</code></pre> <p>This <code>arr_view</code> is a helper to accessing the same memory that <code>arr</code> being allocated. Which mean, printing <code>arr_view</code> return the same as <code>arr</code> </p> <pre><code>Array with 8 length:\n00000001, 00000000, 00000001, 00000000, 00000001, 00000000, 00000001, 00000000\n</code></pre> <p>Next, i set a new value into the index <code>[1]</code> of the <code>arr_view</code> to <code>fffffff</code> (which just a flip bit of <code>00000000</code>). This effect our <code>arr[0]</code> value (which spanning over <code>arr_view[0]</code> and <code>arr_view[1]</code>)</p> <pre><code>arr_view[1] = (unsigned int)~0;\nprintHex(arr_view, arr_length);\nprintf(\"New value of arr[0] = %lld\\n\\n\\n\", arr[0]);\n</code></pre> <pre><code>Array with 8 length:\n00000001, ffffffff, 00000001, 00000000, 00000001, 00000000, 00000001, 00000000\nNew value of arr[0] = -4294967295\n</code></pre>", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#3125-stringchar-array", "title": "3.1.2.5. String/Char array", "text": "<p>String/Char array look suck when we care about memory. C use ACSII for character representation, but by creating variable differently we can land the string in a totally different memory.</p> <p>This will be store into a separated string memory (that store all static string that appear in the source): <pre><code>char *hello = \"Hello world!\"; // We not using this\n</code></pre></p> <p>While this type of create will be allocated into stack memory: <pre><code>char hello[13] = \"Hello world!\";\n</code></pre></p> <pre><code>    printf(\"String: %s with length of %lu, memory size %lu\\n\", hello, strlen(hello), sizeof(hello) );\nfor (int i = 0; i &lt;= strlen(hello); i++) {\nprintf(\"%2x \", hello[i]);\n}\nprintf(\"\\n\");\nfor (int i = 0; i &lt;= strlen(hello); i++) {\nprintf(\"%2c \", hello[i]);\n}\nprintf(\"\\n%s\\n\",hello);\nprintHex((unsigned int*) hello, strlen(hello)/(4*sizeof(char)) + 1);\nprintHex((unsigned int*) hello, 40);\n</code></pre> <pre><code>String: Hello world! with length of 12, memory size 13\n48 65 6c 6c 6f 20 77 6f 72 6c 64 21  0\n H  e  l  l  o     w  o  r  l  d  !\nHello world!\nArray with 4 length:\n6c6c6548, 6f77206f, 21646c72, 00000000\nArray with 40 length:\n6c6c6548, 6f77206f, 21646c72, 00000000, 00000000, 00000000, 00000000, 00000000, 00000001, ffffffff, 00000001, 00000000, 00000001, 00000000, 00000001, 00000000, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000\n</code></pre> <ul> <li> <p>The output can\u2019t express this, so here is reference when we use <code>char* hello</code>, by printing <code>hello</code> we see that there is a <code>00</code> at the <code>[3]</code>. This is because the initiation of string value \u201cHello\u2026\u201d will always have a <code>null</code> padding (<code>00</code> character).</p> <pre><code>Array with 12 length:\n6c6c6548, 6f77206f, 21646c72, 72724100, 77207961, 20687469, 6c206425, ...\n</code></pre> </li> <li> <p>Also, we can see that our string is store in revert order, little-endian again. Each char is effectively store into 1 byte. Sharing 32 bit instead of storing each one in a 32 bit memory. (if we return back - or using embed/IOT device, <code>int</code> is 16 bits, <code>long</code> is 32 bits but now general memory is more efficiency handling 32 bits number, which <code>int</code> now default 32 bits, which the same as <code>long</code>)</p> <pre><code>48 65 6c 6c 6f 20 77 6f 72 6c 64 21  0\n H  e  l  l  o     w  o  r  l  d  !\nHello world!\nArray with 4 length:\n6c6c6548, 6f77206f, 21646c72, 00000000\n</code></pre> </li> <li> <p>We can see the appearance of <code>arr</code> and <code>arr_2</code> on the stack, next to our <code>hello</code> value.</p> <pre><code>Array with 40 length:\n6c6c6548, 6f77206f, 21646c72, 00000000, 00000000, 00000000, 00000000, 00000000, 00000001, ffffffff, 00000001, 00000000, 00000001, 00000000, 00000001, 00000000, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000\n</code></pre> </li> </ul> <pre><code>    // The continue of the stack alocation\nprintf(\"We working with arr_2 (all init with 4)\\n\");\nprintHex((unsigned int*)arr_2, sizeof(arr_2)/sizeof(unsigned int));\n// Change arr, but arr_2 will be affected\nfor (int i = 4; i &lt; 8; i++) {\narr[i] = 2;\n}\nprintHex((unsigned int*)arr_2, sizeof(arr_2)/sizeof(unsigned int));\n</code></pre> <pre><code>Array with 8 length:\n00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004, 00000004\nArray with 8 length:\n00000002, 00000000, 00000002, 00000000, 00000002, 00000000, 00000002, 00000000\n</code></pre> <p>C handle memory next to each other. While <code>arr[x]</code> will literally just a offset accessing memory over a starting point. So we can accessing other variable memory and modify it (even a memory/assembly instruction of the program can be access - but modify is prevent by specify writeable memory of runtime executable). </p>", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#3126-overflow-the-stack", "title": "3.1.2.6. Overflow the stack", "text": "", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#32-javascript", "title": "3.2. Javascript", "text": "<p>We can create a new buffer array using <code>new ArrayBuffer()</code>. Which it self can be feed into <code>new Uint8Array()</code>, <code>new Uint16Array()</code>, <code>new Uint32Array()</code>, <code>Uint8ClampedArray()</code>constructor to create direct view of that memory.</p> <pre><code>&gt; a = new ArrayBuffer(16)\nArrayBuffer {\n  [Uint8Contents]: &lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&gt;,\n  byteLength: 16\n}\n&gt; b = new Uint8Array(a)\nUint8Array(16) [\n  0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0\n]\n&gt; c = new Uint16Array(a)\nUint16Array(8) [\n  0, 0, 0, 0,\n  0, 0, 0, 0\n]\n&gt; d = new Uint32Array(a)\nUint32Array(4) [ 0, 0, 0, 0 ]\n&gt; e = new Uint8ClampedArray(a)\nUint8ClampedArray(16) [\n  0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0\n]\n</code></pre> <p>By assigning any of them, we directly change the memory that allocated to a</p> <pre><code>&gt; d[0] = 4\n4\n&gt; d\nUint32Array(4) [ 4, 0, 0, 0 ]\n&gt; a\nArrayBuffer {\n  [Uint8Contents]: &lt;04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&gt;,\n  byteLength: 16\n}\n</code></pre> <pre><code>&gt; b[2] = ~b[2]\n-1\n&gt; a\nArrayBuffer {\n  [Uint8Contents]: &lt;04 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00&gt;,\n  byteLength: 16\n}\n</code></pre> <p>Because all a, b, c, d, e point to the same memory, we also changing all of them as once. Resulting the number appearance update when querying them back:</p> <pre><code>&gt; a\nArrayBuffer {\n  [Uint8Contents]: &lt;04 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00&gt;,\n  byteLength: 16\n}\n&gt; b\nUint8Array(16) [\n  4, 0, 255, 0, 0, 0,\n  0, 0,   0, 0, 0, 0,\n  0, 0,   0, 0\n]\n&gt; c\nUint16Array(8) [\n  4, 255, 0, 0,\n  0,   0, 0, 0\n]\n&gt; d\nUint32Array(4) [ 16711684, 0, 0, 0 ]\n&gt; e\nUint8ClampedArray(16) [\n  4, 0, 255, 0, 0, 0,\n  0, 0,   0, 0, 0, 0,\n  0, 0,   0, 0\n]\n</code></pre> <p>We can see that, <code>d[0] = 16711684</code> (32 bit array) is the result of true decimal value hold by <code>\"04 00 ff 00\"</code>.</p> <p>The following number <code>[0]</code> is there to tell us the offset, that how we want the computer to access the memory, by increasing it, the computer jump over 32 bit each.</p> <p>While <code>b[2]</code> (8 bit array) is pointing to the start memory + an offset of <code>8 * 2 bit</code>. This type of traversal do cost time, base on RAM, but still can be count as instant for the most of case.</p>", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Array/#33-python-array", "title": "3.3. Python array", "text": "<p>Not this:</p> <pre><code>a = [1,2,3]\n</code></pre> <p>This is a List, a data structure that could be implement using array (it is implement using array, after I look at python source code)</p> <pre><code>\u2192 python\nPython 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; a = [1,2,3]\n&gt;&gt;&gt; help(a)\nHelp on list object:\nclass list(object)\n|  list(iterable=(), /)\n|\n|  Built-in mutable sequence.\n|\n|  If no argument is given, the constructor creates a new empty list.\n|  The argument must be an iterable if specified.\n|\n|  Methods defined here:\n|\n|  __add__(self, value, /)\n|      Return self+value.\n</code></pre> <p>There is a array object, you can use by importing from array module :</p> <pre><code>import array from array\na = array('l') # signed integer 4 bytes array\nhelp(a)\n</code></pre> <p>Output: <pre><code>class array(builtins.object)\n|  array(typecode [, initializer]) -&gt; array\n|\n|  Return a new array whose items are restricted by typecode, and\n|  initialized from the optional initializer value, which must be a list,\n|  string or iterable over elements of the appropriate type.\n|\n|  Arrays represent basic values and behave very much like lists, except\n|  the type of objects stored in them is constrained. The type is specified\n|  at object creation time by using a type code, which is a single character.\n|  The following type codes are defined:\n|\n|      Type code   C Type             Minimum size in bytes\n|      'b'         signed integer     1\n|      'B'         unsigned integer   1\n|      'u'         Unicode character  2 (see note)\n|      'h'         signed integer     2\n|      'H'         unsigned integer   2\n|      'i'         signed integer     2\n|      'I'         unsigned integer   2\n|      'l'         signed integer     4\n|      'L'         unsigned integer   4\n|      'q'         signed integer     8 (see note)\n|      'Q'         unsigned integer   8 (see note)\n|      'f'         floating point     4\n|      'd'         floating point     8\n</code></pre></p> <p>Still, it just a List, with extra type config, with a way to define type using a hidden Type code for no reason, why?</p> <pre><code>static PyObject *ins(arrayobject *self, Py_ssize_t where, PyObject *v) {\nif (ins1(self, where, v) != 0)\nreturn NULL;\nPy_RETURN_NONE;\n}\n</code></pre>", "tags": ["computer_sience", "O(1)"]}, {"location": "Basic/Big%20O%20Time%20Complexity/", "title": "Big O Time Complexity", "text": "", "tags": ["computer_sience"]}, {"location": "Basic/Big%20O%20Time%20Complexity/#define", "title": "Define", "text": "<p>We use Big O to express the growing of total Program Instruction need to be done for a algorithm base on it\u2019s input.</p> <p>Key point:</p> <ul> <li>The total count of input is call <code>n</code> </li> <li>Big O specifically ignore/drop any constant.</li> </ul>", "tags": ["computer_sience"]}, {"location": "Basic/Big%20O%20Time%20Complexity/#detecting", "title": "Detecting", "text": "<p>It not a fully clear, but we can focus on loop appearance in the algorithm.</p> <p>A example of <code>O(n)</code>:</p> <pre><code>arr = [1, 23, 5, 7, 8, 8, 9, 25, 3, 423, 43, 25, 4, 36, 56, 7, 525, 68,  44, 7, 8, 9, 8, 9, 809, 233, 445, 6, 34, 6]\nn = len(arr)\nsum = 0\nfor i in range(n):\nsum += arr[i]\nprint(sum)\n</code></pre> <p>We can use a best case and worst case (or even average case) if the loop can be logically end before hand. But we mostly want to use worst case to represent the algorithm. </p>", "tags": ["computer_sience"]}, {"location": "Basic/Big%20O%20Time%20Complexity/#example-with-problem", "title": "Example with problem:", "text": "<ul> <li> <p><code>O(1)</code>: It a constant time algorithm that not take into account of input</p> Problem Last update 50. Pow(x, n) 8:52 PM - October 02, 2023 Array 8:52 PM - October 02, 2023 </li> <li> <p><code>O(log n)</code></p> Problem Last update 74. Search a 2D Matrix 8:52 PM - October 02, 2023 50. Pow(x, n) 8:52 PM - October 02, 2023 33. Search in Rotated Sorted Array 8:52 PM - October 02, 2023 Binary search 8:52 PM - October 02, 2023 </li> <li> <p><code>O(n)</code></p> Problem Last update 746. Min Cost Climbing Stairs 12:55 AM - October 14, 2023 2038. Remove Colored Pieces if Both Neighbors are the Same Color 12:06 AM - October 14, 2023 905. Sort Array By Parity 8:52 PM - October 02, 2023 88. Merge Sorted Array 8:52 PM - October 02, 2023 92. Reverse Linked List II 8:52 PM - October 02, 2023 </li> <li> <p><code>O(n log n)</code></p> Problem Last update Quick sort 8:52 PM - October 02, 2023 4. Median of Two Sorted Arrays 8:52 PM - October 02, 2023 338. Counting Bits 8:52 PM - October 02, 2023 1658. Minimum Operations to Reduce X to Zero 8:52 PM - October 02, 2023 148. Sort List 8:52 PM - October 02, 2023 </li> <li> <p><code>O(sqrt n)</code></p> Problem Last update Two Crystal Ball 8:52 PM - October 02, 2023 </li> <li> <p><code>O(n ** 2)</code></p> Problem Last update 84. Largest Rectangle in Histogram 8:52 PM - October 02, 2023 63. Unique Paths II 8:52 PM - October 02, 2023 518. Coin Change II 8:52 PM - October 02, 2023 377. Combination Sum IV 8:52 PM - October 02, 2023 134. Gas Station 8:52 PM - October 02, 2023 </li> <li> <p><code>O(n ** 3)</code></p> Problem Last update </li> <li> <p><code>O(2 ** n)</code></p> Problem Last update </li> <li> <p><code>O(n!)</code></p> Problem Last update 77. Combinations 8:52 PM - October 02, 2023 46. Permutations 8:52 PM - October 02, 2023 </li> </ul>", "tags": ["computer_sience"]}, {"location": "Basic/Binary%20search/", "title": "Binary search", "text": "", "tags": ["computer_sience", "python", "typescript", "O(log n)"]}, {"location": "Basic/Binary%20search/#problem", "title": "Problem", "text": "<p>Find a element <code>x</code> in a sorted array <code>arr</code></p> <p>For easier to follow: 1. We assuming array <code>arr</code> is value is sorted from the lowest to highest. 2. The array is zero-index (<code>arr</code> start from 0)</p> <pre><code>arr = [1,2, 2, 2, 2, 3, 4, 6, 8, 9, 142, 142, 142, 142, 255, 255, 255, 567, 1275, 1275, 1275, 2547, 2547, 5458, 9722, 92124]\nx = 567\n</code></pre>", "tags": ["computer_sience", "python", "typescript", "O(log n)"]}, {"location": "Basic/Binary%20search/#solve", "title": "Solve", "text": "", "tags": ["computer_sience", "python", "typescript", "O(log n)"]}, {"location": "Basic/Binary%20search/#what-happening", "title": "What happening?", "text": "<p>We leverage on the characteristic of a sorted array, where a index <code>i</code> element always have bigger or equal value than element with smaller index than <code>i</code>.</p> <pre><code>arr[0] ... &lt;= arr[i-2] &lt;= arr[i-1] &lt;= arr[i] == True\n</code></pre> <p>and revert</p> <pre><code>arr[i] ... &lt;= arr[i+1] &lt;= arr[i+2] &lt;= arr[len(arr)-1] == True\n</code></pre> <p>This mean, if we access a value <code>&lt;any&gt;</code> of the <code>arr</code>, we know that the finding value <code>x</code> is either in the left, or in the right of the <code>&lt;any&gt;</code> element.</p>", "tags": ["computer_sience", "python", "typescript", "O(log n)"]}, {"location": "Basic/Binary%20search/#pseudo-code", "title": "Pseudo code", "text": "<p>While there is many way to choose the value <code>&lt;any&gt;</code> in <code>arr</code>, we specifically choose the middle of <code>arr</code>. By splitting at the middle, we can eliminate the most of <code>arr</code> in one comparing session.</p> <ol> <li>Start with the full array <code>arr</code>, find the middle of the array <code>arr</code>, we calling it <code>mid</code> point, with value <code>arr[mid]</code></li> <li>Base on the comparing result of <code>x</code> and <code>arr[mid]</code>, We narrowing down array <code>arr</code> for searching:<ul> <li>If <code>x == arr[mid]</code>, return <code>True</code> as we found <code>x</code></li> <li>If <code>x &lt; arr[mid]</code>, <code>arr</code> can be narrowing down to <code>arr[0..mid-1]</code>, as all value of <code>arr[mid .. n]</code> is greater than <code>x</code></li> <li>If <code>x &gt; arr[mid]</code>, <code>arr</code> can be narrowing down to <code>arr[mid+1..len(arr) - 1]</code>, as all value of <code>arr[0 .. mid]</code> is less than <code>x</code></li> </ul> </li> <li>Repeat the process with our new narrowed array <code>arr</code></li> </ol> <p>This result on a O(log n) time complexity</p>", "tags": ["computer_sience", "python", "typescript", "O(log n)"]}, {"location": "Basic/Binary%20search/#actual-implement", "title": "Actual Implement", "text": "", "tags": ["computer_sience", "python", "typescript", "O(log n)"]}, {"location": "Basic/Binary%20search/#personal-preference", "title": "Personal preference", "text": "<p><code>O(log n)</code></p> <p>There is something call Off by one error causing a lot of debug time, so my general take on binary search is always:</p> <p><code>(left, right) = (lowest, highest) = (-1, len(arr))</code> (both left and high is not inclusive in the array from the beginning)</p> <p>Why? There is several advantage problem related to binary search, that we will stump on:</p> <ul> <li>Find the first appearance of <code>x</code> in array</li> <li>Find the last appearance of <code>x</code> in array</li> <li>Find the all appearance of <code>x</code> in array</li> <li>Find the position to insert <code>x</code> into array so that array <code>arr</code> still sorted</li> </ul> <p>By using both <code>left</code> and <code>right</code> not in the array give me better control on how I want to lane <code>left</code> and <code>right</code> pointer in to array. This is a example on Find the all appearance of <code>x</code> in array <code>arr</code>:</p> <ul> <li><code>isFound</code> tell us if <code>x</code> in <code>arr</code> or not</li> <li>Where <code>lastPosition</code> tell you the element with the biggest position in <code>arr</code> that have <code>x</code> value</li> </ul> <pre><code>from math import trunc, log\ndef binarySearch(arr, x):\nl, r = -1, len(arr)\nn = len(arr)\nlogn = trunc(log(n+2,2))+1\nfor _ in range(logn):\nm = (l + r) // 2\nif l == r-1:\nbreak\nif x &lt; arr[m]:\nr = m\nelse:\nl = m\nassert l == r-1\nreturn x == arr[l], l\narr = [1, 2, 2, 2, 2, 3, 4, 6, 8, 9, 142, 142, 142, 142, 255, 255, 255, 567, 1275, 1275, 1275, 2547, 2547, 5458, 9722, 92124]\nx = 567\nisFound, lastPossition = binarySearch(arr, x)\nprint(isFound, lastPossition)\n</code></pre>", "tags": ["computer_sience", "python", "typescript", "O(log n)"]}, {"location": "Basic/Binary%20search/#example", "title": "Example:", "text": "Problem Last update 74. Search a 2D Matrix 8:52 PM - October 02, 2023 84. Largest Rectangle in Histogram 8:52 PM - October 02, 2023 81. Search in Rotated Sorted Array II 8:52 PM - October 02, 2023 274. H-Index 8:52 PM - October 02, 2023", "tags": ["computer_sience", "python", "typescript", "O(log n)"]}, {"location": "Basic/Binary%20search/#typescript-implementation", "title": "Typescript implementation", "text": "<p><code>O(log n)</code></p> <p>Not thing fancy, just pain </p> <ul> <li>For divining, JavaScript force us to use <code>(float)</code> division result, we have to use <code>Math.floor()</code> (do not use <code>Math.trunc()</code>)</li> <li>The implement just focus on finding the value, so it return on found value immediately </li> </ul> <pre><code>export default function bs_list(haystack: number[], needle: number): boolean {\nlet l = -1;\nlet r = haystack.length;\nlet m = 0;\nwhile (true) {\nm = Math.floor((l + r) / 2);\nif (haystack[m] == needle)\nreturn true;\nif (l == m)\nbreak;\nif (haystack[m] &lt; needle) {\nl = m;\n} else {\nr = m;\n}\n}\nreturn false\n}\n</code></pre>", "tags": ["computer_sience", "python", "typescript", "O(log n)"]}, {"location": "Basic/Bubble%20sort/", "title": "Bubble sort", "text": "", "tags": ["computer_sience", "python", "O(n ** 2)"]}, {"location": "Basic/Bubble%20sort/#problem", "title": "Problem", "text": "<p>Given a array <code>arr</code>, sort the array (in memory)</p> <pre><code>arr = [124, 1241, 412, 4, 54 ,5, 34 , 12, 4, 12, 321,3 ,33]\n</code></pre>", "tags": ["computer_sience", "python", "O(n ** 2)"]}, {"location": "Basic/Bubble%20sort/#solve", "title": "Solve", "text": "", "tags": ["computer_sience", "python", "O(n ** 2)"]}, {"location": "Basic/Bubble%20sort/#bubble-sort", "title": "Bubble sort", "text": "<p><code>O(n ** 2)</code></p> <p>The ideal is that large value (large bubble) flow to above first.</p> <ul> <li>After each integration, the biggest value flowing and stay at top, fixed there and the next loop skipping it</li> <li>We do the flow simulation, via: From the bottom, to the top, go to each value of array <code>arr</code> and swapping it with above value if the value is smaller than it. </li> </ul> <p>Bubble sort - Example white board </p>", "tags": ["computer_sience", "python", "O(n ** 2)"]}, {"location": "Basic/Bubble%20sort/#implementation", "title": "Implementation", "text": "<pre><code>def bubbleSort(arr):\nfor i in range(len(arr)):\nfor j in range(len(arr) - i - 1):\nif arr[j] &gt; arr[j+1]:\narr[j], arr[j+1] = arr[j+1], arr[j]\narr = [124, 1241, 412, 4, 54, 5, 34, 12, 4, 12, 321, 3, 33]\nbubbleSort(arr)\nprint(arr)\n</code></pre>", "tags": ["computer_sience", "python", "O(n ** 2)"]}, {"location": "Basic/Linear%20search/", "title": "Linear search", "text": "", "tags": ["computer_sience", "typescript", "O(n)"]}, {"location": "Basic/Linear%20search/#problem", "title": "Problem", "text": "<p>Find a element <code>x</code> in a array <code>arr</code></p> <p>For easier to follow: 1. We assuming array <code>arr</code> is value is sorted from the lowest to highest. 2. The array is zero-index (<code>arr</code> start from 0)</p> <pre><code>arr = [1,2424, 22, 122, 24, 73, 764, 66, 82, 19, 4142, 1442, 12, 1542, 545, 2545, 25, 56, 127, 127, 127, 254, 254, 48, 72, 924]\nx = 567\n</code></pre>", "tags": ["computer_sience", "typescript", "O(n)"]}, {"location": "Basic/Linear%20search/#solve", "title": "Solve", "text": "", "tags": ["computer_sience", "typescript", "O(n)"]}, {"location": "Basic/Linear%20search/#loop-from-left-to-right", "title": "Loop from left to right", "text": "<p><code>O(n)</code></p> <p>We go one by one, check if element in <code>arr</code> have the same value with <code>x</code>:</p> <ul> <li>If found we return it <code>true</code></li> <li>If we can\u2019t found any after looping through all of <code>arr</code> array\u2019s elements, we return <code>false</code></li> </ul> <pre><code>export default function linear_search(haystack: number[], needle: number): boolean {\nfor (let i = 0; i &lt; haystack.length; i++) {\nif (haystack[i] == needle)\nreturn true\n}\nreturn false\n}\n</code></pre>", "tags": ["computer_sience", "typescript", "O(n)"]}, {"location": "Basic/Linked%20List/", "title": "Linked List", "text": "", "tags": ["computer_sience"]}, {"location": "Basic/Linked%20List/#1-problem", "title": "1. Problem", "text": "<p>A <code>array</code> like structure, but dynamic with actual Insert and Delete operation. Implement Linked List</p>", "tags": ["computer_sience"]}, {"location": "Basic/Linked%20List/#2-solve", "title": "2. Solve", "text": "", "tags": ["computer_sience"]}, {"location": "Basic/Linked%20List/#linked-list", "title": "Linked list", "text": "<pre><code>class Node:\ndef __init__(self, value, nextNode = None):\nself.value = value\nself.nextNode = nextNode\nclass LinkedList:\ndef __init__(self):\nself.head = None\nself.tail = None\ndef insert(self, v):\nif self.head == None:\nself.head = Node(v)\nself.tail = self.head\nreturn\nself.tail.nextNode = Node(v)\nself.tail = self.tail.nextNode\ndef delete(self, v):\nif self.head == None:\nreturn\n# Head delete\nif self.head.value == v:\ntmp = self.head\nself.head = self.head.nextNode\nself.head.prevNode = None\n# del tmp\n# Middle, Tail delete\n# TODO: Traversal to v and delete\n</code></pre>", "tags": ["computer_sience"]}, {"location": "Basic/Linked%20List/#double-linked-list", "title": "Double Linked list", "text": "<pre><code>class Node:\ndef __init__(self, value, nextNode = None, prevNode = None):\nself.value = value\nself.nextNode = nextNode\nself.prevNode = prevNode\nclass DoubleLinkedList:\ndef __init__(self):\nself.head = None\nself.tail = None\ndef insert(self, v):\nif self.head == None:\nself.head = Node(v)\nself.tail = self.head\nreturn\nself.tail.nextNode = Node(v, prevNode = self.tail)\nself.tail = self.tail.nextNode\ndef delete(self, v):\nif self.head == None:\nreturn\n# Head delete\nif self.head.value == v:\ntmp = self.head\nself.head = self.head.nextNode\nself.head.nextNode\n# del tmp\n# Tail delete\n# Middle, \n# TODO: Traversal to v and delete\n</code></pre>", "tags": ["computer_sience"]}, {"location": "Basic/List/", "title": "List", "text": "", "tags": ["computer_sience", "pascal"]}, {"location": "Basic/List/#problem", "title": "Problem", "text": "<p>What is a List?</p>", "tags": ["computer_sience", "pascal"]}, {"location": "Basic/List/#solve", "title": "Solve", "text": "<p>This is a basic structure, contain set of indexed element with the same type, with basic operation like: Find, Insert, Delete, Sort, \u2026 </p>", "tags": ["computer_sience", "pascal"]}, {"location": "Basic/List/#implementation", "title": "Implementation", "text": "", "tags": ["computer_sience", "pascal"]}, {"location": "Basic/List/#array-list", "title": "Array List", "text": "<p><code>pascal</code></p> <p>This just better inn many way, but we need to handle the extending of the List, which cost O(n). The <code>maxsize</code> of the array can be a problem, and we may need to implement memory copy to move to a bigger array if we running out.</p> <ul> <li>Get: O(1)</li> <li> <p>Set: O(1)</p> </li> <li> <p>Push: O(1)</p> </li> <li>Pop: O(1)</li> <li>Insert: O(n)</li> <li>Find: O(n)</li> <li>Delete: O(n)</li> </ul> <pre><code>type\nlist = record\nvalue : array [1..100] of integer;\nlength : integer;\nend;\nprocedure push(var l : list; v : integer);\nbegin\nl.length := l.length + 1;\nl.value[l.length] := v;\nend;\nfunction pop(var l : list) : integer;\nbegin\npop := l.value[l.length];\nl.length := l.length - 1;\nend;\nprocedure insert(var l : list; pos : integer; v : integer);\nvar\ni : integer;\nbegin\nfor i := l.length downto pos do begin\nl.value[i+1] := l.value[i]\nend;\nl.value[pos] := v;\nl.length := l.length + 1;\nend;\nfunction find(l : list; v : integer) : integer;\nvar\ni : integer;\nbegin\nfor i := 1 to l.length do begin\nif l.value[i] = v then begin\nfind := i;\nbreak\nend;\nend;\nend;\nprocedure delete(var l: list; pos : integer); var\ni : integer;\nbegin\nfor i := pos to l.length do begin\nl.value[i] := l.value[i+1];\nend;\nl.length := l.length - 1;\nend;\nprocedure printList(l : list);\nvar\ni : integer;\nbegin\nwrite('List size ', l.length, ' with item: ');\nfor i := 1 to l.length-1 do begin\nwrite(l.value[i], ', ');\nend;\nwriteln(l.value[i+1]);\nend;\nvar\nl : list;\ni, pos : integer;\nbegin\nl.length := 0;\nfor i := 1 to 10 do begin\npush(l,i);\nend;\nprintList(l);\nfor i := 0 downto -10 do begin\ninsert(l, 1, i);\nend;\nprintList(l);\nfor i := -2 to 4 do begin\npos := find(l, i);\ndelete(l, pos);\nend;\nprintList(l);\nfor i := 1 to 5 do begin\npop(l);\nend;\nprintList(l);\nend.\n</code></pre> <p>Output: <pre><code>List size 10 with item: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nList size 21 with item: -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nList size 14 with item: -10, -9, -8, -7, -6, -5, -4, -3, 5, 6, 7, 8, 9, 10\nList size 9 with item: -10, -9, -8, -7, -6, -5, -4, -3, 5\n</code></pre></p>", "tags": ["computer_sience", "pascal"]}, {"location": "Basic/List/#linked-list", "title": "Linked list", "text": "<p><code>pascal</code></p> <p>The Big O complexity look like this in a theory (until you consider CPU cache vs Memory accessing and Array List just gain massive advantage(?) over Linked list on real hardware).  </p> <ul> <li>Get: O(n)</li> <li> <p>Set: O(n)</p> </li> <li> <p>Push: O(1)</p> </li> <li>Pop: O(n)</li> <li>Insert: O(n)</li> <li>Find: O(n)</li> <li>Delete: O(n)</li> </ul> <pre><code>type\nlist = record\nhead, tail : ^node;\nlength : integer;\nend;\nnode = record\nvalue : integer;\nnext : ^node;\nend;\nptrnode = ^node;\nprocedure listset(var l : list; pos, v : integer);\nvar\np : ^node;\ni : integer;\nbegin\np := nil;\nfor i := 1 to pos do begin\nif p = nil then begin\np := l.head;\nend\nelse begin\np := p^.next;\nend;\nend;\np^.value := v;\nend;\nprocedure _get(l : list; pos : integer; var element : ptrnode);\nvar\np : ^node;\ni : integer;\nbegin\np := nil;\nfor i := 1 to pos do begin\nif p = nil then\np := l.head\nelse begin\np := p^.next;\nend;\nend;\nwriteln('Found: ', p^.value);\nelement := p;\nend;\nfunction get(l : list; pos : integer) : integer;\nvar\np : ^node;\ni : integer;\nbegin\np := nil;\nfor i := 1 to pos do begin\nif p = nil then\np := l.head\nelse begin\np := p^.next;\nend;\nend;\nget := p^.value;\nend;\nprocedure insert(var l : list; pos : integer; v : integer);\nvar\np, temp : ^node;\nbegin\nif (l.head = nil) or (pos = 1) then begin\nnew(temp);\ntemp^.value := v;\ntemp^.next := l.head;\nl.head := temp;\nif l.tail = nil then begin\nl.tail := l.head;\nl.length := 0;\nend;\nl.length := l.length + 1;\nend\nelse begin\np := nil;\n_get(l, pos-1, p);\nif p &lt;&gt; nil then begin\nnew(temp);\ntemp^.value := v;\ntemp^.next := p^.next;\np^.next := temp;\nl.length := l.length + 1;\nend;\nend;\nend;\nfunction find(l : list; v : integer) : integer;\nvar\np : ^node;\ni : integer;\nbegin\nwriteln('Finding ', v);\np := l.head;\ni := 1;\nwhile p &lt;&gt; nil do begin\nif p^.value = v then begin\nfind := i;\nbreak\nend;\ni := i + 1;\np := p^.next;\nend;\nend;\nprocedure delete(var l: list; pos : integer); var\np, temp : ^node;\nbegin\np := nil;\n_get(l, pos-1, p);\nif p &lt;&gt; nil then begin\ntemp := p^.next;\np^.next := temp^.next;\ndispose(temp);\nl.length := l.length - 1;\nend;\nend;\nprocedure push(var l : list; v : integer);\nbegin\nif l.head = nil then begin\nnew(l.head);\nl.head^.value := v;\nl.head^.next := nil;\nl.tail := l.head;\nl.length := 1;\nend\nelse begin\nnew(l.tail^.next);\nl.tail := l.tail^.next;\nl.tail^.value := v;\nl.tail^.next := nil;\nl.length := l.length + 1;\nend;\nend;\nfunction pop(var l : list) : integer;\nvar\np, temp : ^node;\nbegin\np := nil;\n_get(l, l.length - 1, p);\ntemp := p^.next;\np^.next := nil;\npop := temp^.value;\nl.length := l.length - 1;\ndispose(temp);\nend;\nprocedure printList(l : list);\nvar\np : ^node;\nbegin\nwrite('List size ', l.length, ' with item: ');\np := l.head;\nwrite(p^.value);\np := p^.next;\nwhile p &lt;&gt; nil do begin\nwrite(', ');\nwrite(p^.value);\np := p^.next;\nend;\nwriteln;\nend;\nvar\nl : list;\ni, pos : integer;\nbegin\nl.length := 0;\nfor i := 1 to 10 do begin\npush(l,i);\nend;\nprintList(l);\nfor i := 0 downto -10 do begin\ninsert(l, 1, i);\nend;\nprintList(l);\nfor i := -2 to 4 do begin\npos := find(l, i);\ndelete(l, pos);\nend;\nprintList(l);\nfor i := 1 to 5 do begin\npop(l);\nend;\nprintList(l);\nend.\n</code></pre> <p>Output:</p> <pre><code>List size 10 with item: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nList size 21 with item: -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nList size 14 with item: -10, -9, -8, -7, -6, -5, -4, -3, 5, 6, 7, 8, 9, 10\nList size 9 with item: -10, -9, -8, -7, -6, -5, -4, -3, 5\n</code></pre>", "tags": ["computer_sience", "pascal"]}, {"location": "Basic/List/#adding-validator", "title": "Adding validator", "text": "<p>A good practice to make the code useable is adding more and more validate input and return error back to the caller. Still for sake of practical Data structure, it better to focus on the core handler, and bloating them/the program it self with data validate. Here I have to wrap every function:</p> <ul> <li>Every get/delete/pop with a <code>validateGet</code>: that check if we do operation inside the List it self.</li> <li>Every insert/push with a <code>validateInsert</code>: that check if we do operation inside the List or at the end of the List it self, while not overflow our memory (which have max capacity at <code>100</code>).</li> </ul> <pre><code>type\nlist = record\nvalue : array [1..100] of integer;\nlength : integer;\nend;\nfunction validateGet(l : list; pos : integer) : boolean;\nbegin\nvalidateGet := (1 &lt;= pos) and (pos &lt;= l.length );\nend;\nfunction validateInsert(l : list; pos : integer) : boolean;\nbegin\nvalidateInsert := (1 &lt;= pos) and (pos &lt;= l.length + 1) and (l.length &lt; 100);\nend;\nprocedure push(var l : list; v : integer);\nbegin\nif validateInsert(l, l.length) then begin\nl.length := l.length + 1;\nl.value[l.length] := v;\nend;\nend;\nfunction pop(var l : list) : integer;\nbegin\nif validateGet(l, l.length) then begin\npop := l.value[l.length];\nl.length := l.length - 1;\nend;\nend;\nprocedure insert(var l : list; pos : integer; v : integer);\nvar\ni : integer;\nbegin\nif validateInsert(l, pos) then begin\nfor i := l.length downto pos do begin\nl.value[i+1] := l.value[i]\nend;\nl.value[pos] := v;\nl.length := l.length + 1;\nend;\nend;\nfunction find(l : list; v : integer) : integer;\nvar\ni : integer;\nbegin\nfor i := 1 to l.length do begin\nif l.value[i] = v then begin\nfind := i;\nbreak\nend;\nend;\nend;\nprocedure delete(var l: list; pos : integer); var\ni : integer;\nbegin\nif validateGet(l, pos) then begin\nfor i := pos to l.length do begin\nl.value[i] := l.value[i+1];\nend;\nl.length := l.length - 1;\nend;\nend;\nprocedure printList(l : list);\nvar\ni : integer;\nbegin\nwrite('List size ', l.length, ' with item: ');\nfor i := 1 to l.length-1 do begin\nwrite(l.value[i], ', ');\nend;\nwriteln(l.value[i+1]);\nend;\nvar\nl : list;\ni, pos : integer;\nbegin\nl.length := 0;\nfor i := 1 to 10 do begin\npush(l,i);\nend;\nprintList(l);\nfor i := 0 downto -10 do begin\ninsert(l, 1, i);\nend;\nprintList(l);\nfor i := -2 to 4 do begin\npos := find(l, i);\ndelete(l, pos);\nend;\nprintList(l);\nfor i := 1 to 5 do begin\npop(l);\nend;\nprintList(l);\nend.\n</code></pre> <p>Now what happened, if I need to quickly change the implementation to Linked list.  You can go on and change all of the find/get/set/push/pop/insert into a caller, where it just validate the data and call for the main handle method.</p> <p>This make it more followable ? But I sure am that we can split/changing code much more quickly.</p> <pre><code>type\nlist = record\nhead, tail : ^node;\nlength : integer;\nend;\nnode = record\nvalue : integer;\nnext : ^node;\nend;\nptrnode = ^node;\nprocedure listset(var l : list; pos, v : integer);\nvar\np : ^node;\ni : integer;\nbegin\np := nil;\nfor i := 1 to pos do begin\nif p = nil then begin\np := l.head;\nend\nelse begin\np := p^.next;\nend;\nend;\np^.value := v;\nend;\nprocedure _get(l : list; pos : integer; var element : ptrnode);\nvar\np : ^node;\ni : integer;\nbegin\np := nil;\nfor i := 1 to pos do begin\nif p = nil then\np := l.head\nelse begin\np := p^.next;\nend;\nend;\n// writeln('Found: ', p^.value);\nelement := p;\nend;\nprocedure _insert(var l : list; pos : integer; v : integer);\nvar\np, temp : ^node;\nbegin\nif (l.head = nil) or (pos = 1) then begin\nnew(temp);\ntemp^.value := v;\ntemp^.next := l.head;\nl.head := temp;\nif l.tail = nil then begin\nl.tail := l.head;\nl.length := 0;\nend;\nl.length := l.length + 1;\nend\nelse begin\np := nil;\n_get(l, pos-1, p);\nif p &lt;&gt; nil then begin\nnew(temp);\ntemp^.value := v;\ntemp^.next := p^.next;\np^.next := temp;\nl.length := l.length + 1;\nend;\nend;\nend;\nfunction find(l : list; v : integer) : integer;\nvar\np : ^node;\ni : integer;\nbegin\n// writeln('Finding ', v);\np := l.head;\ni := 1;\nwhile p &lt;&gt; nil do begin\nif p^.value = v then begin\nfind := i;\nbreak\nend;\ni := i + 1;\np := p^.next;\nend;\nend;\nprocedure _delete(var l: list; pos : integer); var\np, temp : ^node;\nbegin\np := nil;\n_get(l, pos-1, p);\nif p &lt;&gt; nil then begin\ntemp := p^.next;\np^.next := temp^.next;\ndispose(temp);\nl.length := l.length - 1;\nend;\nend;\nprocedure _push(var l : list; v : integer);\nbegin\nif l.head = nil then begin\nnew(l.head);\nl.head^.value := v;\nl.head^.next := nil;\nl.tail := l.head;\nl.length := 1;\nend\nelse begin\nnew(l.tail^.next);\nl.tail := l.tail^.next;\nl.tail^.value := v;\nl.tail^.next := nil;\nl.length := l.length + 1;\nend;\nend;\nfunction _pop(var l : list) : integer;\nvar\np, temp : ^node;\nbegin\np := nil;\n_get(l, l.length - 1, p);\ntemp := p^.next;\np^.next := nil;\n_pop := temp^.value;\nl.length := l.length - 1;\ndispose(temp);\nend;\n// Above surface function\nfunction validateGet(l : list; pos : integer) : boolean;\nbegin\nvalidateGet := (1 &lt;= pos) and (pos &lt;= l.length );\nend;\nfunction validateInsert(l : list; pos : integer) : boolean;\nbegin\nvalidateInsert := (1 &lt;= pos) and (pos &lt;= l.length + 1) and (l.length &lt; 100);\nend;\nfunction get(l : list; pos : integer) : integer;\nvar\np : ^node;\nbegin\np := nil;\nif validateGet(l, pos) then begin\n_get(l, pos, p);\nget := p^.value;\nend;\nend;\nprocedure push(var l : list; v : integer);\nbegin\nif validateInsert(l, l.length + 1) then begin\n_push(l, v);\nend;\nend;\nfunction pop(var l : list) : integer;\nbegin\nif validateGet(l, l.length) then begin\npop := _pop(l);\nend;\nend;\nprocedure insert(var l : list; pos : integer; v : integer);\nbegin\nif validateInsert(l, pos) then begin\n_insert(l,pos,v);\nend;\nend;\nprocedure delete(var l: list; pos : integer); begin\nif validateGet(l, pos) then begin\n_delete(l, pos);\nend;\nend;\nprocedure printList(l : list);\nvar\np : ^node;\nbegin\nwrite('List size ', l.length, ' with item: ');\np := l.head;\nwrite(p^.value);\np := p^.next;\nwhile p &lt;&gt; nil do begin\nwrite(', ');\nwrite(p^.value);\np := p^.next;\nend;\nwriteln;\nend;\nvar\nl : list;\ni, pos : integer;\nbegin\nl.head := nil;\nl.tail := nil;\nl.length := 0;\nfor i := 1 to 10 do begin\npush(l,i);\nend;\nprintList(l);\nfor i := 0 downto -10 do begin\ninsert(l, 1, i);\nend;\nprintList(l);\nfor i := -2 to 4 do begin\npos := find(l, i);\ndelete(l, pos);\nend;\nprintList(l);\nfor i := 1 to 5 do begin\npop(l);\nend;\nprintList(l);\nend.\n</code></pre> <p>By doing so, when changing between two List implementation (linked list to array), I could rely on most of validator from all the above surface function, just modify all the main handler (start with <code>_</code>).</p> <p>Diff tree:</p> <pre><code>&gt;git diff --no-index linkedListValidate.pas listValidate.pas\ndiff --git a/linkedListValidate.pas b/listValidate.pas\ndiff --git a/linkedListValidate.pas b/listValidate.pas\nindex d346d6e..0d12861 100644\n--- a/linkedListValidate.pas\n+++ b/listValidate.pas\n@@ -1,137 +1,40 @@\ntype\n     list = record\n\n-        head, tail : ^node;\n+        value : array [1..100] of integer;\n        length : integer;\n     end;\n-    node = record\n-        value : integer;\n-        next : ^node;\n-    end;\n-    ptrnode = ^node;\n-procedure listset(var l : list; pos, v : integer);\n-var\n-    p : ^node;\n-    i : integer;\n+procedure _push(var l : list; v : integer);\nbegin\n-    p := nil;\n-    for i := 1 to pos do begin\n-        if p = nil then begin\n-            p := l.head;\n-        end\n-        else begin\n-            p := p^.next;\n-        end;\n-    end;\n-    p^.value := v;\n+    l.length := l.length + 1;\n+    l.value[l.length] := v;\nend;\n\n-procedure _get(l : list; pos : integer; var element : ptrnode);\n-var\n-    p : ^node;\n-    i : integer;\n+function _pop(var l : list) : integer;\nbegin\n-    p := nil;\n-    for i := 1 to pos do begin\n-        if p = nil then\n-            p := l.head\n-        else begin\n-            p := p^.next;\n-        end;\n-    end;\n-    // writeln('Found: ', p^.value);\n-    element := p;\n+    _pop := l.value[l.length];\n+    l.length := l.length - 1;\nend;\n\nprocedure _insert(var l : list; pos : integer; v : integer);\n var\n\n-    p, temp : ^node;\n-begin\n-    if (l.head = nil) or (pos = 1) then begin\n-        new(temp);\n-        temp^.value := v;\n-        temp^.next := l.head;\n-        l.head := temp;\n-        if l.tail = nil then begin\n-            l.tail := l.head;\n-            l.length := 0;\n-        end;\n-        l.length := l.length + 1;\n-    end\n-    else begin\n-        p := nil;\n-        _get(l, pos-1, p);\n-        if p &lt;&gt; nil then begin\n-            new(temp);\n-            temp^.value := v;\n-            temp^.next := p^.next;\n-            p^.next := temp;\n-            l.length := l.length + 1;\n-        end;\n-    end;\n-end;\n-\n-function find(l : list; v : integer) : integer;\n-var\n-    p : ^node;\n    i : integer;\n begin\n-    // writeln('Finding ', v);\n-    p := l.head;\n-    i := 1;\n-    while p &lt;&gt; nil do begin\n-        if p^.value = v then begin\n-            find := i;\n-            break\n-        end;\n-        i := i + 1;\n-        p := p^.next;\n+    for i := l.length downto pos do begin\n+        l.value[i+1] := l.value[i]\n    end;\n+    l.value[pos] := v;\n+    l.length := l.length + 1;\nend;\n\nprocedure _delete(var l: list; pos : integer);\n var\n\n-    p, temp : ^node;\n-begin\n-    p := nil;\n-    _get(l, pos-1, p);\n-    if p &lt;&gt; nil then begin\n-        temp := p^.next;\n-        p^.next := temp^.next;\n-        dispose(temp);\n-        l.length := l.length - 1;\n-    end;\n-end;\n-\n-procedure _push(var l : list; v : integer);\n+    i : integer;\nbegin\n-    if l.head = nil then begin\n-        new(l.head);\n-        l.head^.value := v;\n-        l.head^.next := nil;\n-        l.tail := l.head;\n-        l.length := 1;\n-    end\n-    else begin\n-        new(l.tail^.next);\n-        l.tail := l.tail^.next;\n-        l.tail^.value := v;\n-        l.tail^.next := nil;\n-        l.length := l.length + 1;\n+    for i := pos to l.length do begin\n+        l.value[i] := l.value[i+1];\n    end;\n-end;\n-\n-function _pop(var l : list) : integer;\n-var\n-    p, temp : ^node;\n-begin\n-    p := nil;\n-    _get(l, l.length - 1, p);\n-    temp := p^.next;\n-    p^.next := nil;\n-    _pop := temp^.value;\n    l.length := l.length - 1;\n-    dispose(temp);\nend;\n\nfunction validateGet(l : list; pos : integer) : boolean;\n@@ -144,17 +47,6 @@ begin\n    validateInsert := (1 &lt;= pos) and (pos &lt;= l.length + 1) and (l.length &lt; 100);\n end;\n\n-function get(l : list; pos : integer) : integer;\n-var\n-    p : ^node;\n-begin\n-    p := nil;\n-    if validateGet(l, pos) then begin\n-        _get(l, pos, p);\n-        get := p^.value;\n-    end;\n-end;\n-\nprocedure push(var l : list; v : integer);\n begin\n     if validateInsert(l, l.length + 1) then begin\n@@ -176,6 +68,18 @@ begin\n    end;\n end;\n\n+function find(l : list; v : integer) : integer;\n+var\n+    i : integer;\n+begin\n+    for i := 1 to l.length do begin\n+        if l.value[i] = v then begin\n+            find := i;\n+            break\n+        end;\n+    end;\n+end;\n+\nprocedure delete(var l: list; pos : integer);\n begin\n     if validateGet(l, pos) then begin\n@@ -185,18 +89,13 @@ end;\nprocedure printList(l : list);\n var\n\n-    p : ^node;\n+    i : integer;\nbegin\n     write('List size ', l.length, ' with item: ');\n-    p := l.head;\n-    write(p^.value);\n-    p := p^.next;\n-    while p &lt;&gt; nil do begin\n-        write(', ');\n-        write(p^.value);\n-        p := p^.next;\n+    for i := 1 to l.length-1 do begin\n+        write(l.value[i], ', ');\n    end;\n-    writeln;\n+    writeln(l.value[i+1]);\nend;\n</code></pre>", "tags": ["computer_sience", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/", "title": "Mathematic expression calculation", "text": "", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#problem", "title": "Problem", "text": "<p>Calculation and return result of a Mathematic expression</p> <pre><code>(1+2) * 3 - 5/2 + 1 - 4*(1-3)\n</code></pre>", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#solve", "title": "Solve", "text": "<p>For simplicity, we use positive integer only. <code>/</code> operator will be consider as a <code>div</code> instead</p>", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#information", "title": "Information", "text": "", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#infix-expression", "title": "Infix expression", "text": "<p>Input\u2019s Mathematic expression is called an infix expression, which is used by us in day today life</p> <p>An infix expression have operators between operands. e.g. <code>A</code>,<code>A + B</code>,<code>(A + B) + (C \u2013 D)</code>. </p>", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#postfix-expression", "title": "Postfix expression", "text": "<p>And postfix expression is a single letter or an operator, preceded by two postfix strings. Every postfix string longer than a single variable contains first and second operands followed by an operator .e.g. <code>A</code>,<code>A B +</code>,<code>A B + C D \u2013</code></p>", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#basic-knowledge-needed", "title": "Basic knowledge needed", "text": "<p><code>pascal</code></p> <p>This will cover really basic on how to Program in Pascal if you want to follow more</p>", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#string-handler", "title": "String handler", "text": "<p>As input having multiple type of data, typing as a free form (user input) we need foundation/basic knowledge string handling, we need:</p> <ul> <li>String insert: Adding extra padding for separating different data type from user input.</li> </ul> <pre><code>var\ns : string;\ni : integer;\nbegin\nreadln(s);\nfor i := length(s) downto 2 do begin\ninsert(',', s, i);\nend;\nwriteln(s);\nend.\n</code></pre> <ul> <li>String delete/refine/trim: Delete extra space given by the user input</li> </ul> <pre><code>procedure trimSpaceRight(var s: string);\nbegin\nwhile (length(s) &gt; 0) and (s[length(s)] = ' ') do begin\ndelete(s, length(s), 1);\nend;\nend;\nprocedure trimSpaceLeft(var s: string);\nbegin\nwhile (length(s) &gt; 0) and (s[1] = ' ') do begin\ndelete(s, 1, 1);\nend;\nend;\nprocedure trimMoreThan1Space(var s: string);\nvar\ni : integer;\nbegin\nfor i:= length(s) downto 2 do begin\nif (s[i] = s[i-1]) and (s[i] = ' ') then\ndelete(s, i, 1);\nend;\nend;\nvar\ns : string;\nbegin\nreadln(s);\ntrimSpaceRight(s);\ntrimSpaceLeft(s);\ntrimMoreThan1Space(s);\nwriteln('Trim string = \"',s, '\"');\nend.\n</code></pre> <ul> <li>String to number: Extract number value from string</li> </ul> <pre><code>// Built-in function\nvar\ns : string;\ncurrent : string;\ni, v, code: integer;\nbegin\nreadln(s);\ncurrent := '';\nfor i := 1 to length(s) do begin\nif s[i] &lt;&gt; ' ' then\ncurrent := current + s[i]\nelse begin\nval(current, v, code);\nif code &gt; 0 then\nwriteln('Error parse at ', code, ' th character, c =\"', current[code] ,'\", value = \"', current, '\"')\nelse\nwriteln('Found: ', v);\ncurrent := '';\nend;\nend;\nend.\n</code></pre> <p>By combining multiple technique, we can handle User input and turn them to numeric value that can be used for calculation.</p> <pre><code>// Check on String handling. trim.pas\nprocedure trimSpaceRight(var s: string);\nbegin\nwhile (length(s) &gt; 0) and (s[length(s)] = ' ') do begin\ndelete(s, length(s), 1);\nend;\nend;\nprocedure trimSpaceLeft(var s: string);\nbegin\nwhile (length(s) &gt; 0) and (s[1] = ' ') do begin\ndelete(s, 1, 1);\nend;\nend;\nprocedure trimMoreThan1Space(var s: string);\nvar\ni : integer;\nbegin\nfor i:= length(s) downto 2 do begin\nif (s[i] = s[i-1]) and (s[i] = ' ') then\ndelete(s, i, 1);\nend;\nend;\n// Self-code\nfunction parse(s: string; var isParse: boolean) : integer;\nvar\ni, v: integer;\nbegin\nv := 0;\nisparse := true;\nfor i:= 1 to length(s) do begin\nif (ord('0') &lt;= ord(s[i])) and (ord(s[i]) &lt;= ord('9')) then\nv := v * 10  + ord(s[i]) - ord('0')\nelse begin\nisparse := false;\nbreak;\nend;\nend;\nif not isparse then\nwriteln('Error parse at ', i, ' th character, c =\"', s[i] ,'\", value = \"', s, '\"')\nelse writeln('Found: ', v);\nparse := v;\nend;\n// Check on String handleing to_number.pas\nvar\ns : string;\ncurrent : string;\ni: integer;\nisparse: boolean;\nbegin\nreadln(s);\ntrimSpaceRight(s);\ntrimSpaceLeft(s);\ntrimMoreThan1Space(s);\ncurrent := '';\nfor i := 1 to length(s) do begin\nif s[i] &lt;&gt; ' ' then\ncurrent := current + s[i]\nelse begin\nparse(current, isparse);\ncurrent := '';\nend;\nend;\nend.\n</code></pre> <p>We can also go down the road of implement string Big number, for persistence calculation. Or parse to float number.</p>", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#stack-data-structure", "title": "Stack data structure", "text": "", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#linked-stack", "title": "Linked stack", "text": "<p>Postfix mathematic expression calculation is heavily rely on stack for storing calculation product data.  We implement basic operation of stack:</p> <ul> <li>Push (Last in)</li> <li>Pop (First out)</li> <li>Top (get the value of top of stack)</li> <li>Stack traversal: Check the stack data</li> </ul> <pre><code>type\nstacktype = record\ntop: ^node;\nlength: integer;\nend;\nnode = record\nvalue : integer;\nnext : ^node;\nend;\nprocedure push(var s: stacktype; v : integer);\nvar\ntemp : ^node;\nbegin\nif s.top = nil then begin\nnew(s.top);\ns.top^.value := v;\ns.top^.next := nil;\nend\nelse begin\nnew(temp);\ntemp^.value := v;\ntemp^.next := s.top;\ns.top := temp;\nend;\ns.length := s.length + 1;\nend;\nfunction pop(var s: stacktype) : integer;\nvar\ntemp : ^node;\nbegin\npop := s.top^.value;\ntemp := s.top;\ns.top := s.top^.next;\ns.length := s.length - 1;\ndispose(temp);\nend;\nprocedure stackTraversal(stack: stacktype);\nvar\ntemp : ^node;\nbegin\nwriteln('Stack length: ', stack.length, ' element');\ntemp := stack.top;\nwrite('Stack state: ');\nwhile temp &lt;&gt; nil do begin\nwrite(temp^.value, ', ');\ntemp := temp^.next;\nend;\nwriteln('nil');\nend;\nfunction top(stack: stacktype) : integer;\nbegin\ntop := stack.top^.value;\nend;\nvar\ns : stacktype;\nbegin\ns.top := nil;\ns.length := 0;\npush(s, 1);\nwriteln(top(s));\npush(s, 2);\nwriteln(top(s));\nstackTraversal(s);\nwhile s.top &lt;&gt; nil do begin\npop(s);\nend;\nend.\n</code></pre> <p>Combining with User input handling, we can add number value from user input to push directly into the stack:</p> <pre><code>type\nstacktype = record\ntop: ^node;\nlength: integer;\nend;\nnode = record\nvalue : integer;\nnext : ^node;\nend;\nprocedure push(var s: stacktype; v : integer);\nvar\ntemp : ^node;\nbegin\nif s.top = nil then begin\nnew(s.top);\ns.top^.value := v;\ns.top^.next := nil;\nend\nelse begin\nnew(temp);\ntemp^.value := v;\ntemp^.next := s.top;\ns.top := temp;\nend;\ns.length := s.length + 1;\nend;\nfunction pop(var s: stacktype) : integer;\nvar\ntemp : ^node;\nbegin\npop := s.top^.value;\ntemp := s.top;\ns.top := s.top^.next;\ns.length := s.length - 1;\ndispose(temp);\nend;\nprocedure stackTraversal(stack: stacktype);\nvar\ntemp : ^node;\nbegin\nwriteln('Stack length: ', stack.length, ' element');\ntemp := stack.top;\nwrite('Stack state: ');\nwhile temp &lt;&gt; nil do begin\nwrite(temp^.value, ', ');\ntemp := temp^.next;\nend;\nwriteln('nil');\nend;\nfunction top(stack: stacktype) : integer;\nbegin\ntop := stack.top^.value;\nend;\n// Check on String handling. trim.pas\nprocedure trimSpaceRight(var s: string);\nbegin\nwhile (length(s) &gt; 0) and (s[length(s)] = ' ') do begin\ndelete(s, length(s), 1);\nend;\nend;\nprocedure trimSpaceLeft(var s: string);\nbegin\nwhile (length(s) &gt; 0) and (s[1] = ' ') do begin\ndelete(s, 1, 1);\nend;\nend;\nprocedure trimMoreThan1Space(var s: string);\nvar\ni : integer;\nbegin\nfor i:= length(s) downto 2 do begin\nif (s[i] = s[i-1]) and (s[i] = ' ') then\ndelete(s, i, 1);\nend;\nend;\n// Check on string handleing to_number.pas\nfunction parse_integer(var s: string; var isParse: boolean) : integer;\nvar\nv, code: integer;\nbegin\nval(s, v, code);\nif code &gt; 0 then begin\nwriteln('Error parse at ', code, ' th character, c =\"', s[code] ,'\", value = \"', s, '\"');\nisParse := false;\nend\nelse begin\nwriteln('Found: ', v);\nisParse := true;\nend;\nparse_integer := v;\nend;\nprocedure to_integer(var stack : stacktype);\nvar\ns : string;\ncurrent : string;\ni, value: integer;\nisparse: boolean;\nbegin\nisparse := FALSE; // Stop compiler warning\nreadln(s);\ntrimSpaceRight(s);\ntrimSpaceLeft(s);\ntrimMoreThan1Space(s);\ncurrent := '';\nfor i := 1 to length(s) do begin\nif s[i] &lt;&gt; ' ' then\ncurrent := current + s[i]\nelse begin\nvalue := parse_integer(current, isparse);\nif isparse then\npush(stack, value);\ncurrent := '';\nend;\nend;\nend;\nvar\ns : stacktype;\nbegin\ns.top := nil;\ns.length := 0;\npush(s, 1);\nwriteln(top(s));\npush(s, 2);\nwriteln(top(s));\nstackTraversal(s);\nwhile s.top &lt;&gt; nil do begin\npop(s);\nend;\n// input to stack\ns.top := nil;\ns.length := 0;\nto_integer(s);\nstackTraversal(s);\nwhile s.top &lt;&gt; nil do begin\nwriteln('Pop: ', pop(s));\nend;\nif s.top &lt;&gt; nil then dispose(s.top);\nend.\n</code></pre>", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#array-stack", "title": "Array stack", "text": "<p>Stack can also be implementation using array, which have fixed size. Because of that, there is a maximum element that stack can have. </p> <p>This is quite easy to implement than linked list.</p> <pre><code>type\nstringStack = record\nvalue: array [1..100] of char;\nlength: integer;\nend;\nprocedure stringpush(var stack: stringStack; value : char);\nbegin\nstack.length := stack.length + 1;\nstack.value[stack.length] := value;\nend;\nfunction stringpop(var stack: stringStack) : char;\nbegin\nstringpop := stack.value[stack.length];\nstack.length := stack.length - 1;\nend;\nfunction stringtop(var stack: stringStack) : char;\nbegin\nstringtop := stack.value[stack.length];\nend;\n...\n</code></pre>", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#calculation-implementation", "title": "Calculation implementation", "text": "", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#postfix-expression-calculation", "title": "Postfix expression calculation", "text": "<p>Calling back from definition</p> <p></p> <p>We can do all of the calculation on the stack</p> <ul> <li>A number found, we add it to stack</li> <li>A operation found, we take two element at the top of stack, do calculation, then push result back to stack</li> </ul> <p>By combine this with string comparison, input handling, stack implementation.</p> <pre><code>type\nstacktype = record\ntop: ^node;\nlength: integer;\nend;\nnode = record\nvalue : integer;\nnext : ^node;\nend;\nconst\noperation = ['+', '-', '*', '/'];\nprocedure push(var s: stacktype; v : integer);\nvar\ntemp : ^node;\nbegin\nif s.top = nil then begin\nnew(s.top);\ns.top^.value := v;\ns.top^.next := nil;\nend\nelse begin\nnew(temp);\ntemp^.value := v;\ntemp^.next := s.top;\ns.top := temp;\nend;\ns.length := s.length + 1;\nend;\nfunction pop(var s: stacktype) : integer;\nvar\ntemp : ^node;\nbegin\npop := s.top^.value;\ntemp := s.top;\ns.top := s.top^.next;\ns.length := s.length - 1;\ndispose(temp);\nend;\nprocedure trimSpaceRight(var s: string);\nbegin\nwhile (length(s) &gt; 0) and (s[length(s)] = ' ') do begin\ndelete(s, length(s), 1);\nend;\nend;\nprocedure trimSpaceLeft(var s: string);\nbegin\nwhile (length(s) &gt; 0) and (s[1] = ' ') do begin\ndelete(s, 1, 1);\nend;\nend;\nprocedure trimMoreThan1Space(var s: string);\nvar\ni : integer;\nbegin\nfor i:= length(s) downto 2 do begin\nif (s[i] = s[i-1]) and (s[i] = ' ') then\ndelete(s, i, 1);\nend;\nend;\n// Check on string handleing to_number.pas\nfunction parse_integer(var s: string; var isParse: boolean) : integer;\nvar\nv, code: integer;\nbegin\nval(s, v, code);\nif code &gt; 0 then begin\nwriteln('Error parse at ', code, ' th character, c =\"', s[code] ,'\", value = \"', s, '\"');\nisParse := false;\nend\nelse begin\nwriteln('Found: ', v);\nisParse := true;\nend;\nparse_integer := v;\nend;\nprocedure processingCurrentString(current : string; var stack: stacktype);\nvar\nx, y, value: integer;\nisparse : boolean;\nbegin\nwriteln('Processing current = ', current);\n// try parse to integer\nif (current[1] in operation) then begin\nif stack.length &lt; 2 then begin\nwriteln('Formula error, not enough element for calculation');\nend;\ny := pop(stack);\nx := pop(stack);\nwriteln('Found valid operation, do: ', x, ' ', current, ' ', y);\nif current[1] = '+' then push(stack, x + y);\nif current[1] = '-' then push(stack, x - y);\nif current[1] = '*' then push(stack, x * y);\nif current[1] = '/' then push(stack, x div y);\nend\nelse begin\nisparse := false;\nvalue := parse_integer(current, isparse);\nif isparse then\npush(stack, value)\nelse\nwriteln('Cant parse to integer, skipping');\nend;\nend;\nvar\nstack : stacktype;\ns : string;\ncurrent : string;\ni : integer;\nbegin\nreadln(s);\ntrimSpaceRight(s);\ntrimSpaceLeft(s);\nfor i:= length(s) downto 2 do begin\nif (s[i] in operation) and (s[i-1] in operation) then begin\ninsert(' ', s, i);\nend;\nend;\ntrimMoreThan1Space(s);\nwriteln(s);\nstack.top := nil;\nstack.length := 0;\ncurrent := '';\nfor i := 1 to length(s) do begin\nif s[i] &lt;&gt; ' ' then\ncurrent := current + s[i]\nelse begin\nprocessingCurrentString(current, stack);\ncurrent := '';\nend;\nend;\nif current &lt;&gt; '' then\nprocessingCurrentString(current, stack);\nwhile stack.top &lt;&gt; nil do begin\nwriteln('Pop: ', pop(stack));\nend;\nend.\n</code></pre> <p>Input: <pre><code>1 2 + 3 4 -*\n</code></pre></p> <p>Output: <pre><code>1 2 + 3 4 - *\nProcessing current = 1\nFound: 1\nProcessing current = 2\nFound: 2\nProcessing current = +\nFound valid operation, do: 1 + 2 \nProcessing current = 3\nFound: 3\nProcessing current = 4\nFound: 4\nProcessing current = -\nFound valid operation, do: 3 - 4 \nProcessing current = *\nFound valid operation, do: 3 * -1\nPop: -3\n</code></pre></p>", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#infix-to-postfix", "title": "Infix to Postfix", "text": "<p>A processing data middle step, as our input are in Infix format.</p> <p>This can be done using a stack to hold operation and bracket:</p> <ul> <li><code>)</code>:  This have the most priority, we want to translating infix expression between two bracket  to postfix first, which mean to close this bracket till we pop out a <code>(</code> bracket.</li> <li><code>*</code>, <code>/</code>: This have high priority, we want to only translating all of <code>*</code> and <code>/</code> operation in the stack before adding another of this to stack.</li> <li><code>+</code>, <code>-</code>: This have low priority, we want to translating all of <code>*</code>,  <code>/</code>, <code>+</code> and <code>-</code> operation (till we found a open bracket <code>(</code> or stack is empty) in the stack before adding another of this to stack.</li> <li><code>(</code>: We just add it to stack, and wait for <code>)</code> to pop it back.</li> </ul> <pre><code>type\nstacktype = record\ntop: ^node;\nlength: integer;\nend;\nnode = record\nvalue : string;\nnext : ^node;\nend;\nconst\noperation = ['+', '-', '*', '/', '(', ')'];\nprocedure push(var s: stacktype; v : string);\nvar\ntemp : ^node;\nbegin\nif s.top = nil then begin\nnew(s.top);\ns.top^.value := v;\ns.top^.next := nil;\nend\nelse begin\nnew(temp);\ntemp^.value := v;\ntemp^.next := s.top;\ns.top := temp;\nend;\ns.length := s.length + 1;\nend;\nfunction pop(var s: stacktype) : string;\nvar\ntemp : ^node;\nbegin\npop := s.top^.value;\ntemp := s.top;\ns.top := s.top^.next;\ns.length := s.length - 1;\ndispose(temp);\nend;\nprocedure stackTraversal(stack: stacktype);\nvar\ntemp : ^node;\nbegin\nwriteln('Stack length: ', stack.length, ' element');\ntemp := stack.top;\nwrite('Stack state: ');\nwhile temp &lt;&gt; nil do begin\nwrite(temp^.value, ', ');\ntemp := temp^.next;\nend;\nwriteln('nil');\nend;\nfunction top(stack: stacktype) : string;\nbegin\ntop := stack.top^.value;\nend;\n// Check on String handling. trim.pas\nprocedure trimSpaceRight(var s: string);\nbegin\nwhile (length(s) &gt; 0) and (s[length(s)] = ' ') do begin\ndelete(s, length(s), 1);\nend;\nend;\nprocedure trimSpaceLeft(var s: string);\nbegin\nwhile (length(s) &gt; 0) and (s[1] = ' ') do begin\ndelete(s, 1, 1);\nend;\nend;\nprocedure trimMoreThan1Space(var s: string);\nvar\ni : integer;\nbegin\nfor i:= length(s) downto 2 do begin\nif (s[i] = s[i-1]) and (s[i] = ' ') then\ndelete(s, i, 1);\nend;\nend;\n// Check on string handleing to_number.pas\nfunction parse(var s: string; var isParse: boolean) : integer;\nvar\nv, code: integer;\nbegin\nval(s, v, code);\nif code &gt; 0 then begin\nwriteln('Error parse at ', code, ' th character, c =\"', s[code] ,'\", value = \"', s, '\"');\nisParse := false;\nend\nelse begin\nwriteln('Found: ', v);\nisParse := true;\nend;\nparse := v;\nend;\nfunction priority(current: string) : integer;\nbegin\nif (current = '*') or (current = '/') then priority := 2;\nif (current = '+') or (current = '-') then priority := 1;\nif (current = '(') then priority := 0;\nend;\nprocedure processingCurrentString(current : string; var stack: stacktype; var postfix : string);\nvar\nisparse : boolean;\ntemp : string;\nbegin\nwriteln;\nstackTraversal(stack);\nwriteln('Current postfix = ', postfix);\nisparse := false;\nwriteln('Processing current = ', current);\nif (current[1] in operation) then begin\nif current = '(' then push(stack, current);\nif current = ')' then begin\ntemp := pop(stack);\nwhile temp &lt;&gt; '(' do begin\npostfix := postfix + temp + ' ';\ntemp := pop(stack);\nend;\nend;\nif current[1] in ['+', '-', '*', '/'] then begin\nwhile stack.length &gt; 0 do begin if priority(current) &gt; priority(top(stack)) then break;\npostfix := postfix + pop(stack) + ' ';\nend;\npush(stack, current);\nend;\nend\nelse begin\nparse(current, isparse);\nif isparse then begin\npostfix := postfix + current + ' ';\nend\nelse begin\nwriteln('Found unknown value \"', current,'\" skipping');\nend;\nend;\nend;\nvar\ns : string;\ncurrent : string;\ni : integer;\npostfix : string;\nstack : stacktype;\nbegin\nreadln(s);\ntrimSpaceRight(s);\ntrimSpaceLeft(s);\n// adding space between operation and number\nfor i:= length(s) downto 2 do begin\nwriteln(s[i]);\nif (s[i] &lt;&gt; ' ') and ((s[i] in operation) or (s[i-1] in operation)) then begin\ninsert(' ', s, i);\nend;\nend;\ntrimMoreThan1Space(s);\nwriteln(s);\nstack.top := nil;\nstack.length := 0;\ncurrent := '';\npostfix := '';\nfor i := 1 to length(s) do begin\nif s[i] &lt;&gt; ' ' then\ncurrent := current + s[i]\nelse begin\nprocessingCurrentString(current, stack, postfix);\ncurrent := '';\nend;\nend;\nif current &lt;&gt; '' then\nprocessingCurrentString(current, stack, postfix);\nwhile stack.top &lt;&gt; nil do begin\npostfix := postfix + pop(stack) + ' ';\nend;\nwriteln(postfix);\nend.\n</code></pre>", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Mathematic%20expression%20calculation/#infix-expression-calculation", "title": "Infix expression calculation", "text": "<p>We have two stack type:</p> <ul> <li>One for Infix to postfix coinventing, to handle and hold <code>string</code> value (operation + bracket)</li> <li>Second for postfix calculation stack, holding integer value.</li> </ul> <p>This mean two type implementation, with their own implement of push, pop, top. We combine Infix to Postfix convention and Postfix expression calculation for final implement</p> <pre><code>type\nintegerStack = record\ntop: ^node;\nlength: integer;\nend;\nnode = record\nvalue : integer;\nnext : ^node;\nend;\nstringStack = record\nvalue: array [1..100] of char;\nlength: integer;\nend;\nconst\noperation = ['+', '-', '*', '/', '(', ')'];\nprocedure push(var s: integerStack; v : integer);\nvar\ntemp : ^node;\nbegin\nif s.top = nil then begin\nnew(s.top);\ns.top^.value := v;\ns.top^.next := nil;\nend\nelse begin\nnew(temp);\ntemp^.value := v;\ntemp^.next := s.top;\ns.top := temp;\nend;\ns.length := s.length + 1;\nend;\nfunction pop(var s: integerStack) : integer;\nvar\ntemp : ^node;\nbegin\npop := s.top^.value;\ntemp := s.top;\ns.top := s.top^.next;\ns.length := s.length - 1;\ndispose(temp);\nend;\nprocedure stringpush(var stack: stringStack; value : char);\nbegin\nstack.length := stack.length + 1;\nstack.value[stack.length] := value;\nend;\nfunction stringpop(var stack: stringStack) : char;\nbegin\nstringpop := stack.value[stack.length];\nstack.length := stack.length - 1;\nend;\nfunction stringtop(var stack: stringStack) : char;\nbegin\nstringtop := stack.value[stack.length];\nend;\n// Check on String handling. trim.pas\nprocedure trimSpaceRight(var s: string);\nbegin\nwhile (length(s) &gt; 0) and (s[length(s)] = ' ') do begin\ndelete(s, length(s), 1);\nend;\nend;\nprocedure trimSpaceLeft(var s: string);\nbegin\nwhile (length(s) &gt; 0) and (s[1] = ' ') do begin\ndelete(s, 1, 1);\nend;\nend;\nprocedure trimMoreThan1Space(var s: string);\nvar\ni : integer;\nbegin\nfor i:= length(s) downto 2 do begin\nif (s[i] = s[i-1]) and (s[i] = ' ') then\ndelete(s, i, 1);\nend;\nend;\n// Check on string handleing to_number.pas\nfunction parse(s: string; var isParse: boolean) : integer;\nvar\nv, code: integer;\nbegin\nval(s, v, code);\nif code &gt; 0 then begin\nwriteln('Error parse at ', code, ' th character, c =\"', s[code] ,'\", value = \"', s, '\"');\nisParse := false;\nend\nelse begin\nwriteln('Found: ', v);\nisParse := true;\nend;\nparse := v;\nend;\nfunction priority(current: string) : integer;\nbegin\nif (current = '*') or (current = '/') then priority := 2;\nif (current = '+') or (current = '-') then priority := 1;\nif (current = '(') then priority := 0;\nend;\nprocedure processingInfixString(current : string; var stack: stringStack; var postfix : string);\nvar\nisparse : boolean;\ntemp : string;\nbegin\nwriteln('Current postfix = ', postfix);\nisparse := false;\nwriteln('Processing current = ', current);\nif (current[1] in operation) then begin\nif current = '(' then stringpush(stack, current[1]);\nif current = ')' then begin\ntemp := stringpop(stack);\nwhile temp &lt;&gt; '(' do begin\npostfix := postfix + temp + ' ';\ntemp := stringpop(stack);\nend;\nend;\nif current[1] in ['+', '-', '*', '/'] then begin\nwhile stack.length &gt; 0 do begin if priority(current) &gt; priority(stringtop(stack)) then break;\npostfix := postfix + stringpop(stack) + ' ';\nend;\nstringpush(stack, current[1]);\nend;\nend\nelse begin\nparse(current, isparse);\nif isparse then begin\npostfix := postfix + current + ' ';\nend\nelse begin\nwriteln('Found unknown value \"', current,'\" skipping');\nend;\nend;\nend;\nfunction toPostfix(s : string): string;\nvar\ncurrent : string;\ni : integer;\npostfix : string;\nstack : stringStack;\nbegin\nstack.length := 0;\ncurrent := '';\npostfix := '';\nfor i := 1 to length(s) do begin\nif s[i] &lt;&gt; ' ' then\ncurrent := current + s[i]\nelse begin\nprocessingInfixString(current, stack, postfix);\ncurrent := '';\nend;\nend;\nif current &lt;&gt; '' then\nprocessingInfixString(current, stack, postfix);\nwhile stack.length &gt; 0 do begin\npostfix := postfix + stringpop(stack) + ' ';\nend;\ntoPostfix := postfix;\nend;\nprocedure processingPostfixString(current : string; var stack: integerStack);\nvar\nx, y, value: integer;\nisparse : boolean;\nbegin\nwriteln('Processing current = ', current);\nisparse := false;\n// try parse to integer\nif (current[1] in operation) then begin\nif stack.length &lt; 2 then begin\nwriteln('Formula error, not enough element for calculation');\nend;\ny := pop(stack);\nx := pop(stack);\nwriteln('Found valid operation, do: ', x, ' ', current, ' ', y);\nif current[1] = '+' then push(stack, x + y);\nif current[1] = '-' then push(stack, x - y);\nif current[1] = '*' then push(stack, x * y);\nif current[1] = '/' then push(stack, x div y);\nend\nelse begin\nvalue := parse(current, isparse);\nif isparse then\npush(stack, value)\nelse\nwriteln('Cant parse to integer, skipping');\nend;\nend;\nvar\ns : string;\ncurrent : string;\ni : integer;\nstack: integerStack;\nbegin\nreadln(s);\ntrimSpaceRight(s);\ntrimSpaceLeft(s);\n// adding space between operation and number\nfor i:= length(s) downto 2 do begin\nwriteln(s[i]);\nif (s[i] &lt;&gt; ' ') and ((s[i] in operation) or (s[i-1] in operation)) then begin\ninsert(' ', s, i);\nend;\nend;\ntrimMoreThan1Space(s);\ns := toPostfix(s);\ncurrent := '';\nstack.top := nil;\nstack.length := 0;\nfor i := 1 to length(s) do begin\nif s[i] &lt;&gt; ' ' then\ncurrent := current + s[i]\nelse begin\nprocessingPostfixString(current, stack);\ncurrent := '';\nend;\nend;\nif current &lt;&gt; '' then\nprocessingPostfixString(current, stack);\nwhile stack.top &lt;&gt; nil do begin\nwriteln(pop(stack));\nend;\nend.\n</code></pre>", "tags": ["computer_sience", "coding_chalenge", "pascal"]}, {"location": "Basic/Quick%20sort/", "title": "Quick sort", "text": "", "tags": ["computer_sience", "pascal", "c", "O(n log n)"]}, {"location": "Basic/Quick%20sort/#problem", "title": "Problem", "text": "<p>Given a array <code>arr</code>, sort the array (in memory)</p> <pre><code>arr = [124, 1241, 412, 4, 54 ,5, 34 , 12, 4, 12, 321,3 ,33]\n</code></pre>", "tags": ["computer_sience", "pascal", "c", "O(n log n)"]}, {"location": "Basic/Quick%20sort/#solve", "title": "Solve", "text": "<p>Pretty much my all in choice when sorting (on every contest).</p>", "tags": ["computer_sience", "pascal", "c", "O(n log n)"]}, {"location": "Basic/Quick%20sort/#quick-sort", "title": "Quick sort", "text": "<p><code>O(n log n)</code></p> <p>I some how always done this wrong, the errors I usually get are:</p> <ul> <li>Either in swap function (not pass by referent)</li> <li>Forget to setup target (using <code>a[m]</code> directly)</li> <li>For get that <code>j</code> pointer go backward (<code>j := j + 1</code> in either while loop or inner if)</li> <li>Quick sort recursive call on wrong parameter (like calling recursion <code>a[left .. i]</code>, <code>a[j .. right]</code>, <code>a[i .. j]</code>) </li> </ul>", "tags": ["computer_sience", "pascal", "c", "O(n log n)"]}, {"location": "Basic/Quick%20sort/#implementation", "title": "Implementation", "text": "<p><code>pascal</code></p> <pre><code>type\nint8array = array [1..1000] of integer;\nprocedure swap(var x : integer; var y : integer);\nvar\ntemp : integer;\nbegin\ntemp := x;\nx := y;\ny := temp;\nend;\nprocedure quicksort(var a: int8array; l:integer; r: integer);\nvar\nm, i, j : integer;\ntarget : integer;\nbegin\nif l &gt; r then  exit;\nm := (l + r) div 2;\ntarget := a[m];\ni := l;\nj := r;\nrepeat\nwhile a[i] &lt; target do i := i + 1;\nwhile a[j] &gt; target do j := j - 1;\nif i &lt;= j then begin\nswap(a[i], a[j]);\ni := i + 1;\nj := j - 1;\nend;\nuntil i &gt; j;\nquicksort(a, l, j);\nquicksort(a, i, r);\nend;\nprocedure printArray(var a: int8array; len: integer);\nvar\ni : integer;\nbegin\nfor i := 1 to len do begin\nwrite(a[i]);\nwrite(', ');\nend;\nwriteln;\nend;\nvar\na : int8array;\ni, len : integer;\nbegin\nlen := 1000;\nfor i := 1 to len do a[i] := random(10000);\nquicksort(a, 1, len);\nprintArray(a, len);\nend.\n</code></pre> <p><code>c</code> <pre><code>#include &lt;time.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\nvoid quicksort(int* a, int l, int r) {\nint i = l;\nint j = r;\nif (l &gt; r) return;\nint target = a[(l + r) / 2];\nwhile (i &lt;= j) {\nwhile (a[i] &lt; target) i ++;\nwhile (a[j] &gt; target) j --;\nif (i &lt;= j) {\nint temp = a[i];\na[i] = a[j];\na[j] = temp;\ni ++;\nj --;\n}\n}\nquicksort(a, l, j);\nquicksort(a, i, r);\n}\nvoid printArray(int* a, int length) {\nfor (int i = 0; i &lt; length; i ++) {\nprintf(\"%d, \", a[i]);\n}\nprintf(\"\\n\");\n}\nint main() {\nint len = 1000; int a[1000];\nsrand(time(NULL)); for (int i = 0; i &lt; len; i ++) {\na[i] = rand(); }\nquicksort(a, 0, len-1);\nprintArray(a, len);\n}\n</code></pre></p>", "tags": ["computer_sience", "pascal", "c", "O(n log n)"]}, {"location": "Basic/Two%20Crystal%20Ball/", "title": "Two Crystal Ball", "text": "", "tags": ["computer_sience", "python", "typescript", "c", "O(sqrt n)"]}, {"location": "Basic/Two%20Crystal%20Ball/#problem", "title": "Problem", "text": "<p>Given a tower that have <code>n</code> floor height Given you two Crystal ball that break if being drop from <code>b</code> floor and above Find <code>b</code></p> <p>You only have two Crystal ball, so if you drop and breaking both, you can\u2019t no longer testing it again </p> <pre><code>n = 200 \nb = 100\n</code></pre> <p>You are provided with <code>checkBreak(x)</code> function, that can\u2019t no longer be call after two <code>True</code> return</p> <pre><code>class Problem():\ndef __init__(self, n, b):\nself.n = n\nself.b = b\nself.count = 2\nself.check = 1\ndef checkBreak(x):\nif x &gt;= self.b:\nassert self.count &gt; 0 \nself.count -= 1\nreturn x &gt;= self.b \ndef checkResult(x):\nassert x == self.b\nreturn x == self.b\n</code></pre>", "tags": ["computer_sience", "python", "typescript", "c", "O(sqrt n)"]}, {"location": "Basic/Two%20Crystal%20Ball/#solve", "title": "Solve", "text": "", "tags": ["computer_sience", "python", "typescript", "c", "O(sqrt n)"]}, {"location": "Basic/Two%20Crystal%20Ball/#jumping-in-sqrt", "title": "Jumping in sqrt()", "text": "<p><code>O(sqrt n)</code></p> <p>By the define of the problem:</p> <ul> <li>If we used up one ball (one call that <code>checkBreak(x)</code> return true), the next one we have to do a linear search so that we can find the exact <code>b</code> value.</li> <li>This mean, we have to find the balancing of how much time:<ul> <li><code>Ball 2</code>: We spending on linear search to find the exact <code>b</code> value</li> <li><code>Ball 1</code>: We spending quickly jump between each floor, so we can reducing total time spending on <code>Ball 2</code></li> </ul> </li> </ul> <p>This happen that we using sqrt(n) for jump step of <code>Ball 1</code> drop. </p> <ul> <li>Because <code>n / sqrt(n) == sqrt(n)</code>, this mean we spending <code>sqrt(n)</code> time drop <code>Ball 1</code> as the worst case.</li> <li>After <code>Ball 1</code> break, we back to last know value that Ball 1 not break and start linear search from there, this mean we only need to spend on another <code>sqrt(n)</code> range of linear search time drop <code>Ball 2</code> as the worst case.</li> </ul> <p>Making this, a rare <code>O(sqrt n)</code> time complexity solvable problem</p> <pre><code>import math\nclass Problem():\ndef __init__(self, n, b):\nself.n = n\nself.b = b\nself.count = 2\nself.check = 1\ndef checkBreak(self, x):\nif x &gt;= self.b:\nassert self.count &gt; 0\nself.count -= 1\nreturn x &gt;= self.b\ndef checkResult(self, x):\nassert x == self.b\nreturn x == self.b\ndef solve(n, cb, cr):\nstep = math.trunc(math.sqrt(n))\ncurr = 0\nfor i in range(0, n, step):\nif cb(i):\nbreak\ncurr = i\nfor i in range(curr, n):\nif cb(i):\nif not cr(i):\nbreak\nreturn i\nreturn -1\ndef test():\ntest = [(55, 14), (422, 12), (441, 255), (245, 112), (12421441, 244124)]\nfor n, b in test:\nproblem = Problem(n, b)\ncb = problem.checkBreak\ncr = problem.checkResult\nres = solve(n, cb, cr)\nassert cr(res)\nprint(\"Done\")\nif __name__ == \"__main__\":\ntest()\n</code></pre>", "tags": ["computer_sience", "python", "typescript", "c", "O(sqrt n)"]}, {"location": "Basic/Two%20Crystal%20Ball/#typescript-implement", "title": "Typescript implement", "text": "<p><code>O(sqrt n)</code></p> <p>This instead take a different way of input (and testing using jest)</p> <pre><code>import two_crystal_balls from \"@code/TwoCrystalBalls\";\ntest(\"two crystal balls\", function () {\nlet idx = Math.floor(Math.random() * 10000);\nconst data = new Array(10000).fill(false);\nfor (let i = idx; i &lt; 10000; ++i) {\ndata[i] = true;\n}\nexpect(two_crystal_balls(data)).toEqual(idx);\nexpect(two_crystal_balls(new Array(821).fill(false))).toEqual(-1);\n});\n</code></pre> <p>We doing the same thing here:</p> <pre><code>export default function two_crystal_balls(breaks: boolean[]): number {\nlet step = Math.floor(Math.sqrt(breaks.length));\nlet res = -1;\nlet curr = 0;\nfor (let i = 0; i &lt; breaks.length; i += step) {\nif (breaks[i]) break;\ncurr = i;\n}\nfor (let i = curr; i &lt; breaks.length; i++) {\nif (breaks[i]) {\nres = i;\nbreak;\n}\n}\nreturn res;\n}\n</code></pre>", "tags": ["computer_sience", "python", "typescript", "c", "O(sqrt n)"]}, {"location": "Basic/Two%20Crystal%20Ball/#c-implementation", "title": "C implementation", "text": "<p><code>O(sqrt n)</code></p> <p>I do try using <code>math.h</code>,  but it seem my library can\u2019t even link, so I instead use a implementation for integer sqrt (Newton\u2019s method, Wikipedia version). </p> <p>Here I use same input as the python version, where we are passed with check break <code>cb</code> function (that only return <code>True</code> two time and return <code>-1</code>  to mimic the dropping) and number <code>n</code> for building height.</p> <pre><code>#include &lt;stdio.h&gt;\nint b = 0;\nint n = 0;\nint count = 2;\n// We return 0 if False, 1 if True, -1 which mean out of ball\n// As boolean in C is just 0 for False and 1 for True\nint checkBreak(int x){\nif (count == 0)\nreturn -1;\ncount = count - (x &gt;= b);\nreturn x &gt;= b;\n}\n// Square root of integer\nunsigned int intSqrt(unsigned int s)\n{\n// Zero yields zero\n// One yields one\nif (s &lt;= 1) return s;\n// Initial estimate (must be too high)\nunsigned int x0 = s / 2;\n// Update\nunsigned int x1 = (x0 + s / x0) / 2;\nwhile (x1 &lt; x0) // Bound check\n{\nx0 = x1;\nx1 = (x0 + s / x0) / 2;\n}       return x0;\n}\nint solve(int n, int (* cb)(int) ) {\nint step = intSqrt(n);\nint i = 0;\nfor (i = 0; i &lt; n; i += step) {\nif (cb(i)) break;\n}\nfor (i = i - step; i &lt; n; i ++) {\nif (cb(i)) break;\n}\nreturn i;\n}\nint main() {\nint input_n[] = {53,163,1616,7747};\nint input_b[] = {12,13,1416,247};\nfor (int i = 0; i &lt; 4; i++) {\ncount = 2;\nn = input_n[i];\nb = input_b[i];\nif (b == solve(n, checkBreak)) {\nprintf(\"Test %d pass!\\n\", i);\n}\nelse {\ncount = 2;\nprintf(\"What, %d != %d\\n\", b, solve(n, checkBreak));\n}\n}\nreturn 0;\n}\n</code></pre>", "tags": ["computer_sience", "python", "typescript", "c", "O(sqrt n)"]}, {"location": "Networks/Lap01/LAP%201%20-%20Routing/", "title": "LAP 1   Routing", "text": "", "tags": ["network"]}, {"location": "Networks/Lap01/LAP%201%20-%20Routing/#problem", "title": "Problem", "text": "<p>Consider we having this network NETWORK LAP 1 - VPN route, route the Admin to access the Private LAN (the Router can\u2019t not access and change route table)</p> <p>The 192.168.1.254 gateway have 2 network card to make route traffic between 192.168.1.0/24 and 192.168.2.0/24</p> <p>Jump server also have two network card too. But all other Private Lan 2 client only have 192.168.1.254 as default gateway</p> <p></p>", "tags": ["network"]}, {"location": "Networks/Lap01/LAP%201%20-%20Routing/#solve", "title": "Solve", "text": "<p>To get to the Answer </p> <p>We mush make sure we have the packet can be route forward and backward. In this problem, we have 2 new hop gateway (with 3 manual route) that need manual config.</p>", "tags": ["network"]}, {"location": "Networks/Lap01/LAP%201%20-%20Routing/#pre-require", "title": "Pre require", "text": "<p>The network card in Jump server make the routing too complex thus being remove and use 192.168.1.254 as gateway to access the Private Lan 2 client instead. </p> <pre><code>sudo nwtui\n</code></pre> <p>Then process to deactivate and disable Lan 2 network interface on the Jump server </p>", "tags": ["network"]}, {"location": "Networks/Lap01/LAP%201%20-%20Routing/#hop-1", "title": "Hop 1:", "text": "", "tags": ["network"]}, {"location": "Networks/Lap01/LAP%201%20-%20Routing/#route-admin-pc-to-jump-server", "title": "Route Admin PC to Jump server", "text": "<p>This is needed so that Admin PC can understand and find 192.168.2.0/24 network</p> <p>This require we add to our gateway routing table (which is on VPN server)</p> <p></p> <pre><code>route 192.168.2.0/24 via 10.243.143.44\n</code></pre> <p>or</p> <pre><code>sudo route add -net 192.168.2.0/24 gw 10.243.143.44\n</code></pre> <p>Result route table on Admin PC after update should look like this</p> <pre><code>\u2192 route\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\ndefault         net.xxx         0.0.0.0         UG    600    0        0 tun0\n10.243.0.0      0.0.0.0         255.255.0.0     U     0      0        0 &lt;VPN_inf&gt;\nlink-local      0.0.0.0         255.255.0.0     U     1000   0        0 br-1da3c1d75167\n192.168.2.0     10.243.143.44   255.255.255.0   UG    0      0        0 &lt;VPN_inf&gt;\n</code></pre>", "tags": ["network"]}, {"location": "Networks/Lap01/LAP%201%20-%20Routing/#adding-forwarding-request-on-jump-server", "title": "Adding forwarding request on Jump server", "text": "<p>To route the packet back, Jump server have to have IPv4 forwarding capacity to allow traffic to flow through as local VPN client (.44) is also acting as a router for other devices (.43)</p> <pre><code>sudo sysctl -w net.ipv4.ip_forward=1\n</code></pre>", "tags": ["network"]}, {"location": "Networks/Lap01/LAP%201%20-%20Routing/#or-by-config-file", "title": "Or by config file", "text": "<pre><code>sudo nano /etc/sysctl.conf\n</code></pre> <p>Add or uncomment the following line:</p> <pre><code>net.ipv4.ip_forward=1\n</code></pre> <p>And then apply</p> <pre><code>sudo sysctl -p\n</code></pre>", "tags": ["network"]}, {"location": "Networks/Lap01/LAP%201%20-%20Routing/#hop-2-route-packet-between-jump-server-and-gateway", "title": "Hop 2: Route packet between Jump server and Gateway", "text": "", "tags": ["network"]}, {"location": "Networks/Lap01/LAP%201%20-%20Routing/#gateway-route-traffic-over-vpn-network", "title": "Gateway route traffic over VPN network", "text": "<p>On the gateway, we need to enable IP forwarding so that it can forward traffic from the 192.168.2.0/24 subnet to the VPN client:</p> <p>Via GUI</p> <p></p> <p>Check the Available Network Interfaces:</p> <p>To find out the name of the network interface you want to route traffic through, run the following command:</p> <pre><code>netsh interface show interface\n</code></pre> <p>Identify the name of the interface you want to use (e.g., <code>Lan1_network_interface</code>). And add route</p> <pre><code>route add 10.243.0.0 mask 255.255.255.0 192.168.1.98 IF Lan1_network_interface\n</code></pre> <p>You may want to use metric so our manual route have higher priority</p>", "tags": ["network"]}, {"location": "Networks/Lap01/LAP%201%20-%20Routing/#jump-route-traffic-over-private-lan2-network", "title": "Jump route traffic over Private Lan2 Network", "text": "<p>On the Jump server, we need to enable IP forwarding so that it can forward traffic from the VPN client to the 192.168.2.0/24 subnet:</p> <pre><code>sudo route add -net 192.168.2.0/24 gw 192.168.1.254\n</code></pre>", "tags": ["network"]}, {"location": "Networks/Lap01/LAP%201%20-%20Routing/#hop-3-gateway-to-private-lan2", "title": "Hop 3: Gateway to Private LAN2", "text": "<p>Just use default network interface, Lan2 client only know to send the packet back to our gateway (via <code>192.168.2.254</code>)</p> <p>Our gateway <code>192.168.1.254</code> to <code>192.168.2.254</code> have 2 network interface, so there is no need for further config.</p>", "tags": ["network"]}, {"location": "Program%20Language/C%20language/", "title": "C language", "text": "<p>A good language for deep understanding the machine way of handle thing, while not bloated with overcomplicated syntax</p> <p>List of problem that I used c to solve</p> Problem Last update 74. Search a 2D Matrix 8:52 PM - October 02, 2023 4. Median of Two Sorted Arrays 8:52 PM - October 02, 2023 50. Pow(x, n) 8:52 PM - October 02, 2023 518. Coin Change II 8:52 PM - October 02, 2023 63. Unique Paths II 8:52 PM - October 02, 2023 148. Sort List 8:52 PM - October 02, 2023 168. Excel Sheet Column Title 8:52 PM - October 02, 2023 118. Pascal\u2019s Triangle 8:52 PM - October 02, 2023 134. Gas Station 8:52 PM - October 02, 2023 138. Copy List with Random Pointer 8:52 PM - October 02, 2023"}, {"location": "Program%20Language/Pascal/", "title": "Pascal", "text": ""}, {"location": "Program%20Language/Pascal/#what-is-pascal", "title": "What is Pascal?", "text": "<p>This is the main language in Vietnam\u2019s educational for student bellow high school. Also, this is the main language for most of competition in the nation.</p> <p>Most of my learning programming concepts and programming practices is between times spend on Pascal.</p> <ul> <li>Compiling: A pascal program need to be compile to run on computer<ul> <li>What we do is writing source code, a set of instruction and other information</li> <li>Compiler will read all of that, producing the actual program</li> <li>Program then need to be run by the OS to return result.</li> </ul> </li> <li>Variable: Data type, User defined Structure type, Array, Pointer</li> <li>Logic: Expression, Logical (If-else) program flow, Loop</li> <li>Module: Procedure, Function</li> <li>Input/Output: User input, File handlining for input/output. (Most of time, input are from file)</li> </ul> <p>This contain basic usage of the language, which can over most used case for Pascal as a tool to learn about Algorithms and data structures.</p> <p>Overcomplicate: Any Importing, Standard Library, Graphical User interface, Source File splitting, OS argument input etc.. is not needed for this type of educational purpose.</p> <p>When I talk about Algorithms and data structures, I mean this much (as we can\u2019t just learn everything, this all being cover in \u201cGi\u1ea3i thu\u1eadt v\u00e0 l\u1eadp tr\u00ecnh\u201d by Le Minh Hoang ):</p> <ol> <li>Brute force:<ul> <li>Generation process: Permutation, Combination</li> <li>Backtracking (using Recursion)</li> <li>Branch and Bound (Nha\u0301nh va\u0300 C\u1eadn): Traveling sale man problem</li> </ul> </li> <li>Algorithms features: <ul> <li>Time/Calculation complexity:  Big O, theoretically measuring algorithms base on an approximately formula <code>f</code> base on the size of input (calling <code>n</code>), or <code>f(n) &lt;= c*g(n) or O(g(n)) (c is a constanst)</code></li> </ul> </li> <li> <p>Hand on data structure:</p> <ul> <li>List: A structure contain set of indexed element with the same type, with basic operation: Find, Insert, Delete.<ul> <li>Array list</li> <li>Linked list</li> <li>Double linked list</li> <li>Connected Linked list: End connected with Head</li> <li>Connected Double linked list:</li> </ul> </li> <li>Queue: A list that only insert at the end (rear) element and delete at the first (front) element  (FIFO - First in first out)<ul> <li>Linked list Queue</li> <li>Cycler Linked list Queue: No, we not learn this.</li> <li>Array Queue (Buffer Ring)</li> </ul> </li> <li>Stack: A list that only insert at the end (top) element and delete at the end (top) element  (LIFO - Last in first out)<ul> <li>Linked list stack</li> <li>Array Stack</li> </ul> </li> <li>Tree: Root, Subtree, Branch/Leaf, Deep. <ul> <li>Binary tree:<ul> <li>Array Binary tree: I\u2019m lazy, and this is fair enough, good old <code>2*x + 1, 2*x</code> child</li> <li>Linked Binary tree: It bearable after I come to modern OOP language, pointer are the pain (In Pascal, C, C++ with all of <code>^, @, *, &amp;</code> syntax) </li> <li>Tree traversal: Preorder (Node Left Right), In-order (Left Node Right), Post-order(Left Right Node). </li> <li>Mathematic expression calculation tree representation: <ul> <li>Prefix (Preorder traversal): <code>* + / 6 2 3 - 7 4</code> </li> <li>Infix (In-order traversal):   <code>((6 / 2) + 3) * (7 - 4)</code></li> <li>Postfix (Post-order traversal): <code>6 2 / 3 + 7 4 - *</code></li> </ul> </li> </ul> </li> <li>K-ary tree:<ul> <li>Array K-ary tree</li> <li>Linked K-ary tree</li> </ul> </li> <li>Heap</li> <li>Array heap</li> <li>Binary search tree</li> </ul> </li> <li>Array binary tree</li> <li>Graph Edges</li> <li>Graph Edges Matrix</li> <li>Graph Adjected  Array</li> <li>Directed graph</li> </ul> </li> <li> <p>Hand on Algorithms:</p> <ul> <li>String handling:<ul> <li>Insert</li> <li>Delete - String refine/trim</li> <li>String to number</li> <li>String splitting</li> <li>Big number operation: Add, Multiple, etc..</li> </ul> </li> <li>Recursion: I can come up to this question - Can we call a procedure inside it self? - even before studded/being told about recursion, back at that time this feel like magic, example: Hanoi Tower</li> <li>Postfix formula calculation </li> <li>Infix to Postfix transfer</li> <li>Sort<ul> <li>Selection sort</li> <li>Bubble sort</li> <li>Insertion sort: Assuming we have a sorted array with 0 length, we adding the number one by one to it while maintaining the array sorted. </li> <li>Shell sort: never use this</li> <li>Quick sort: All in this one</li> <li>Heap sort: You not even sort, just create a heap.</li> <li>Distribution counting (I call it Count sort)</li> <li>Radix sort: never use this, but should be the best here.</li> <li>Merge sort: almost never use this</li> </ul> </li> <li>Search<ul> <li>Sequential Search (or Linear search)</li> <li>Binary Search</li> <li>Binary Search tree</li> <li>Hash</li> <li>Binary value search: Assuming input data as a binary sequence (don\u2019t care about representation of the data: String/Number/Floating point/ etc.)  <ul> <li>Digital search tree: I can\u2019t understand this at all. Why the implementation have to be that confuse and unnatural.</li> <li>Radix search tree: A full/trim Trie tree for binary, where the value is build up by the search path (or leaf contained value) so there is no need to comparing on every step like DST.</li> </ul> </li> </ul> </li> <li>Dynamic programing<ul> <li>Recursive formulation implementation<ul> <li>Bottom - up approach: This work when we know exactly what needed to calculate before hand and build up to final result.</li> <li>Recursion approach:  This is a more general approach when we can\u2019t analyzing what needed to calculate first:<ul> <li>Storing every calculation result.</li> <li>Check store value, start calculating if we not calculate it yet.</li> </ul> </li> </ul> </li> <li>Tracing: All result require providing trace that lead to that result, different on each problem.</li> <li>Longest increasing sequence</li> <li>Knapsack problem</li> </ul> </li> </ul> </li> </ol>"}, {"location": "Program%20Language/Pascal/#getting-start", "title": "Getting start", "text": ""}, {"location": "Program%20Language/Pascal/#install-pascal-windows", "title": "Install Pascal - Windows", "text": "<p>To start with pascal programming, we can download and install Free Pascal. We can use <code>scoop</code> to installing it.</p> <pre><code>scoop install freepascal\n</code></pre> <p>To validate the installation, you can use <code>where</code></p> <pre><code>C:\\Users\\...&gt;where fp\nC:\\Users\\...\\scoop\\shims\\fp.exe\n</code></pre> <p>To start the IDE, open new terminal tab and press <code>fp</code> </p> <pre><code>fp\n</code></pre> <p>This not including helper on how to used this IDE for basic create new file or save, etc. So you can test some of the program function before going to the next session.</p>"}, {"location": "Program%20Language/Pascal/#program-basic-syntax", "title": "Program basic syntax", "text": "<p>A pascal main program start at <code>begin</code> and end with <code>end.</code>, the <code>.</code> providing compiler that it the end of the program. Compiler won\u2019t send any error for character that come after <code>.</code> </p> <p></p>"}, {"location": "Program%20Language/Pascal/#hello-world-program", "title": "Hello world program", "text": "<p>Create new file with this content</p> <pre><code>begin\nwriteln('Hello');\nend.\n</code></pre> <p>To run the program:</p> <ul> <li>Go to menu <code>Compile</code> &gt; <code>Compile &lt;Alt + 9&gt;</code> to compile the program</li> <li>Go to menu <code>Run</code> &gt; <code>Run &lt;Ctrl + 9&gt;</code> to run the program</li> <li>Go to menu <code>Debug</code> &gt; <code>Output</code> to read the output of the program</li> </ul> <p>This UI is the result of using <code>Window</code>&gt; <code>Title</code></p> <p></p>"}, {"location": "Program%20Language/Pascal/#after-note", "title": "After note", "text": "<ul> <li>While using the GUI can help a lot, from now on, we will only focus on the programming it self. </li> <li>For further and above, I will used other editor (<code>neovim</code> with this configuration) and <code>fpc</code> command to compile the code.</li> <li>This config is not providing any code completion, nor any helper directly for pascal. You could keep using <code>fp</code>, or other IDE like <code>vscode</code>, \u2026 to following.</li> </ul>"}, {"location": "Program%20Language/Pascal/#variable", "title": "Variable", "text": "<p>Variable is a representation of a value that will be determine when the program running. We can reference it using it\u2019s name.</p>"}, {"location": "Program%20Language/Pascal/#variable-initiation-and-assign", "title": "Variable initiation and assign", "text": "<p>Variable initiation have is own code block, that come between <code>var</code> and <code>begin</code>. This is example for:</p> <ol> <li> <p>Main program:</p> <ul> <li>Example: <pre><code>var\nx : integer;\nhello: string;\nbegin\nx := 1;\nhello := 'Hello World!';\nwriteln('This is your first variable ', x);\nwriteln('This is your seccond variable ', hello);\nend.\n</code></pre></li> <li>Output: <pre><code>This is your first variable 1\nThis is your seccond variable Hello World!\n</code></pre></li> </ul> </li> <li> <p>Function, Procedure: This will be cover later, see more here</p> </li> </ol> <p>We use operation <code>:=</code> to assign variable.</p>"}, {"location": "Program%20Language/Pascal/#variable-data-type", "title": "Variable data type", "text": "<p>Variable need to be initiation with Data type</p>"}, {"location": "Program%20Language/Pascal/#predefined-type", "title": "Predefined type", "text": ""}, {"location": "Program%20Language/Pascal/#basic-type", "title": "Basic type", "text": "<p>Ref: https://www.freepascal.org/docs-html/ref/refsu4.html#x26-250003.1.1</p> <p>I will focus on what we mostly used first:</p> <ul> <li><code>boolean</code>: can contain TRUE/ FALSE, which can be used for programing logic</li> <li><code>shortint</code>: signed integer 8-bit (between range <code>[2 ** 8 .. 2 ** 8 -1]</code> )</li> <li><code>integer</code>: signed integer 16-bit (between range <code>[2 ** 16 .. 2 ** 16 -1]</code> )</li> <li><code>longint</code>: signed integer 32-bit (between range<code>[2 ** 32 .. 2 ** 32 -1]</code> )</li> <li><code>int64</code>: signed integer 64-bit (between range <code>[2 ** 64 .. 2 ** 64 -1]</code>)</li> <li><code>char</code>: Single character, 8-bit</li> <li><code>array</code>: A static structure of same element, with a unchangeable size and element type after initiation</li> <li><code>string</code>: A variable can storing dynamic array of character, let assuming it is a dynamic character array</li> </ul> <p>Example:</p> <p><pre><code>var\narr1 : array [1..10] of shortint;\narr2 : array [1..10] of integer;\narr3 : array [1..10] of longint;\narr4 : array [1..10] of int64;\nc : char;\nac : Array [1..100] of char;\ns : string;\nbegin\n// length can tell the length of array 'like' structure\nwriteln(length(arr1), ' ', sizeof(arr1[1]));\nwriteln(length(arr2), ' ', sizeof(arr2[1]));\nwriteln(length(arr3), ' ', sizeof(arr3[1]));\nwriteln(length(arr4), ' ', sizeof(arr4[1]));\n// a single character have 1 length, with size 1 bytes\nc := 'A';\nwriteln(c, ' ', length(c), ' ', sizeof(c));\n// a static character array have 100 length\nac:= 'ABCDEFGH';\nwriteln(ac,' ', length(ac));\n// a dynamic character array have length modified by the assigned contents\ns := 'Hello';\nwriteln(s, ' ', length(s));\ns := 'Many more character';\nwriteln(s, ' ', length(s));\nend.\n</code></pre> Output: <pre><code>10 1\n10 2\n10 4\n10 8\nA 1 1\nABCDEFGH^@^@^@^@^@^@^@...@^@^@ 100\nHello 5\nMany more character 19\n</code></pre></p>"}, {"location": "Program%20Language/Pascal/#real-number", "title": "Real number", "text": "<p>Ref: https://www.freepascal.org/docs-html/ref/refsu5.html</p> <p>To storing real number, example <code>1.4</code>, <code>pi = 3.14</code>, etc. We can use two type of real number Data type:</p> <ol> <li>Approximate:<ul> <li><code>Real</code>: signed real 32-bit (or 16-bit) </li> <li><code>Double</code>: signed integer 32-bit </li> </ul> </li> <li>Exact number:<ul> <li><code>currency</code>: up to 4 number after floating point</li> </ul> </li> </ol> Type Range Significant digits Size Real platform dependant ??? 4 or 8 Single 1.5E-45 .. 3.4E38 7\u20138 4 Double 5.0E-324 .. 1.7E308 15\u201316 8 Extended 1.9E-4932 .. 1.1E4932 19\u201320 10 Comp -2E64+1 .. 2E63-1 19\u201320 8 Currency -922337203685477.5808 .. 922337203685477.5807 19\u201320 8 <p>Example:</p> <pre><code>var\nx: real;\ny: double;\nz: currency;\nbegin\nx := 1.4;\nwriteln(x, ' ', sizeof(x));\ny := 1.4;\nwriteln(y, ' ', sizeof(y));\nz := 1.4;\nwriteln(z, ' ', sizeof(z));\nz := 1.23456789;\nwriteln(z, ' ', sizeof(z));\nend.\n</code></pre> <p>Output: <pre><code> 1.3999999999999999E+000 8\n 1.3999999999999999E+000 8\n 1.400000000000000000E+00 8\n 1.234600000000000000E+00 8\n</code></pre></p>"}, {"location": "Program%20Language/Pascal/#user-defined-structural-type", "title": "User defined Structural type", "text": "<p>User defined Structural type need to be initiation, that have is own code block, come between <code>type</code> and <code>var</code></p> <ul> <li>We use <code>record</code> syntax to create new Data type</li> </ul> <pre><code>type\npoint = record\nx: integer;\ny: integer;\nend;\nvar\na : point;\nb : point;\nbegin\na.x := 1;\na.y := 4;\nwriteln(a.x);\nwriteln(a.y);\nend.\n</code></pre> <p>Output: <pre><code>1\n4\n</code></pre></p>"}, {"location": "Program%20Language/Pascal/#assign-structural-type", "title": "Assign Structural type", "text": "<p>You can assign each children variable via <code>.</code></p> <pre><code>    a.x := 1;\na.y := 4;\n</code></pre> <p>Or can assign directly if they have the same Structural type:</p> <pre><code>type\npoint = record\nx: integer;\ny: integer;\nend;\nvar\na : point;\nb : point;\nbegin\na.x := 1;\na.y := 4;\nwriteln(a.x);\nwriteln(a.y);\nb := a;\nwriteln(b.x);\nwriteln(b.y);\nend.\n</code></pre> <p>Output:</p> <pre><code>1\n4\n1\n4\n</code></pre>"}, {"location": "Program%20Language/Pascal/#pointer-data-type", "title": "Pointer Data type", "text": ""}, {"location": "Program%20Language/Pascal/#basic-usage", "title": "Basic usage", "text": "<p>A variable with Pointer Data type can contain a memory address of another variable with the same corresponded Data type, useful for other advanced data structure, basic syntax:</p> <p>Initiation:</p> <ul> <li><code>&lt;var-name&gt; : ^&lt;data-type&gt;</code> </li> </ul> <p>Usage:</p> <ul> <li><code>&lt;var-name&gt;</code>: Accessing pointer variable</li> <li><code>&lt;var-name&gt;^</code> : Accessing the memory address of our pointer variable storing</li> <li><code>addr(&lt;var-name&gt;)</code> or <code>@&lt;var-name&gt;</code>: Getting the address of any variable, this is useful for assign normal variable to a pointer variable</li> </ul> <p>Example: <pre><code>var\na : integer;\nb : ^integer;\nbegin\na := 2;\nb := @a;\nwriteln(a);\nwriteln(b^);\nb := addr(a);\nwriteln(b^);\nend.\n</code></pre></p> <p>Output: <pre><code>2\n2\n2\n</code></pre></p> <p>Pointer Data type will force that variable can only be use to storing a address that have the same corresponded Data type (Which generating compiler error).</p> <ul> <li>Data Type can be a user defined structure type</li> <li>Data Type can be a predefine type</li> </ul> <p>Pointer Data type can\u2019t be <code>writeln()</code>, this will generate compile error </p> <p>Creating a Pointer Data type: </p> <ul> <li>You add <code>^</code> before the corresponded Data type.</li> <li>You can create nested type, which use it self Pointer Data type. This is allowed as Pascal compiler allowing not completely defined Pointer Data type, which is call Forward type (this still have to be resolve).</li> </ul> <pre><code>type\nMyRec = record\nvalue: integer;\nnext: ^MyRec;\nend;\nvar\nlinkedList : MyRec;\na : integer;\nb : ^integer;\nbegin\nlinkedList.value := 1;\nlinkedList.next := nil;\nwriteln(linkedList.value);\nwriteln(linkedList.next = nil);\na := 2;\nb := @a;\nwriteln(a);\nend.\n</code></pre> <p>Output:</p> <pre><code>1\nTRUE\n2\n</code></pre>"}, {"location": "Program%20Language/Pascal/#assigning-pointer-variable", "title": "Assigning Pointer variable", "text": "<p>Like every other variable, you want to assign value to a pointer before accessing it</p> <ol> <li> <p>To already knew variable: <pre><code>var\n...\na : integer;\nb : ^integer;\nc : ^integer;\nbegin\n...\nb := @a;\nwriteln(a);\nwriteln(b^);\n</code></pre></p> <p>or we can used <code>addr()</code>, which do the same: <pre><code>    b := addr(a);\nwriteln(a);\nwriteln(b^);\nend.\n</code></pre></p> </li> <li> <p>To another pointer: <pre><code>var\n...\nb : ^integer;\nc : ^integer;\nbegin\n...\n// Assign to another pointer\nwriteln('=============');\nc := b;\nwriteln(b^);\nwriteln(c^, ' ', b = c);\nend.\n</code></pre></p> </li> <li> <p>Create new memory: By using <code>new()</code>, this tell computer to give a new memory to our program. </p> <ul> <li>We need to giving memory back to computer using <code>dispose()</code>, so that computer can give memory to other programs running on it.</li> <li>Still, if the program is terminated, all memory will be given back to the computer. <pre><code>    new(b);\nb^ := 2;\nwriteln(b^);\ndispose(b);\n</code></pre></li> </ul> </li> <li> <p>To nothing: <code>nil</code>, this is a special value that any pointer can point to. <pre><code>        linkedList.next = nil\n</code></pre></p> </li> </ol>"}, {"location": "Program%20Language/Pascal/#full-example", "title": "Full Example", "text": "<pre><code>type\nMyRec = record\nvalue: integer;\nnext: ^MyRec;\nend;\nvar\nlinkedList : MyRec;\na : integer;\nb : ^integer;\nc : ^integer;\npointerLinkedList : ^MyRec;\nbegin\nlinkedList.value := 1;\nlinkedList.next := nil;\nwriteln(linkedList.value);\nwriteln(linkedList.next = nil);\na := 2;\nb := @a;\nwriteln(a);\nwriteln(b^);\n// Or use addr()\nwriteln('=============');\nb := addr(a);\nwriteln(a);\nwriteln(b^);\n// Assign to another pointer\nwriteln('=============');\nc := b;\nwriteln(b^);\nwriteln(c^, ' ', b = c);\n// Alocating new memory\nwriteln('=============');\nnew(b);\nb^ := 4;\nwriteln(a);\nwriteln(b^, ' (we can see that a and b is different)');\ndispose(b); // Remember to dispose after new\n// User defined struct type is simmilar\nwriteln('=============');\npointerLinkedList := @linkedList;\nwriteln(pointerLinkedList^.value);\nwriteln(pointerLinkedList^.next = nil);\n// User defined struct type is simmilar\nwriteln('=============');\nnew(pointerLinkedList);\npointerLinkedList^.value := 2;\npointerLinkedList^.next := nil;\nwriteln(pointerLinkedList^.value);\nwriteln(pointerLinkedList^.next = nil);\ndispose(pointerLinkedList); // Remember to dispose after new\nend.\n</code></pre> <p>Output:</p> <pre><code>1\nTRUE\n2\n2\n=============\n2\n2\n=============\n2\n2 TRUE\n=============\n2\n4 (we can see that a and b is different)\n=============\n1\nTRUE\n=============\n2\nTRUE\n</code></pre>"}, {"location": "Program%20Language/Pascal/#logic", "title": "Logic", "text": ""}, {"location": "Program%20Language/Pascal/#expression", "title": "Expression", "text": "<p>Expression: any thing that result TRUE/FALSE (<code>boolean</code> Data type):</p> <ul> <li> <p>Comparation: <code>=, &gt;=, &gt;, &lt;=, &lt;</code>  and <code>&lt;&gt;</code> for check different of value</p> <pre><code>var\nb: boolean;\nbegin\nb := 1 = 1;\nwriteln(b); // 1 equal 1 -&gt; true\nb := 1 &lt;&gt; 1;\nwriteln(b); // 1 different 1 -&gt; false\nb := 1 &gt;= 1;\nwriteln(b); // 1 equal or bigger than 1 -&gt; true\nb := 1 &lt;= 1;\nwriteln(b); // 1 equal or less than 1 -&gt; true\nb := 1 &gt; 1;\nwriteln(b); // 1 bigger 1 -&gt; false\nb := 1 &lt; 1;\nwriteln(b); // 1 less 1 -&gt; false\nend.\n</code></pre> <p>Output:</p> <pre><code>TRUE\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\n</code></pre> </li> <li> <p>Actual value:</p> <pre><code>b := TRUE\n</code></pre> </li> <li> <p>Logic operation: <code>xor</code>, <code>or</code>, <code>and</code>, this cover most basic logic operation.</p> <pre><code>var\nb : boolean;\nt : integer;\nbegin\nb := TRUE xor FALSE;\nwriteln(b);\nb := TRUE or FALSE;\nwriteln(b);\nb := TRUE and FALSE;\nwriteln(b);\n// bytes wise logic operation does logic calculation\n// on coresponsed bit one by one\nt := %1010110101100101 xor %1010100010101010;\nwriteln(binstr(t, sizeof(t) * 8), ' integer have size = ', sizeof(t), ' which mean it have ', sizeof(t) * 8, ' bits');\nt := %0110101001010101 or %0010101000101001;\nwriteln(binstr(t, sizeof(t) * 8));\nt := %1001010000101001 and %0101001010101000;\nwriteln(binstr(t, sizeof(t) * 8));\nend.\n</code></pre> <p>Output: <pre><code>TRUE\nTRUE\nFALSE\n0000010111001111 integer have size = 2 which mean it have 16 bits\n0110101001111101\n0001000000101000\n</code></pre></p> </li> </ul> <p>Logical code block after <code>then</code> will only run when expression between <code>if</code> and <code>then</code> is <code>TRUE</code></p> <pre><code>    if TRUE then begin\nx := x + 1;\nwriteln('logic true ', x);\nend;\nif FALSE then begin\nx := x + 2;\nwriteln('logic false, this is not running ', x);\nend;\n</code></pre> <p>You can adding <code>else</code>, so that expression between <code>if</code> and <code>then</code> is <code>FALSE</code>, code block after <code>else</code> will be run instead.</p> <pre><code>var\nx : integer;\nbegin\nx := 1;\nwriteln(x);\nif TRUE then begin\nx := 2;\nwriteln('logic true ', x);\nend;\nif FALSE then begin\nx := 100;\nwriteln('logic false, this is not running ', x);\nend\nelse begin\nx := 3;\nwriteln('logic false, so this run instead ', x);\nend;\nend.\n</code></pre> <p>Output:</p> <pre><code>1\nlogic true 2\nlogic false, so this run instead 3\n</code></pre>"}, {"location": "Program%20Language/Pascal/#if-then-else", "title": "If - then - else", "text": ""}, {"location": "Program%20Language/Pascal/#while-do-loop", "title": "While do (loop)", "text": "<p>Logical code block after <code>while do</code> will run on repeat until expression between <code>while</code> and <code>do</code> is <code>FALSE</code>. We call this type of code is a loop.</p> <pre><code>var\nx : integer;\nbegin\nx := 1;\nwhile x &lt;= 5 do begin\nwriteln(x);\nx := x + 1;\nend;\nend.\n</code></pre> <p>Output</p> <pre><code>1\n2\n3\n4\n5\n</code></pre>"}, {"location": "Program%20Language/Pascal/#for-to-do-loop", "title": "For - to - do loop", "text": "<p>A special on loop that run in a fixed times, syntax look like this.</p> <ul> <li><code>For - to - do</code> loop need a variable, which contain the current value of the range given to our <code>For - to - do</code> loop</li> </ul> <pre><code>var\nx : integer;\nbegin\nfor x:= 1 to 5 do begin\nwriteln(x);\nend;\nend.\n</code></pre> <ul> <li>We can see it the same as this while do code:</li> </ul> <pre><code>var\nx : integer;\nbegin\nx := 0;\nwhile x &lt;= 5 do begin\nx := x + 1;\nwriteln(x);\nend;\nend.\n</code></pre> <p>Output</p> <pre><code>1\n2\n3\n4\n5\n</code></pre>"}, {"location": "Program%20Language/Pascal/#module", "title": "Module", "text": "<p>A repeated code block that can be reused multiple time. We can used this type of Code block via calling it name inside our program after initiation (from now on, we use term <code>caller</code> for this interaction).</p>"}, {"location": "Program%20Language/Pascal/#procedure", "title": "Procedure:", "text": "<p>Basic module. Share a lot similarity with normal main program.</p>"}, {"location": "Program%20Language/Pascal/#basic-declaration", "title": "Basic declaration", "text": "<p>We use <code>procedure</code> keyword do define a procedure. We will want to know basic: </p> <ul> <li>Name: module can be call via it\u2019s name. <pre><code>procedure echo(x : string);\n// -------^^^^ This is procedure name\n</code></pre></li> <li>Argument: Some information need to be pass to the procedure module from the caller. <pre><code>procedure echo(x : string);\n// ------------^^^^^^^^^^ This is procedure agrument\n</code></pre></li> <li> <p>Local variable: Similar to main program, it come after the initiation of procedure, start at <code>var</code> and end at <code>begin</code>, which will only used and available for this procedure</p> <p>A module is separated from it self, which mean you can\u2019t reuse variable after initiation </p> <pre><code>procedure echo(hello : string);\nvar\nworld : string;\nbegin\nend;\n</code></pre> </li> <li> <p>Code block: Set of instruction that will be execute when this module call, it come after the initiation of procedure, start at <code>begin</code> and end at <code>end</code> <pre><code>procedure echo();\nbegin\nwriteln('Hello world!');\nend;\n</code></pre></p> </li> </ul> <p>Example:</p> <pre><code>procedure echo(hello : string);\nvar\nworld : string;\nbegin\nworld := 'world!';\nwriteln(hello, ' ', world);\nend;\nvar\nhello: string;\nbegin\nhello := 'Hello';\necho(hello);\necho(hello);\necho(hello);\necho(hello);\nend.\n</code></pre> <p>Output:</p> <pre><code>Hello world!\nHello world!\nHello world!\nHello world!\n</code></pre>"}, {"location": "Program%20Language/Pascal/#pass-by-reference", "title": "Pass by reference", "text": "<p>When <code>caller</code> passing information to procedure as a argument, we can passing the actual variable to the procedure.</p> <p>This mean any modification of this argument inside our procedure will take effect directly to the variable passed.</p> <p>Example:</p> <pre><code>procedure add1(step: integer; var x : integer);\n// -------------------------------^^^^^^^^^^^ x being pass as a reference\nbegin\nx := x + step;\nend;\nvar\na: integer;\nbegin\na := 0;\nwriteln(a);\nadd1(1, a);\nwriteln(a);\nadd1(2, a);\nwriteln(a);\nadd1(3, a);\nwriteln(a);\nend.\n</code></pre> <p>Output:</p> <pre><code>0\n1\n3\n6\n</code></pre> <p>This is important if you want to get some result back from the procedure, which lead to <code>function</code> </p>"}, {"location": "Program%20Language/Pascal/#function", "title": "Function:", "text": "<p>This special module need to be initiation with a Data type, which will return back a result with the same Data type to <code>caller</code> code. This return value is a disposable/temporary product, it won\u2019t be store in anything.</p> <pre><code>function add(x : integer; y: integer) : integer;\nbegin\nadd := x + y;\nend;\nvar\na : integer;\nbegin\nwriteln(add(3, 3));\na := add(5, 3);\nwriteln(a);\nend.\n</code></pre> <p>Output:</p> <pre><code>6\n8\n</code></pre>"}, {"location": "Program%20Language/Pascal/#recursionnested-module", "title": "Recursion/Nested module", "text": "<ul> <li>Nested module: A module can call other module</li> <li>Recursion: is a term that describe a module call it self.</li> </ul> <pre><code>function fibonachi(x: integer) : integer;\nbegin\nif x &lt; 0 then begin\nfibonachi := -1;\nend\nelse if x = 0 then begin\nfibonachi := 0;\nend\nelse if x &lt;= 2 then begin\nfibonachi := 1;\nend\nelse begin\nfibonachi := fibonachi(x-1) + fibonachi(x-2);\n// --------------^^^^^^^^^^^^^----^^^^^^^^^^^^^^^ recursion\nend\nend;\nvar\ni : integer;\nbegin\nfor i := 0 to 10 do begin\nwriteln(fibonachi(i));\nend;\nend.\n</code></pre> <p>Output:</p> <pre><code>0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n</code></pre>"}, {"location": "Program%20Language/Pascal/#inputoutput", "title": "Input/output", "text": ""}, {"location": "Program%20Language/Pascal/#user-input", "title": "User input", "text": "<p>We can use <code>read()</code>, <code>readln()</code> for most of input handling.</p> <pre><code>var\ni: integer;\nv: integer;\ns: integer;\nbegin\ns := 0;\nfor i:= 1 to 3 do begin\nreadln(v);\nwriteln('You input v = ', v);\ns := s + v;\nend;\nwriteln('Total = ', s);\nend.\n</code></pre> <p>This is a User interaction program.</p>"}, {"location": "Program%20Language/Pascal/#file-handling", "title": "File handling", "text": ""}, {"location": "Program%20Language/Pascal/#specials-file-data-type-text", "title": "Specials File Data type <code>text</code>", "text": "<p>To work with file, we use Data type <code>text</code></p> <ul> <li>Assign syntax: <code>assign(f, '&lt;path_to_input&gt;')</code></li> <li>Open file for read: <code>reset(f)</code></li> <li>Open file for write: <ol> <li><code>rewrite(f)</code>: Delete all file content if existed, then start adding new data to the file </li> <li><code>append(f)</code>: Keep all file content, adding new data to the end of file</li> </ol> </li> <li>Close: <code>close(f)</code><ol> <li>Using file (may) cause block other program from accessing that file (OS level handling)</li> <li>By closing, we release the file back to the Computer</li> <li>Also, this confirm all of our change to that file in the process.</li> </ol> </li> </ul>"}, {"location": "Program%20Language/Pascal/#file-input-read-from-file", "title": "File input - Read from file", "text": "<p>Reading from file is another way to send input to the program, still, read/writing have a lot more limitation on speed the Hardware.</p> <pre><code>1\n1 2 3\nstring\nstring string\n</code></pre> <pre><code>var\nf: text;\ni: integer;\nv: integer;\ns: integer;\nstr: string;\nbegin\nassign(f, 'input.txt');\nreset(f);\ns := 0;\nfor i:= 1 to 4 do begin\nread(f, v);\ns := s + v;\nwriteln(v)\nend;\nwriteln(s);\nwriteln('========');\n// Real until end of file\nwhile not eof(f) do begin\nreadln(f, str);\nwriteln(str);\nend;\nclose(f);\nend.\n</code></pre> <pre><code>1\n1\n2\n3\n7\n========\nstring\nstring string\n</code></pre>"}, {"location": "Program%20Language/Pascal/#file-output-write-to-file", "title": "File output - Write to file", "text": "<p>Writing to file is another way to send result of the program to user, still, read/writing have a lot more limitation on speed the Hardware.</p> <pre><code>var\nf: text;\ni: integer;\nbegin\nassign(f, 'output.txt');\nrewrite(f);\nfor i := 1 to 10 do begin\nwriteln(f, i);\nend;\nclose(f);\nend.\n</code></pre> <pre><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre>"}, {"location": "Program%20Language/Python/", "title": "Python", "text": "<p>A good language for fast implementations. But quite fast in runtimes on it own</p> <p>List of problem that I used python to solve</p> Problem Last update 101. Symmetric Tree 8:52 PM - October 02, 2023 102. Binary Tree Level Order Traversal 8:52 PM - October 02, 2023 103. Binary Tree Zigzag Level Order Traversal 8:52 PM - October 02, 2023 104. Maximum Depth of Binary Tree 8:52 PM - October 02, 2023 108. Convert Sorted Array to Binary Search Tree 8:52 PM - October 02, 2023 116. Populating Next Right Pointers in Each Node 8:52 PM - October 02, 2023 118. Pascal\u2019s Triangle 8:52 PM - October 02, 2023 121. Best Time to Buy and Sell Stock 8:52 PM - October 02, 2023 122. Best Time to Buy and Sell Stock II 8:52 PM - October 02, 2023 130. Surrounded Regions 8:52 PM - October 02, 2023"}, {"location": "Program%20Language/Rush/", "title": "Rush", "text": "<p>List of problem that I used rust to solve</p> Problem Last update 134. Gas Station 6:19 PM - September 17, 2023 518. Coin Change II 10:59 AM - September 09, 2023 63. Unique Paths II 12:04 AM - August 30, 2023 459. Repeated Substring Pattern 7:44 PM - August 26, 2023"}, {"location": "Program%20Language/Rush/#variable", "title": "Variable", "text": "<ul> <li>Assigned using <code>let</code> keyword</li> <li>Print to standard output by <code>print! ( )</code> or <code>println! ()</code></li> <li>Scope of a variable defined by the block of code in which it is declared</li> <li>Function is a named block of code that is reusable</li> <li>Shadowing allows a variable to be re-declared in the same scope with the same name</li> </ul>"}, {"location": "Program%20Language/Rust/", "title": "Rust", "text": "<p>List of problem that I used rust to solve</p> Problem Last update 459. Repeated Substring Pattern 8:52 PM - October 02, 2023 518. Coin Change II 8:52 PM - October 02, 2023 63. Unique Paths II 8:52 PM - October 02, 2023 134. Gas Station 8:52 PM - October 02, 2023"}, {"location": "Program%20Language/Rust/#variable", "title": "Variable", "text": "<ul> <li>Assigned using <code>let</code> keyword</li> <li>Print to standard output by <code>print! ( )</code> or <code>println! ()</code></li> <li>Scope of a variable defined by the block of code in which it is declared</li> <li>Function is a named block of code that is reusable</li> <li>Shadowing allows a variable to be re-declared in the same scope with the same name</li> </ul>"}, {"location": "Query%20Language/Dataview%20Query%20Language/", "title": "Dataview Query Language", "text": "<p>Have some use case in Obsidian notes, this note is for reference that what I used</p>"}, {"location": "Query%20Language/Dataview%20Query%20Language/#query-structure", "title": "Query structure", "text": "<p>Or LIST/TABLE can be used to render the content</p> <pre><code>TABLE WITHOUT ID \"[[\" + file.name + \"|\" + file.name + \"]]\" as \"Problem\", &lt;column&gt;\nFROM &lt;file/folder/tag&gt;\nWHERE &lt;expression&gt;\nSORT &lt;column&gt; (DESC)\nLIMIT &lt;number&gt;\n</code></pre>"}, {"location": "Query%20Language/Dataview%20Query%20Language/#metadata", "title": "Metadata:", "text": "<ul> <li><code>file.mtime</code> : File modify time</li> <li><code>file.tags</code> : File tags as array</li> <li><code>&lt;meta-inlines&gt;</code> : reference to metadata</li> </ul>"}, {"location": "Query%20Language/Dataview%20Query%20Language/#adding-metadata", "title": "Adding metadata:", "text": ""}, {"location": "Query%20Language/Dataview%20Query%20Language/#frontmatter", "title": "Frontmatter", "text": "<pre><code>---\ntags:\n- &lt;anything&gt;\n---\n</code></pre>"}, {"location": "Query%20Language/Dataview%20Query%20Language/#inline", "title": "Inline", "text": "<ul> <li><code>&lt;meta-inlines&gt;:: &lt;anything&gt;</code></li> </ul>"}, {"location": "Query%20Language/Dataview%20Query%20Language/#function", "title": "Function", "text": "<ul> <li><code>econtain(&lt;array/string&gt;)</code> : Check for exact contain of element in list array</li> </ul>"}, {"location": "notes/Leetcode%201-10/4.%20Median%20of%20Two%20Sorted%20Arrays/", "title": "4. Median of Two Sorted Arrays", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n log n)", "O(log (n + m))", "O(log (m+n))"]}, {"location": "notes/Leetcode%201-10/4.%20Median%20of%20Two%20Sorted%20Arrays/#problem", "title": "Problem", "text": "<p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return the median of the two sorted arrays.</p> <p>The overall run time complexity should be <code>O(log (m+n))</code>.</p> <p>Example 1:</p> <p>Input: nums1 = [1,3], nums2 = [2] Output: 2.00000 Explanation: merged array = [1,2,3] and median is 2.</p> <p>Example 2:</p> <p>Input: nums1 = [1,2], nums2 = [3,4] Output: 2.50000 Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.</p> <p>Constraints:</p> <ul> <li><code>nums1.length == m</code></li> <li><code>nums2.length == n</code></li> <li><code>0 &lt;= m &lt;= 1000</code></li> <li><code>0 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= m + n &lt;= 2000</code></li> <li><code>-106 &lt;= nums1[i], nums2[i] &lt;= 106</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n log n)", "O(log (n + m))", "O(log (m+n))"]}, {"location": "notes/Leetcode%201-10/4.%20Median%20of%20Two%20Sorted%20Arrays/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n log n)", "O(log (n + m))", "O(log (m+n))"]}, {"location": "notes/Leetcode%201-10/4.%20Median%20of%20Two%20Sorted%20Arrays/#easy-mode-merge-them-and-return-median", "title": "Easy mode, merge them and return median", "text": "<p><code>O(n log n)</code></p> <p>No need to bother making it O(n) using merge, the problem specially said we need a <code>O(log (m+n))</code> time complexity.</p> <p>I still leave it like this so at least, I finish the problem.</p> <p>Runtime 86 ms Beats 79.70% Memory 16.5 MB Beats 68.59%</p> <pre><code>class Solution:\ndef findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&gt; float:\nnums = nums1 + nums2\nnums.sort()\nif len(nums) % 2 == 1:\nreturn nums[len(nums)//2]\nreturn (nums[len(nums)//2 - 1] + nums[len(nums)//2] ) / 2.\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n log n)", "O(log (n + m))", "O(log (m+n))"]}, {"location": "notes/Leetcode%201-10/4.%20Median%20of%20Two%20Sorted%20Arrays/#hard-mode-binary-search-all-the-way-we-go", "title": "Hard mode, binary search all the way we go", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n log n)", "O(log (n + m))", "O(log (m+n))"]}, {"location": "notes/Leetcode%201-10/4.%20Median%20of%20Two%20Sorted%20Arrays/#white-board", "title": "White board", "text": "<p>Let say we deal with nums1 length m, and nums2 array with length n. </p> <ul> <li>I can try each number <code>x</code> in nums1 (or nums2), try to find it\u2019s real position after merge both array<ul> <li>We know <code>x</code> position in nums1 (which mean it cost O(1))</li> <li>We can try find position of <code>x</code> in nums2 using binary search (cost us O(log m))</li> <li>So the \u201cfind <code>x</code>\u2019s real position\u201d cost me O(log m) time</li> </ul> </li> <li>We also know that <code>x</code> is in a sorted array, so <code>x[i] &lt; x[i+1] &lt; ...</code> and also mean <code>x[i]</code>\u2019s real position in merged array also increasing.<ul> <li>We need to find the median position, which mean we need to find <code>x[i]</code> that have it\u2019s real position = median position of merged array = <code>(n+m)/2</code></li> <li>Case <code>(n+m) % 2 == 0</code> (even length merged array), we also need to find <code>(n+m)/2 - 1</code> position element in  merged array.</li> <li>By what we analyze, we can use binary search to check on each <code>x[i]</code> in nums1, find take it real position, then base on the <code>x[i]</code> real position vs median position <code>(n+m)/2</code> we can round down left and right search range range</li> <li>So we have a nested log(n) and log(m), meaning try to find a <code>x[i]</code> with real position == median position cost us <code>O(log (n+m))</code> time complexity</li> </ul> </li> <li>This need to address that, we try only numbers in nums1 array. Median position could be in nums2 array, so we need to run this again on nums2. This is a separated run so we still have <code>O(log (n+m))</code> time complexity</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n log n)", "O(log (n + m))", "O(log (m+n))"]}, {"location": "notes/Leetcode%201-10/4.%20Median%20of%20Two%20Sorted%20Arrays/#implementation-bisect-binary-search-twice", "title": "Implementation - Bisect, Binary search twice", "text": "<p><code>O(log (n + m))</code></p> <p>I done exactly using what I describe in the write board session</p> <ul> <li>Try to find in nums1:<ul> <li>A nums1[<code>found</code>] position which have real position <code>(n+m)/2</code> in merged array</li> <li>If total length of merged array <code>(n+m) % 2 == 0</code> (even length), I rerun binary search again to find nums1[<code>found2</code>] position which have real position <code>(n+m)/2 - 1</code> in merged array.</li> <li>If we can\u2019t find any <code>found</code> or <code>found2</code>, we set it default as <code>-1</code></li> </ul> </li> <li>Done the same thing with nums2 array, but storing result in <code>found3</code>, <code>found4</code></li> <li>If I done it right:<ul> <li>A odd length merged array will have <code>nums1[found]</code> or <code>nums2[found3]</code> contain the median</li> <li>A even length merged array will have (<code>nums1[found]</code> or <code>nums2[found3]</code>) and (<code>nums1[found2]</code> or <code>nums2[found4]</code>) contain the median.</li> <li>Calculate result base on which one contain value (which mean <code>found != -1</code>)</li> </ul> </li> </ul> <p>Note - Some real pain I have is that:</p> <ul> <li>I repeat the search function in <code>if total % 2 == 0:</code> part, where I not set <code>l, r = -1, m</code>, which have me a Runtime error submit.</li> <li>I not follow binary search formal while loop expression, which I forgot to add <code>l != r - 1</code>, which make me have another Runtime error submit on empty list.</li> <li>I forgot/unanalyzed the problem deep enough so that I not handle case where <code>nums1[i] = x</code> is in nums2 array, which make <code>x</code> can have a possible range of position in the merged array. This make me have a Wrong answer submit.</li> <li>I also forgot and try to find <code>mid</code> instead of <code>nums1[mid]</code> in nums2, this not cause me any problem tho.</li> </ul> <p>Final implementation have it runtime slower than O(n log n) solution, which is fair when we using python</p> <p>Runtime 111 ms Beats 6.8% Memory 16.6 MB Beats 35.48%</p> <pre><code>class Solution:\ndef findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&gt; float:\ndef binary_search(nums1, nums2):\nm = len(nums1) \nn = len(nums2)\ntotal = m + n\nfound = -1\nfound2 = -1\nl, r = -1, m\nwhile found == -1 and l != r - 1:\nmid = (l + r) // 2\npos = bisect_right(nums2,nums1[mid])\nposLeft = bisect_left(nums2,nums1[mid])\nrealPos = mid + pos\npossiblePos = mid + posLeft\nif possiblePos &lt;= total // 2 &lt;= realPos :\nfound = mid\nelif realPos &lt; total // 2:\nl = mid\nelse:\nr = mid\nif l == r-1:\nbreak\nif total % 2 == 0:\nl, r = -1, m\nwhile found2 == -1 and l != r - 1:\nmid = (l + r) // 2\npos = bisect_right(nums2,nums1[mid])\nposLeft = bisect_left(nums2,nums1[mid])\nrealPos = mid + pos\npossiblePos = mid + posLeft\nif possiblePos &lt;= total // 2 - 1 &lt;= realPos :\nfound2 = mid\nelif realPos &lt; total // 2 - 1:\nl = mid\nelse:\nr = mid\nif l == r-1:\n# print(realPos, l, r, nums1[l])\nbreak\n# print(found, found2)\nreturn (found, found2)\nfound, found2 = binary_search(nums1, nums2)\nfound3, found4 = binary_search(nums2, nums1)\nres = 0\nif found != -1:\nres += nums1[found]\nelif found3 != -1:\nres += nums2[found3]\nif found2 != -1:\nres += nums1[found2]\nres = res / 2.\nelif found4 != -1:\nres += nums2[found4]\nres = res / 2.\nreturn res\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n log n)", "O(log (n + m))", "O(log (m+n))"]}, {"location": "notes/Leetcode%201-10/4.%20Median%20of%20Two%20Sorted%20Arrays/#reimplementation-c-lang-and-pain-with-binary-search", "title": "Reimplementation - C lang and pain with binary search", "text": "<p><code>O(log (m+n))</code></p> <p>I want to know is this actually better than normal O(n):</p> <ul> <li>I don\u2019t have built-in binary search (<code>bisect</code> in python), so I have to implement my own, which I miss judge a lot of time. I have to separated them in two separated function for sanity (Still it do the same thing, I done it right on binary search part)</li> <li>Ran into runtime error every time as I try to access out of scope index from provided array variable (in python it not throw error but give me some revert value, which need the same amount of debug time on why I get wrong result)</li> <li>Some needed even more deep understanding of case where <code>nums1[mid]</code> is found in nums2 array. Which require a lot of my debug time.</li> </ul> <p>Final implementation is quite a better score, but after some dig into summited code, I found a lot O(n) implementation have better runtime.</p> <p>Runtime 7 ms Beats 92.34% Memory 7.2 MB Beats 6.74%</p> <pre><code>// If found return 1, else return 0\nint binarysearch_right(int* nums, int numsSize, int val) {\nint l = -1;\nint r = numsSize;\nint mid;\nwhile (l != r -1) {\nmid = (l + r) &gt;&gt; 1;\nif (nums[mid] &lt;= val) l = mid;\nelse\nr = mid;\n}\nreturn l;\n}\nint binarysearch_left(int* nums, int numsSize, int val) {\nint l = -1;\nint r = numsSize;\nint mid;\nwhile (l != r -1) {\nmid = (l + r) &gt;&gt; 1;\nif (nums[mid] &lt; val) l = mid;\nelse\nr = mid;\n}\nreturn r;\n}\nint binarysearch(int* nums, int numsSize, int val, int* leftMost, int* rightMost) {\n*leftMost =  binarysearch_left(nums, numsSize, val);\n*rightMost =  binarysearch_right(nums, numsSize, val);\nreturn *leftMost &lt;= *rightMost;\n}\n// Only find using element in nums1, if nums1 not contain mergeArrayPos'th element return -1\nint findMergeArrayPos(int* nums1, int nums1Size, int* nums2, int nums2Size, int mergeArrayPos) {\nint l = -1;\nint r = nums1Size;\nint mid, val;\nint pos = -1;\nwhile (l != r-1) {\nmid = (l + r) &gt;&gt; 1;\n// printf(\"l=%d, r=%d, mid=%d\\n\", l, r, mid);\nval = nums1[mid];\nint leftMost, rightMost;\nint isFound = binarysearch(nums2, nums2Size, val, &amp;leftMost, &amp;rightMost);\nint true_position = mid + leftMost;\nif (isFound) {\nint possiblePos = mid + rightMost + 1;\n// printf(\"Range (left = %d, right %d), need %d\\n\", true_position, possiblePos, mergeArrayPos);\nif (mergeArrayPos &lt;= possiblePos &amp;&amp; true_position &lt;= mergeArrayPos) {\npos = mid;\nbreak;\n}\n}\nif ( mergeArrayPos == true_position) {\npos = mid;\nbreak;\n}\nif (true_position &lt; mergeArrayPos) {\nl = mid;\n} else if ( mergeArrayPos &lt; true_position ) {\nr = mid;\n} }\n// if (pos != -1) printf(\"Found mergeNums[%d] = %d\\n\", mergeArrayPos, nums1[pos]);\nreturn pos;\n}\ndouble findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){\nif (nums2Size == 0) {\nreturn findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);\n}\nif (nums1Size == 0) {\nint mid = nums2Size &gt;&gt; 1;\nif (nums2Size % 2 == 0)\nreturn (nums2[mid] + nums2[mid-1]) / 2.;\nelse\nreturn (double) nums2[mid];\n}\nint total = nums1Size + nums2Size;\nint mergePos = total &gt;&gt; 1;\ndouble res = 0.;\n// printf(\"Find pos\\n\");\nint pos = findMergeArrayPos(nums2, nums2Size, nums1, nums1Size, mergePos);\nif (pos == -1) {\n// printf(\"Retry find pos\\n\");\npos = findMergeArrayPos(nums1, nums1Size, nums2, nums2Size, mergePos);\nres += nums1[pos]; } else {\nres += nums2[pos]; }\n// printf(\"Find pos2\\n\");\nif (total % 2 == 0) {\nmergePos -= 1;\nint pos2 = findMergeArrayPos(nums2, nums2Size, nums1, nums1Size, mergePos);\nif (pos2 == -1) {\n// printf(\"Retry find pos2\\n\");\npos2 = findMergeArrayPos(nums1, nums1Size, nums2, nums2Size, mergePos);\nres = (res + nums1[pos2]) /2.; } else {\nres = (res + nums2[pos2]) /2.; }\n}\n// printf(\"Final result = %f\\n\", res);\nreturn res;\n}\nvoid testBinarySearch(int* nums1, int nums1Size, int val){\nint leftMost, rightMost;\nint isFound = binarysearch(nums1, nums1Size, val, &amp;leftMost, &amp;rightMost);\nif (isFound) {\nprintf(\"Found %d in range [%d, %d]\\n\", val, leftMost, rightMost);\n}\nelse {\nprintf(\"Not found %d, middle range [%d, %d]\\n\", val, leftMost, rightMost);\n}\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n log n)", "O(log (n + m))", "O(log (m+n))"]}, {"location": "notes/Leetcode%201-10/4.%20Median%20of%20Two%20Sorted%20Arrays/#one-round-binary-search-0ms-solution-that-i-yanked", "title": "One round Binary search - 0ms solution that I yanked", "text": "<p>TODO, JUST WTH is this code</p> <pre><code>double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){\nif(nums1Size &gt; nums2Size) {\nreturn findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);\n}\nint totalSize = nums1Size + nums2Size;\nint left = 0, right = nums1Size;\nwhile(left &lt;= right) {\nint part1 = left + (right - left) / 2;\nint part2 = (totalSize + 1) / 2 - part1;\nint maxLeft1 = (part1 == 0) ? INT_MIN : nums1[part1 - 1];\nint minRight1 = (part1 == nums1Size) ? INT_MAX : nums1[part1];\nint maxLeft2 = (part2 == 0) ? INT_MIN : nums2[part2 - 1];\nint minRight2 =(part2 == nums2Size) ? INT_MAX : nums2[part2];\nif(maxLeft1 &lt;= minRight2 &amp;&amp; maxLeft2 &lt;= minRight1) {\nif(totalSize % 2 == 0) {\nreturn (double)(fmax(maxLeft1 ,maxLeft2) + fmin(minRight1, minRight2)) / 2.0;\n} else {\nreturn (double)fmax(maxLeft1, maxLeft2);\n}\n} else if(maxLeft1 &gt; minRight2) {\nright = part1 - 1;\n} else {\nleft = part1 + 1;\n}\n}\nreturn 0.0;\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n log n)", "O(log (n + m))", "O(log (m+n))"]}, {"location": "notes/Leetcode%2010-100/33.%20Search%20in%20Rotated%20Sorted%20Array/", "title": "33. Search in Rotated Sorted Array", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/33.%20Search%20in%20Rotated%20Sorted%20Array/#problem", "title": "Problem", "text": "<p>There is an integer array <code>nums</code> sorted in ascending order (with distinct values).</p> <p>Prior to being passed to your function, <code>nums</code> is possibly rotated at an unknown pivot index <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (0-indexed). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p> <p>Given the array <code>nums</code> after the possible rotation and an integer <code>target</code>, return the index of <code>target</code> if it is in <code>nums</code>, or <code>-1</code> if it is not in <code>nums</code>.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p>Example 1:</p> <p>Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4</p> <p>Example 2:</p> <p>Input: nums = [4,5,6,7,0,1,2], target = 3 Output: -1</p> <p>Example 3:</p> <p>Input: nums = [1], target = 0 Output: -1</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> <li>All values of <code>nums</code> are unique.</li> <li><code>nums</code> is an ascending array that is possibly rotated.</li> <li><code>-104 &lt;= target &lt;= 104</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/33.%20Search%20in%20Rotated%20Sorted%20Array/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/33.%20Search%20in%20Rotated%20Sorted%20Array/#find-the-shift-point-of-the-sorted-array-and-binary-search", "title": "Find the shift point of the sorted array and Binary search", "text": "<p><code>O(log n)</code></p> <p>Source code: https://github.com/ylsama/leetcode/blob/main/33.py</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/33.%20Search%20in%20Rotated%20Sorted%20Array/#shift-point-finder", "title": "Shift point finder", "text": "<p>We represent the sorted <code>nums</code> array as <code>[1..n]</code>, the shift point is <code>shiftPoint</code>, we have:</p> <ul> <li>Sorted <code>nums</code> array: <code>nums[1] &lt; nums[2] &lt; ... &lt; nums[shiftPoint] &lt; nums[shiftPoint+1] &lt; .. &lt; nums[n]</code>(as define: all values of <code>nums[i]</code> are unique)</li> <li><code>0 &lt;= shiftPoint &lt; n</code> (or <code>sp</code> for sort)</li> </ul> <p>The problem give us <code>nums</code> array being shifted by <code>sp</code> so we can represent it like this:</p> index [1] [2] \u2026 [n- sp] [n- sp + 1] \u2026 [n] nums_index 1 2 \u2026 n- sp n- sp +1 \u2026 n nums_value sp +1 sp+2 \u2026 n 1 \u2026 sp <p>Then shift point <code>sp</code> is the only point where: ^9bc286</p> <ul> <li>every element with <code>nums_index &lt;= n- sp</code> have <code>nums_value &gt; nums_value[1]</code></li> <li>every element with <code>nums_index &gt;  n- sp</code> have <code>nums_value &lt; nums_value[1]</code></li> </ul> <p>We can use binary search to find <code>n-sp</code>:</p> <ol> <li>Start with `pointerLeftIndex = 1, pointerRightIndex = n+1</li> <li>Calculate the middle value: <code>midIndex = (left + right)//2</code></li> <li>If <code>nums_value[midIndex] &gt; nums_value[1]</code> then <code>midIndex &lt;= n- sp</code> and we can shift the <code>pointerLeftIndex = midIndex</code>, else we shift the <code>pointerRightIndex = midIndex</code></li> <li>Repeat calculated <code>midIndex</code> value and shift <code>pointerLeft/RightIndex</code> until <code>pointerLeft == midIndex == (left + right)//2</code> , which also mean/the same as  <code>pointerLeft  +1 == pointerRightIndex</code></li> <li>We have <code>pointerLeft</code> is the <code>n-sp</code> ; return <code>n-pointerLeft</code></li> </ol> <p>How can <code>pointerLeft</code> is <code>n-sp</code>, basically we trying to find <code>(left, right) = (index,index+1)</code> pair using the binary search that have:</p> <ol> <li><code>pointerLeftIndex &gt; nums_value[1]</code></li> <li><code>pointerRightIndex &lt; nums_value[1]</code></li> <li><code>pointerLeftIndex == pointerRightIndex - 1</code> We conclude using [[33. Search in Rotated Sorted Array#^9bc286|the analysis about the <code>sp</code> element before]] </li> </ol> <pre><code>from math import log, trunc\nfrom random import randint\nfrom typing import List\nclass Solution:\ndef findShiftPoint(self):\nshiftPoint = -1\nisFound = False\n# Python index is from 0 .. n-1\npointerLeftIndex = 0\npointerRightIndex = len(self.nums)\nMAX_CAP_BINARY_SEARCH = trunc(log(len(self.nums), 2))+1\nfor i in range(MAX_CAP_BINARY_SEARCH):\nmidIndex = (pointerLeftIndex + pointerRightIndex) // 2\nif pointerLeftIndex == midIndex:\nbreak\nif  self.nums[midIndex] &gt; self.nums[0]:\npointerLeftIndex = midIndex\nelse:\npointerRightIndex = midIndex\nif pointerLeftIndex+1 == pointerRightIndex:\nshiftPoint = len(self.nums)-1 - pointerLeftIndex\nisFound = True\nelse:\nraise \"Logic error, can't find shiftPoint in log(n) time\"\nreturn (shiftPoint, isFound)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/33.%20Search%20in%20Rotated%20Sorted%20Array/#binary-search-implemetaion", "title": "Binary search implemetaion", "text": "<p><code>O(log n)</code></p> <p>After found the shift point, we can treat <code>nums</code> as two <code>seperated</code> sorted array and we can use normal binary search to find the target on each one. <pre><code>    def binarySearch(self, startIndex,endIndex, target):\ntargetIndex, isFound = -1, False\nleft = startIndex-1\nright = endIndex +1\nMAX_CAP_BINARY_SEARCH = trunc(log(len(self.nums), 2))+1\nfor i in range(MAX_CAP_BINARY_SEARCH):\nmidIndex = (left + right) // 2\nif left == midIndex:\nbreak \nif self.nums[midIndex] &lt;= target:\nleft = midIndex\nelse:\nright = midIndex\nif left+1 == right:\ntargetIndex = left\nif startIndex &lt;= targetIndex &lt;= endIndex:\nisFound = self.nums[targetIndex] == target\nelse:\nraise \"Logic error, can't find targetIndex in log(n) times\"\nreturn (targetIndex, isFound)\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/33.%20Search%20in%20Rotated%20Sorted%20Array/#final-main-function", "title": "Final main function", "text": "<p><code>O(log n)</code></p> <p>Our final main function <code>search</code> procedure:</p> <ol> <li>Using <code>findShiftPoint</code> to find the shift point of the input array</li> <li>Using <code>binarySearch</code> to find the target in each sorted array</li> <li>If found the target, update <code>result</code> variable</li> <li>Return <code>result</code> </li> </ol> <pre><code>    def search(self, nums: List[int], target: int) -&gt; int:\nself.nums = nums\nself.target = target\nn = len(nums)\nresult = -1\nshiftPoint, isFound = self.findShiftPoint()\nif not isFound:\nraise \"can't find shift point, logic fail\"\ntargetIndex, isFound = self.binarySearch(0, n- shiftPoint -1, target)\nif isFound:\nresult = targetIndex\ntargetIndex, isFound = self.binarySearch(n- shiftPoint,n-1, target)\nif isFound:\nresult = targetIndex\nreturn result\n</code></pre> <p>You can test the function using this main function <pre><code>def main():\na = Solution()\n# Example 1:\n# Input\nnums = [4,5,6,7,0,1,2]\ntarget = 0\n# Output \nresult = 4\nprint (\"Test 1 is\", a.search(nums, target) == result)\n# Example 2:\n# Input: \nnums = [4,5,6,7,0,1,2]\ntarget = 3\n# Output:\nresult = -1\nprint (\"Test 2 is\", a.search(nums, target) == result)\n# Example 3:\n# Input: \nnums = [1]\ntarget = 0\n# Output: \nresult = -1\nprint (\"Test 3 is\", a.search(nums, target) == result)\n# Constraints test:\n# 1 &lt;= nums.length &lt;= 5000\n# -10**4 &lt;= nums[i] &lt;= 10**4\nnums = [i for i in range(5000)]\nshift = randint(0, 4999)\nnums = nums[shift:] + nums[:shift]\n# All values of nums are unique.\n# nums is an ascending array that is possibly rotated.\n# -10**4 &lt;= target &lt;= 10**4\ntarget = 30\nresult = (shift + target) % 5000\nprint (\"Test limit is OK\", a.search(nums, target) == result)\nif __name__ == \"__main__\":\nmain()\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/45.%20Jump%20Game%20II/", "title": "45. Jump Game II", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/45.%20Jump%20Game%20II/#problem", "title": "Problem", "text": "<p>You are given a 0-indexed array of integers <code>nums</code> of length <code>n</code>. You are initially positioned at <code>nums[0]</code>.</p> <p>Each element <code>nums[i]</code> represents the maximum length of a forward jump from index <code>i</code>. In other words, if you are at <code>nums[i]</code>, you can jump to any <code>nums[i + j]</code> where:</p> <ul> <li><code>0 &lt;= j &lt;= nums[i]</code> and</li> <li><code>i + j &lt; n</code></li> </ul> <p>Return the minimum number of jumps to reach <code>nums[n - 1]</code>. The test cases are generated such that you can reach <code>nums[n - 1]</code>.</p> <p>Example 1:</p> <p>Input: nums = [2,3,1,1,4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.</p> <p>Example 2:</p> <p>Input: nums = [2,3,0,1,4] Output: 2</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10**4</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> <li>It\u2019s guaranteed that you can reach <code>nums[n - 1]</code>.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/45.%20Jump%20Game%20II/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/45.%20Jump%20Game%20II/#water-falling", "title": "Water falling", "text": "<p><code>O(n)</code></p> <p>Following a minimized greedy/dynamic programming minimized path problem from graph.</p> <ul> <li>Calling the <code>minimum</code> array is to store the total minimal step needed to reach each element, <code>minimum[i]</code> correspond to <code>element[i]</code>. At first, <code>minimum</code> array isn\u2019t set, as none element is being processed.</li> <li>We start at <code>index=0</code>, cost <code>step=0</code> jump step. As we already start at the first element. This also mean we have <code>minimum[0] = 0</code></li> <li>From next, we start a loop<ul> <li>We find a element with index <code>pos</code> that have minimum <code>step</code> value, that is not visited/process</li> <li>Flag it as already visited</li> <li>Update all other element our current <code>pos</code> can jump into new minimum (<code>step + 1</code>) if it either uninitialized or it currently have a less optimal total of step need to jump into.</li> </ul> </li> </ul> <p>This is when I also realized we dealing with a serial of number, a special case of graph data:</p> <ul> <li>The minimum jump step to each element isn\u2019t change value after initialized.</li> </ul> <p>So that mean we can just skip most of the unnecessary loop to update the <code>minimum</code>.</p> <pre><code>class Solution:\ndef jump(self, nums: List[int]) -&gt; int:\nn = len(nums)\np = 0\nminimum = [-1] * n\nminimum[0] = 0\nq = [(0, 0)]\nwhile q:\npos, step = q.pop(0)\nfor npos in range(p, min(n, pos + nums[pos]+1)):\nif minimum[npos] == -1:\nminimum[npos] = step + 1\nq.append((npos, step + 1))\np = npos\nreturn minimum[-1]\n</code></pre> <p>So I calling it water fall basically because the height being collapsing all at once (this is visualization process on white board)</p> <p>Time complexity: <code>O(n)</code></p> <ul> <li>BFS: Each <code>minimum</code> is updated once, visited once;</li> <li>DP update loop: By updating temporary <code>p</code> pointer, the nested loop only run in total n times independent with the total time BFS queue call (thus not our time complexity isn\u2019t multiple to O(n^2) ). </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/46.%20Permutations/", "title": "46. Permutations", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "BFS", "python", "O(n!)"]}, {"location": "notes/Leetcode%2010-100/46.%20Permutations/#problem", "title": "Problem", "text": "<p>Given an array <code>nums</code> of distinct integers, return all the possible permutations. You can return the answer in any order.</p> <p>Example 1:</p> <p>Input: <code>nums = [1,2,3]</code> Output: <code>[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1|1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</code></p> <p>Example 2:</p> <p>Input: <code>nums = [0,1]</code> Output: <code>[[0,1],[1,0|0,1],[1,0]]</code></p> <p>Example 3:</p> <p>Input: <code>nums = [1]</code> Output: <code>[[1|1]]</code></p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 6</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li>All the integers of <code>nums</code> are unique.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "BFS", "python", "O(n!)"]}, {"location": "notes/Leetcode%2010-100/46.%20Permutations/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "BFS", "python", "O(n!)"]}, {"location": "notes/Leetcode%2010-100/46.%20Permutations/#dfs-or-bfs", "title": "DFS or BFS", "text": "<p><code>O(n!)</code></p> <p>Goes through each stage of the permutations until we using all available number in <code>nums</code> array</p> <pre><code>from typing import List\nclass Solution:\ndef dfs(self, lastArray, adjNode):\nresult = []\nif len(adjNode) == 0:\nresult = lastArray\nreturn [result]\nfor node in adjNode:\nnewArray = lastArray + [node]\nnewAdjNode = adjNode - set([node])\nresult = result + self.dfs(newArray, newAdjNode)\nreturn result\ndef permute(self, nums: List[int]) -&gt; List[List[int]]:\nreturn self.dfs([], set(nums))\n</code></pre> <p>To test above code: <pre><code>def test():\na = Solution()\n# Example 1:\nnums = [1,2,3]\nresult = [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1|1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\nprint(\"Test 1 is\", result == a.permute(nums))\n# Example 2:\nnums = [0,1]\nresult = [[0,1],[1,0|0,1],[1,0]]\nprint(\"Test 2 is\", result == a.permute(nums))\n# Example 3:\nnums = [1]\nresult = [[1|1]]\nprint(\"Test 3 is\", result == a.permute(nums))\nif __name__ == \"__main__\":\ntest()\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "BFS", "python", "O(n!)"]}, {"location": "notes/Leetcode%2010-100/46.%20Permutations/#reuse-global-variable", "title": "Reuse global variable", "text": "<p><code>O(n!)</code></p> <p>Taking approach from 77. Combinations, we can try reuse some of our created array to make the code run faster, while minimize total <code>for loop</code></p> <pre><code>class Solution:\ndef permute(self, nums: List[int]) -&gt; List[List[int]]:\npath = []\ndef helper(words):\nif len(words) == 1:\nreturn [path+list(words)]\nresult = []\nt = words.copy()\nfor i in words:\npath.append(i)\nt.remove(i)\nresult += helper(t)\nt.add(i)\npath.pop()\nreturn result\nreturn helper(set(nums))\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "BFS", "python", "O(n!)"]}, {"location": "notes/Leetcode%2010-100/50.%20Pow%28x%2C%20n%29/", "title": "50. Pow(x, n)", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "recusion", "python", "c", "bit_manipulation", "O(log n)", "O(1)"]}, {"location": "notes/Leetcode%2010-100/50.%20Pow%28x%2C%20n%29/#problem", "title": "Problem", "text": "<p>Implement pow(x, n), which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>xn</code>).</p> <p>Example 1:</p> <p>Input: x = 2.00000, n = 10 Output: 1024.00000</p> <p>Example 2:</p> <p>Input: x = 2.10000, n = 3 Output: 9.26100</p> <p>Example 3:</p> <p>Input: x = 2.00000, n = -2 Output: 0.25000 Explanation: 2-2 = 1/22 = 1/4 = 0.25</p> <p>Constraints:</p> <ul> <li><code>-100.0 &lt; x &lt; 100.0</code></li> <li><code>-231 &lt;= n &lt;= 231-1</code></li> <li><code>n</code> is an integer.</li> <li>Either <code>x</code> is not zero or <code>n &gt; 0</code>.</li> <li><code>-10**4 &lt;= xn &lt;= 10**4</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "recusion", "python", "c", "bit_manipulation", "O(log n)", "O(1)"]}, {"location": "notes/Leetcode%2010-100/50.%20Pow%28x%2C%20n%29/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "recusion", "python", "c", "bit_manipulation", "O(log n)", "O(1)"]}, {"location": "notes/Leetcode%2010-100/50.%20Pow%28x%2C%20n%29/#use-built-in-function", "title": "Use built-in function", "text": "<p><code>O(log n)</code></p> <pre><code>class Solution(object):\ndef myPow(self, x, n):\nreturn pow(x,n)\n# return x ** n\n</code></pre> <pre><code>double myPow(double x, int n){\nreturn pow(x,n);\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "recusion", "python", "c", "bit_manipulation", "O(log n)", "O(1)"]}, {"location": "notes/Leetcode%2010-100/50.%20Pow%28x%2C%20n%29/#actually-doing-some-thing", "title": "Actually doing some thing", "text": "<p>Basically, we can use the following recursive formula to calculate <code>x^n</code> efficiently: <code>pow(x,n) = pow(x,n/2) * pow(x,n/2) * pow(x,n%2)</code></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "recusion", "python", "c", "bit_manipulation", "O(log n)", "O(1)"]}, {"location": "notes/Leetcode%2010-100/50.%20Pow%28x%2C%20n%29/#python", "title": "python", "text": "<p><code>O(log n)</code></p> <p>There isn\u2019t anything stop python from working</p> <ul> <li>Implement the function directly using recursion</li> <li> <p>Case n &lt; 0: we just need to change our <code>x = 1/x</code> and can safely clear <code>n</code> sign; Keep in mind that when x == 0, this can throw error.  <pre><code>class Solution:\ndef myPow(self, x: float, n: int, cache = None) -&gt; float:\nif n ==0 :\nreturn 1\nif n &lt;0 :\nreturn self.myPow(1/x,-n)\nif n%2 == 0:\nreturn self.myPow(x, n//2) **2\nelse:\nreturn x * self.myPow(x,n//2)**2\n</code></pre></p> </li> <li> <p>The above code could re-calculate some <code>pow()</code>, to avoiding this, we can add a <code>cache</code> array. <pre><code>class Solution:\ndef myPow(self, x: float, n: int, cache = None) -&gt; float:\nif x == 0.:\nreturn 0\nif cache is None:\ncache = {}\ncache[0] = 1.\ncache[1] = x\nif x != 0:\ncache[-1] = 1./x\nif n in cache:\nreturn cache[n]\ncache[n] = self.myPow(x, n//2, cache) * self.myPow(x, n//2, cache)* self.myPow(x, n%2, cache)\nreturn cache[n]\n</code></pre></p> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "recusion", "python", "c", "bit_manipulation", "O(log n)", "O(1)"]}, {"location": "notes/Leetcode%2010-100/50.%20Pow%28x%2C%20n%29/#c-language", "title": "C language", "text": "<p><code>O(1)</code></p> <p>Using the same logic, but there is some thing to consider:</p> <ul> <li>We can\u2019t just revert the sign of a number, as <code>int</code> value have 32 bit, which  <code>MAX_INT == 2**31</code> and <code>MIN_INT == 2**31 - 1</code> (because of <code>0</code>) </li> <li>C not have <code>dict()</code> by default and we also don\u2019t want to create a large <code>[-2*32..2*32-1]</code> array. While this can be overcome with Hash functions, we can store only <code>[x**(2**0), x**(2**1), ..., x**(2**32)]</code> </li> <li>A number <code>n</code> is presented using binary; which mean, by using bit manipulation, we can easily split-ed <code>n</code>  to sum of = <code>(1 or 0) * 2**0 + (1 or 0) * 2**1 + ... + (1 or 0) 2 ** 32</code>. Leverage: <code>x**n = x ** (&lt;splited number which total = n&gt;)</code>. We can using this <code>binary</code> split instead of divine by 2 like python.</li> <li> <p>Here is the Try to match Python function <pre><code>double cache[32];\ndouble myPow(double x, int n){\nlong tmp_n = n;\nif (x == 0.)\nreturn 0;\nif (tmp_n &lt; 0) {\ntmp_n = -tmp_n;\nx = 1./x;\n}\ncache[0] = x;\ndouble answer = 1.;\nfor (int i = 0; i &lt; 32 || tmp_n &gt; 0; i++) {\nbool flag = tmp_n &amp; 1;\ntmp_n = tmp_n &gt;&gt; 1;\nif (i &gt; 0)\ncache[i] = cache[i-1] * cache[i-1];\nif (flag)\nanswer *= cache[i];\n}\nreturn answer;\n}\n</code></pre></p> </li> <li> <p>As we only need <code>cache[i-1]</code>, we not even need <code>cache</code> in the fist place;</p> </li> <li>The way to handle n &lt; 0 can be optimize more, instead of large the variable with 64 bit long integer.<ul> <li>In C, negative number is representing in <code>~ &lt;unsign&gt; +1</code>, which mean flipping all bit in unsigned number and then plus <code>1</code> (example <code>0001</code> become <code>1110 + 1 = 1111</code>)</li> <li>We can use this instead of <code>n = -n</code> bit flip which could result an out of memory scope error.</li> <li>We handle the separated plus <code>1</code> directly in case of <code>n &lt; 0</code> <pre><code>double myPow(double x, int n){\nif (x == 0.)\nreturn 0;\ndouble answer = 1.;\nbool flag = n &lt; 0;\nif (flag) {\nanswer /= x;\nn = ~n;\n}\nfor (;;) {\nif (n &amp; 1) {\nif (flag)\nanswer /= x;\nelse\nanswer *= x;\n}\nn = n &gt;&gt; 1;\nif (!n)\nbreak;\nx = x * x;\n}\nreturn answer;\n}\n</code></pre></li> </ul> </li> </ul> <p>Or this, separating <code>n == 0; n &gt; 0; and n &lt; 0</code> also work: <pre><code>double myPow(double base, int exp)\n{\ndouble result = 1;\nif (base == 0) return 0;\nif (exp &gt; 0)\nfor (;;) {\nif (exp &amp; 1)\nresult *= base;\nexp &gt;&gt;= 1;\nif (!exp)\nbreak;\nbase *= base;\n}\nelse if (exp &lt; 0) {\nexp = ~(exp);\nresult /= base;\nfor (;;) {\nif (exp &amp; 1)\nresult /= base;\nexp &gt;&gt;= 1;\nif (!exp)\nbreak;\nbase *= base;\n}\n}\nreturn result;\n}\n</code></pre></p> <p>Compiler optimized will help us to minimal the Assembly code in any way; Also, using C we can some how have an optimized function that can process on pair with provided standards <code>pow(x,n)</code> built-in the language, which take <code>0ms</code> to run.</p> <p>Time complexity:</p> <ul> <li>This cost a fixed for loop 32 times, which we can consider it as O(1) run time.</li> <li>But, we also can consider this O(log n) time, as it could be better in the second implementation.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "recusion", "python", "c", "bit_manipulation", "O(log n)", "O(1)"]}, {"location": "notes/Leetcode%2010-100/55.%20Jump%20Game/", "title": "55. Jump Game", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "dynamic_programing", "O(n)"]}, {"location": "notes/Leetcode%2010-100/55.%20Jump%20Game/#problem", "title": "Problem", "text": "<p>You are given an integer array <code>nums</code>. You are initially positioned at the array\u2019s first index, and each element in the array represents your maximum jump length at that position.</p> <p>Return <code>true</code> if you can reach the last index, or <code>false</code> otherwise.</p> <p>Example 1:</p> <p>Input: nums = [2,3,1,1,4] Output: true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</p> <p>Example 2:</p> <p>Input: nums = [3,2,1,0,4] Output: false Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10**4</code></li> <li><code>0 &lt;= nums[i] &lt;= 10**5</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "dynamic_programing", "O(n)"]}, {"location": "notes/Leetcode%2010-100/55.%20Jump%20Game/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "dynamic_programing", "O(n)"]}, {"location": "notes/Leetcode%2010-100/55.%20Jump%20Game/#dynamic-programming-from-top-down", "title": "Dynamic programming from top down", "text": "<p><code>O(n)</code></p> <p>It seem go backward is easier, as you have more information calculated than jump forward blindly</p> <ul> <li>If you go backward, and found out you can\u2019t find a good standing point to jump to the position you standing at, it mean we could just stop and return False </li> <li>We can skip some standing point if there is a better one that can jump our current end point.</li> </ul> <pre><code>from random import randint\nfrom typing import List\nclass Solution:\ndef canJump(self, nums: List[int]) -&gt; bool:\ncheckCanJump = True\nlastIndex = len(nums) - 1\nstartingPoint = 0\ncanBeSkip = [False]* len(nums)\nfor jumpEndPoint in range(lastIndex, -1, -1):\nif jumpEndPoint == startingPoint:\nbreak\nif canBeSkip[jumpEndPoint]:\ncontinue\nneededJumpLength = 1\nstandingPoint = jumpEndPoint\nfor standingPoint in range(jumpEndPoint-1, -1, -1):\nif nums[standingPoint] &gt;= neededJumpLength:\nbreak\nneededJumpLength += 1\ncanBeSkip[jumpEndPoint] = True\nif nums[standingPoint] &lt; neededJumpLength:\ncheckCanJump = False\nbreak\nreturn checkCanJump \n</code></pre> <p>This is some test for the problem <pre><code>def test():\na = Solution()\n# Example 1\nnums = [2,3,1,1,4]\nOutput = True\nresult = a.canJump(nums)\nprint(\"Test 1 is\", Output == result)\n# Example 2\nnums = [3,2,1,0,4]\nOutput = False\nresult = a.canJump(nums)\nprint(\"Test 2 is\", Output == result)\n# Example 3\nnums = [3]\nOutput = True\nresult = a.canJump(nums)\nprint(\"Test 3 is\", Output == result)\n# Example 4\nnums = [0]\nOutput = True\nresult = a.canJump(nums)\nprint(\"Test 4 is\", Output == result)\n# Example 5\nnums = [2,0]\nOutput = True\nresult = a.canJump(nums)\nprint(\"Test 5 is\", Output == result)\n# Constraints\n# 1 &lt;= nums.length &lt;= 10**4\n# 0 &lt;= nums[i] &lt;= 10**5\nnums = [randint(0,10**5) for i in range(10**4)]\nOutput = True               # Pretty much\nresult = a.canJump(nums)\nprint(\"Test time limit is OK\")\nif __name__ == \"__main__\":\ntest()\n</code></pre></p> <p>Time complexity: O(n)</p> <ul> <li>Two loop run independently (even if it nested loop) </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "dynamic_programing", "O(n)"]}, {"location": "notes/Leetcode%2010-100/62.%20Unique%20Paths/", "title": "62. Unique Paths", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/62.%20Unique%20Paths/#problem", "title": "Problem", "text": "<p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the top-left corner (i.e., <code>grid[0][0]</code>). The robot tries to move to the bottom-right corner (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p> <p>Given the two integers <code>m</code> and <code>n</code>, return the number of possible unique paths that the robot can take to reach the bottom-right corner.</p> <p>The test cases are generated so that the answer will be less than or equal to <code>2 * 10**9</code>.</p> <p>Example 1:</p> <p></p> <p>Input: m = 3, n = 7 Output: 28</p> <p>Example 2:</p> <p>Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</p> <ol> <li>Right -&gt; Down -&gt; Down</li> <li>Down -&gt; Down -&gt; Right</li> <li>Down -&gt; Right -&gt; Down</li> </ol> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 100</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/62.%20Unique%20Paths/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/62.%20Unique%20Paths/#dynamic-programming", "title": "Dynamic programming", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/62.%20Unique%20Paths/#bottom-up-loop", "title": "Bottom up loop", "text": "<p>We can spot a Recursive formulation, that we can calculate later answer by combining previous result uniquePaths:</p> <pre><code>uniquePaths(m, n) = uniquePaths(m-1, n) + uniquePaths(m, n-1)\n</code></pre> <p>With the most basic answer:</p> <pre><code>uniquePaths(1, 1) = 1\n</code></pre> <p>The final implement:</p> Time Submitted Status Runtime Memory Language 09/03/2023 11:19 Accepted 38 ms 16.4 MB python3 <pre><code>class Solution:\ndef uniquePaths(self, m: int, n: int) -&gt; int:\ncacheUniquePaths = [[0 for j in range(n+1)] for i in range(m+1)]\nfor rowID in range(m):\nfor columnID in range(n):\nif rowID == columnID == 0:\ncacheUniquePaths[0][0] = 1\ncontinue\ncurrentUniquePath = 0\naboveBlockUniquePath = 0\nif rowID &gt;= 1:\naboveBlockUniquePath = cacheUniquePaths[rowID-1][columnID]\ncurrentUniquePath += aboveBlockUniquePath\nbeforeBlockUniquePath = 0\nif columnID &gt;= 1:\nbeforeBlockUniquePath = cacheUniquePaths[rowID][columnID-1]\ncurrentUniquePath += beforeBlockUniquePath\ncacheUniquePaths[rowID][columnID] = currentUniquePath\nreturn cacheUniquePaths[m-1][n-1]\n</code></pre> <p>We can local test using this main function</p> <pre><code>def test():\na  = Solution()\n# Example 1:\nm = 3\nn = 7\nresult = 28\nout = a.uniquePaths(m,n)\nprint(\"Test 1 is\", out == result)\n# Example 2:\nm = 3\nn = 2\nresult = 3\nout = a.uniquePaths(m,n)\nprint(\"Test 2 is\", out == result)\n# Example 3:\nm = 1\nn = 1\nresult = 1\nout = a.uniquePaths(m,n)\nprint(\"Test 3 is\", out == result)\nif __name__ == \"__main__\":\ntest()\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/63.%20Unique%20Paths%20II/", "title": "63. Unique Paths II", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "java", "array", "dynamic_programing", "O(n ** 2)"]}, {"location": "notes/Leetcode%2010-100/63.%20Unique%20Paths%20II/#problem", "title": "Problem", "text": "<p>You are given an <code>m x n</code> integer array <code>grid</code>. There is a robot initially located at the top-left corner (i.e., <code>grid[0][0]</code>). The robot tries to move to the bottom-right corner (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p> <p>An obstacle and space are marked as <code>1</code> or <code>0</code> respectively in <code>grid</code>. A path that the robot takes cannot include any square that is an obstacle.</p> <p>Return the number of possible unique paths that the robot can take to reach the bottom-right corner.</p> <p>The test cases are generated so that the answer will be less than or equal to <code>2 * 10**9</code>.</p> <p>Example 1:</p> <p></p> <p>Input: obstacleGrid = <code>[[0,0,0],[0,1,0],[0,0,0|0,0,0],[0,1,0],[0,0,0]]</code> Output: 2 Explanation: There is one obstacle in the middle of the 3x3 grid above. There are two ways to reach the bottom-right corner:</p> <ol> <li>Right -&gt; Right -&gt; Down -&gt; Down</li> <li>Down -&gt; Down -&gt; Right -&gt; Right</li> </ol> <p>Example 2:</p> <p></p> <p>Input: obstacleGrid = <code>[[0,1],[0,0|0,1],[0,0]]</code> Output: 1</p> <p>Constraints:</p> <ul> <li><code>m == obstacleGrid.length</code></li> <li><code>n == obstacleGrid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>obstacleGrid[i][j]</code> is <code>0</code> or <code>1</code>.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "java", "array", "dynamic_programing", "O(n ** 2)"]}, {"location": "notes/Leetcode%2010-100/63.%20Unique%20Paths%20II/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "java", "array", "dynamic_programing", "O(n ** 2)"]}, {"location": "notes/Leetcode%2010-100/63.%20Unique%20Paths%20II/#dynamic-programming", "title": "Dynamic programming", "text": "<p><code>O(n ** 2)</code></p> <p>By using this information: </p> <p>The robot can only move either down or right at any point in time.</p> <p>We can use this formula to calculate the total bot path, adding up the possibility in go down and go right movement of the bot: <pre><code>totalPath[x][y] = totalPath[x-1][y] + totalPath[x][y-1] </code></pre></p> <p>Final implementation look like this <pre><code>int uniquePathsWithObstacles(int** obstacleGrid, int obstacleGridSize, int* obstacleGridColSize){\nint path[obstacleGridSize][*obstacleGridColSize];\npath[0][0] = !obstacleGrid[0][0];\nfor (int i = 0; i &lt; obstacleGridSize; i ++)\nfor (int j = 0; j &lt; *obstacleGridColSize; j++) {\nif (i == j &amp;&amp; j == 0) continue;\npath[i][j] = 0;\nif (obstacleGrid[i][j] == 1) continue;\nif (i &gt; 0)\npath[i][j] += path[i-1][j];\nif (j &gt; 0)\npath[i][j] += path[i][j-1];\n}\nreturn path[obstacleGridSize-1][*obstacleGridColSize-1];\n}\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "java", "array", "dynamic_programing", "O(n ** 2)"]}, {"location": "notes/Leetcode%2010-100/63.%20Unique%20Paths%20II/#comparison", "title": "Comparison", "text": "Time Submitted Status Runtime Memory Language 08/12/2023 15:31 Accepted 0 ms 40.8 MB java 08/12/2023 15:29 Accepted 1 ms 2 MB rust 08/12/2023 14:57 Accepted 4 ms 6.1 MB c 08/12/2023 14:48 Accepted 60 ms 16.2 MB python3 <ul> <li> <p><code>java</code>: While we can direct transfer  <code>path[0][0] = obstacleGrid[0][0] ^ 1</code> , here I try inline if <pre><code>class Solution {\npublic int uniquePathsWithObstacles(int[][] obstacleGrid) {\nint m = obstacleGrid.length;\nint n = obstacleGrid[0].length;\nint[][] path = new int[obstacleGrid.length][obstacleGrid[0].length];\npath[0][0] = (obstacleGrid[0][0] == 0) ? 1 : 0;\nfor (int i = 0; i &lt; m; i ++)\nfor (int j = 0; j &lt; n; j++) {\nif (obstacleGrid[i][j] == 1) continue;\nif (i &gt; 0)\npath[i][j] += path[i-1][j];\nif (j &gt; 0)\npath[i][j] += path[i][j-1];\n}\nreturn path[m-1][n-1];\n}\n}\n</code></pre></p> </li> <li> <p><code>c): Randomly with time to complete the problem (it should always be</code>0ms<code>imo), but it quite nice to have</code>1, 0 -&gt; 0, 1<code>convert using</code>!<code>(</code>not<code>logical operand</code> <code>path[0][0] = !obstacleGrid[0][0];</code> Also, i don\u2019t used <code>memset</code> to initialized <code>path = {0}</code> </p> </li> <li> <p><code>python): I just directly convert using</code>int(`` value <pre><code>class Solution:\ndef uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -&gt; int:\nm = len(obstacleGrid)\nn = len(obstacleGrid[0])\npath = [[0] * n for _ in range(m)]\npath[0][0] = int(obstacleGrid[0][0] == 0)\nfor i in range(m):\nfor j in range(n):\nif i == j == 0 or obstacleGrid[i][j] == 1:\ncontinue\nif i &gt; 0:\npath[i][j] += path[i-1][j]\nif j &gt; 0:\npath[i][j] += path[i][j-1]\nreturn path[m-1][n-1]\n</code></pre> <li> <p><code>rust): feel like java code, nothing fancy (while I do have to go back and remove some unused code in</code>java<code>solution to match</code>rust<code>version</code> <pre><code>impl Solution {\npub fn unique_paths_with_obstacles(obstacle_grid: Vec&lt;Vec&lt;i32&gt;&gt;) -&gt; i32 {\nlet m = obstacle_grid.len();\nlet n = obstacle_grid[0].len();\nlet mut path = vec![vec![0; n]; m];\npath[0][0] = obstacle_grid[0][0] ^ 1;\nfor i in 0..m {\nfor j in 0..n {\nif obstacle_grid[i][j] == 1 {\ncontinue;\n}\nif i &gt; 0 {\npath[i][j] += path[i - 1][j];\n}\nif j &gt; 0 {\npath[i][j] += path[i][j - 1];\n}\n}\n}\npath[m - 1][n - 1]\n}\n}\n</code></pre></p> </li>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "java", "array", "dynamic_programing", "O(n ** 2)"]}, {"location": "notes/Leetcode%2010-100/74.%20Search%20a%202D%20Matrix/", "title": "74. Search a 2D Matrix", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "python", "heap_c_lang", "stack_c_lang", "runtime_memory_alocation", "binary_search", "array", "matrix", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/74.%20Search%20a%202D%20Matrix/#problem", "title": "Problem", "text": "<p>You are given an <code>m x n</code> integer matrix <code>matrix</code> with the following two properties:</p> <ul> <li>Each row is sorted in non-decreasing order.</li> <li>The first integer of each row is greater than the last integer of the previous row.</li> </ul> <p>Given an integer <code>target</code>, return <code>true</code> if <code>target</code> is in <code>matrix</code> or <code>false</code> otherwise.</p> <p>You must write a solution in <code>O(log(m * n))</code> time complexity.</p> <p>Example 1: <pre><code>**Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60|1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n**Output:** true\n</code></pre> Example 2: <pre><code>**Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60|1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n**Output:** false\n</code></pre></p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>-10**4 &lt;= matrix[i][j], target &lt;= 10**4</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "python", "heap_c_lang", "stack_c_lang", "runtime_memory_alocation", "binary_search", "array", "matrix", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/74.%20Search%20a%202D%20Matrix/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "python", "heap_c_lang", "stack_c_lang", "runtime_memory_alocation", "binary_search", "array", "matrix", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/74.%20Search%20a%202D%20Matrix/#binary-searching", "title": "Binary searching", "text": "<p><code>O(log n)</code></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "python", "heap_c_lang", "stack_c_lang", "runtime_memory_alocation", "binary_search", "array", "matrix", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/74.%20Search%20a%202D%20Matrix/#takeaway", "title": "Takeaway", "text": "<p>Just take the two dimension array as one dimension (Which c naively support with its <code>stack</code> base memory allocate). </p> <ul> <li>Allocating <code>matrix[m][n]</code> is equally allocating <code>matrix[m*n]</code></li> <li>Which: <code>matrix[x][y] = (int) *(matrix + x) +y) = (int) matrix[x*n+y]</code> </li> <li>Still, the implementation in Leetcode using heap allocation </li> </ul> <pre><code>bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target){\nint m = matrixSize;\nint n = *matrixColSize;\nfor (int i = 0; i &lt; n * m; i++){\nint* ptr = *(matrix + i/n) + i%n;\nif (i&gt;0 &amp;&amp; i%n==0) printf(\"\\n\");\nprintf(\"%p \", ptr);\n}\nreturn false;\n}\n</code></pre> <p>By checking with this code <code>stdout</code> give me this <code>[input]</code> <pre><code>[[1,3,5,7],[10,11,16,20],[23,30,34,60|1,3,5,7],[10,11,16,20],[23,30,34,60]]  \n3\n</code></pre></p> <p><code>[stdout]</code> <pre><code>0x602000000030 0x602000000034 0x602000000038 0x60200000003c  \n0x602000000050 0x602000000054 0x602000000058 0x60200000005c  \n0x602000000070 0x602000000074 0x602000000078 0x60200000007c\n</code></pre></p> <p>Which mean, it not possible using the array directly by pointer or <code>(int) *(matrix + x) +y) != (int) *matrix + x*n +y</code></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "python", "heap_c_lang", "stack_c_lang", "runtime_memory_alocation", "binary_search", "array", "matrix", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/74.%20Search%20a%202D%20Matrix/#actual-implementation", "title": "Actual implementation", "text": "<p><code>O(log n)</code></p> <p>I like to use binary search that the start of <code>left</code>, <code>right</code> is not in the array, example:</p> <ul> <li>An array <code>matrix</code> that span over <code>[0..=n]</code> range (inclusive), <code>left, right = -1, n+1</code></li> <li>So when calculating <code>mid=(left+right)//2</code>, we can landing <code>mid</code> in any number in <code>[-1..=n+1]</code> range. Giving me a easier way  to controlling where <code>left</code> and <code>right</code> end up.</li> <li>The search function always end with <code>left == mid == right -1</code>.</li> </ul> <p>While this isn\u2019t necessary in this exact problem, but here I trying land <code>matrix[left] &lt;= target &lt; matrix[right]</code> (and by the break stop definition, we also have <code>left = right -1 = mid = (left + right) // 2</code>). So:</p> <ul> <li>If <code>matrix[left] != matrix[target]</code>, there isn\u2019t any thing in the <code>matrix</code> equal to <code>target</code> (as there isn\u2019t any element between <code>maxtrix[left..right]</code> ), return <code>False</code></li> <li>If <code>matrix[left] == matrix[target]</code>, we found <code>target</code>, return <code>True</code> <pre><code>class Solution:\ndef searchMatrix(self, matrix: List[List[int]], target: int) -&gt; bool:\nm = len(matrix)\nn = len(matrix[0])\nl = -1\nr = m*n\nfor _ in range(trunc(log(n*m, 2)) +1):\nmid = (l + r) // 2\nif mid == l:\nbreak\nif matrix[mid//n][mid%n] &lt;= target:\nl = mid\nelse:\nr = mid\nif matrix[l//n][l%n] == target:\nreturn True\nreturn False\n</code></pre></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "python", "heap_c_lang", "stack_c_lang", "runtime_memory_alocation", "binary_search", "array", "matrix", "O(log n)"]}, {"location": "notes/Leetcode%2010-100/77.%20Combinations/", "title": "77. Combinations", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "recusion", "O(n!)"]}, {"location": "notes/Leetcode%2010-100/77.%20Combinations/#problem", "title": "Problem", "text": "<p>Given two integers <code>n</code> and <code>k</code>, return all possible combinations of <code>k</code> numbers chosen from the range <code>[1, n]</code>.</p> <p>You may return the answer in any order.</p> <p>Example 1:</p> <p>Input: <code>n = 4, k = 2</code> Output: <code>[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4|1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]</code> Explanation: There are 4 choose 2 = 6 total combinations. Note that combinations are unordered, i.e., <code>[1,2]</code> and <code>[2,1]</code> are considered to be the same combination.</p> <p>Example 2:</p> <p>Input: <code>n = 1, k = 1</code> Output: <code>[[1|1]]</code> Explanation: There is 1 choose 1 = 1 total combination.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>1 &lt;= k &lt;= n</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "recusion", "O(n!)"]}, {"location": "notes/Leetcode%2010-100/77.%20Combinations/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "recusion", "O(n!)"]}, {"location": "notes/Leetcode%2010-100/77.%20Combinations/#recursion", "title": "Recursion", "text": "<p><code>O(n!)</code></p> <p>Solve any combine <code>(n,k)</code> using the \u201cbefore\u201d combine <code>(n-1,k-1)</code></p> <ul> <li>Introducing <code>words</code> array to keep the available words list we can use to create our combination</li> <li>If any <code>k == 1</code>, we can safely return all member of remaining words lists</li> <li><code>n</code> should always large than  <pre><code>class Solution:\ndef combine(self, n: int, k: int, words = None) -&gt; List[List[int]]:\nif words is None:\nwords = [i for i in range(1,n+1)]\nif n &lt; k:\nreturn [[|]]\nif n &gt;= 1 and k == 1:\nreturn [[i] for i in words]\nresult = []\nfor i in range(len(words)):\nif n-1 &gt;= len(words[i+1:]):\nc = self.combine(n-1, k-1, words[i+1:])\nfor l in c:\nresult.append([words[i]]+l)\nreturn result\n</code></pre></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "recusion", "O(n!)"]}, {"location": "notes/Leetcode%2010-100/77.%20Combinations/#optimized", "title": "Optimized", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "recusion", "O(n!)"]}, {"location": "notes/Leetcode%2010-100/77.%20Combinations/#reuse-path-and-use-number-representation", "title": "Reuse path and Use number representation", "text": "<p><code>O(n!)</code></p> <pre><code>class Solution:\ndef combine(self, n: int, k: int) -&gt; List[List[int]]:\nwords = n+1\ndef helper(n, k, pos = 1, path = []):\nif n &lt; k:\nreturn [[|]]\nif n &gt;= 1 and k == 1:\nreturn [path + [i] for i in range(pos, words)]\nresult = []\nfor i in range(pos, words):\nif n &gt;= words - i:\nresult += helper(n-1, k-1, i+1, path + [i])\nelse:\nbreak\nreturn result\nreturn helper(n,k)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "recusion", "O(n!)"]}, {"location": "notes/Leetcode%2010-100/77.%20Combinations/#global-path", "title": "Global path", "text": "<p><code>O(n!)</code></p> <pre><code>class Solution:\ndef combine(self, n: int, k: int) -&gt; List[List[int]]:\nwords = n+1\npath = []\ndef helper(level, pos = 1):\nif level == 1:\nreturn [path + [i] for i in range(pos, words)]\nresult = []\nfor i in range(pos, words-level+1):\npath.append(i)\nresult += helper(level-1, i+1)\npath.pop()\nreturn result\nreturn helper(k)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "recusion", "O(n!)"]}, {"location": "notes/Leetcode%2010-100/80.%20Remove%20Duplicates%20from%20Sorted%20Array%20II/", "title": "80. Remove Duplicates from Sorted Array II", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "python", "java", "array", "O(n)"]}, {"location": "notes/Leetcode%2010-100/80.%20Remove%20Duplicates%20from%20Sorted%20Array%20II/#problem", "title": "Problem", "text": "<p>Given an integer array <code>nums</code> sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.</p> <p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code> should hold the final result. It does not matter what you leave beyond the first <code>k</code> elements.</p> <p>Return <code>k</code> after placing the final result in the first <code>k</code> slots of <code>nums</code>.</p> <p>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</p> <p>Custom Judge:</p> <p>The judge will test your solution with the following code: <pre><code>int[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\nint k = removeDuplicates(nums); // Calls your implementation\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\nassert nums[i] == expectedNums[i];\n}\n</code></pre> If all assertions pass, then your solution will be accepted.</p> <p>Example 1:</p> <p>Input: nums = <code>[1,1,1,2,2,3]</code> Output: 5, nums = <code>[1,1,2,2,3,_]</code> Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively. It does not matter what you leave beyond the returned k (hence they are underscores).</p> <p>Example 2:</p> <p>Input: nums = <code>[0,0,1,1,1,1,2,3,3]</code> Output: 7, nums = <code>[0,0,1,1,2,3,3,_,_]</code> Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively. It does not matter what you leave beyond the returned k (hence they are underscores).</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10**4</code></li> <li><code>-10**4 &lt;= nums[i] &lt;= 10**4</code></li> <li><code>nums</code> is sorted in non-decreasing order.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "python", "java", "array", "O(n)"]}, {"location": "notes/Leetcode%2010-100/80.%20Remove%20Duplicates%20from%20Sorted%20Array%20II/#solve", "title": "Solve", "text": "<pre><code>from collections import defaultdict\nclass Solution:\ndef removeDuplicates(self, nums: List[int]) -&gt; int:\n# return self.counting(nums)\nreturn self.sliding(nums)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "python", "java", "array", "O(n)"]}, {"location": "notes/Leetcode%2010-100/80.%20Remove%20Duplicates%20from%20Sorted%20Array%20II/#counting", "title": "Counting", "text": "<p><code>O(n)</code></p> <p>A normal loop through all available number in <code>nums</code> array, I keep a cache that store total appearance on all of the number.</p> <p>With that, I then adding the number in to <code>nums</code> array base on how many times they appear</p> <pre><code>    def counting(self, nums):\ncount = defaultdict(int)\nfor n in nums:\ncount[n] += 1\na = list(count.keys())\na.sort()\nindex = 0\nfor k in a:\nif count[k] &gt;= 2:\nnums[index] = nums[index+1] = k\nindex += 2\nelif count[k] == 1:\nnums[index] = k\nindex += 1\nfor i in range(index, len(nums)):\nnums.pop()\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "python", "java", "array", "O(n)"]}, {"location": "notes/Leetcode%2010-100/80.%20Remove%20Duplicates%20from%20Sorted%20Array%20II/#sliding-pointer", "title": "Sliding pointer", "text": "<p><code>O(n)</code></p> <p>Using the above counting method, we isn\u2019t consider the array is  sorted in non-decreasing order: Equal number is right next each other. So, we only need to check the next following number on every number <code>value</code> change to count total appearance of <code>value</code>. </p> <p>Which mean, we can effectively update the <code>nums</code> array by using two <code>index</code>, <code>faster</code> pointer, follow 3 rules:</p> <ul> <li>A base <code>index</code> pointer, which point to the need to be update <code>nums</code></li> <li><code>index</code> pointer only change to next one, unless it\u2019s correspond <code>nums</code> array value is update to the correct value.</li> <li>A <code>faster</code> pointer, which is the current <code>nums</code> we process.</li> </ul> <p>Because <code>index</code> increase slower than <code>faster</code> pointer, we can store directly into <code>nums</code> array without losing any unprocessed data </p> <pre><code>    def sliding(self, nums):\nindex, faster = 0, 0\ncount = 0\nvalue = None\nfor i, n in enumerate(nums):\nif i == 0:\nindex, faster = 0, 0\nvalue = n\ncount = 1\ncontinue\nif n == value:\ncount += 1\nelse:\nvalue = n\ncount = 1\nif count &lt;= 2:\nindex += 1\nfaster += 1\nnums[index] = nums[faster]\nfor i in range(index+1, len(nums)):\nnums.pop()\n</code></pre> <p>By keeping track of total appearance of current number (<code>value</code>) using <code>count</code>. We make sure update the <code>nums</code> less than or equal 2 times each number  </p> <p>I also convert it to <code>c</code> code and <code>java</code> code:</p> <ul> <li>In <code>c</code> code, i try using a <code>boolean</code> instead of <code>int</code>, as count only in the value of <code>1</code> or <code>2</code> in the first implementation</li> <li> <p>I also using initiation directly to process the first index of number, skip it on the next for loop  <pre><code>int removeDuplicates(int* nums, int numsSize){\nint index = 0;\nbool count = false;\nint value = nums[0];\nfor (int i = 1; i &lt; numsSize; i++){\nif (nums[i] == value){\nif (!count) index ++;\ncount = true;\n} else {\nvalue = nums[i];\nindex ++;\ncount = false;\n}\nnums[index] = nums[i];\n}\nreturn index+1;\n}\n</code></pre></p> </li> <li> <p>But in <code>java</code>, i can\u2019t seep to find way to slice the array, so I just leave it like this instead <pre><code>class Solution {\npublic int removeDuplicates(int[] nums) {\nint index = -1;\nboolean count = false;\nint value = nums[0];\nfor (int n : nums) {\nif (index == -1) {\nindex += 1;\ncontinue;\n}\nif (n == value){\nif (!count) index += 1;\ncount = true;\n} else {\nvalue = n;\nindex += 1;\ncount = false;\n}\nnums[index] = n;\n}\nreturn index+1;\n}\n}\n</code></pre></p> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "python", "java", "array", "O(n)"]}, {"location": "notes/Leetcode%2010-100/81.%20Search%20in%20Rotated%20Sorted%20Array%20II/", "title": "81. Search in Rotated Sorted Array II", "text": "", "tags": ["leetcode", "computer_sience", "python", "c", "coding_chalenge", "binary_search", "O(n)"]}, {"location": "notes/Leetcode%2010-100/81.%20Search%20in%20Rotated%20Sorted%20Array%20II/#problem", "title": "Problem", "text": "<p>There is an integer array <code>nums</code> sorted in non-decreasing order (not necessarily with distinct values).</p> <p>Before being passed to your function, <code>nums</code> is rotated at an unknown pivot index <code>k</code> (<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (0-indexed). For example, <code>[0,1,2,4,4,4,5,6,6,7]</code> might be rotated at pivot index <code>5</code> and become <code>[4,5,6,6,7,0,1,2,4,4]</code>.</p> <p>Given the array <code>nums</code> after the rotation and an integer <code>target</code>, return <code>true</code> if <code>target</code> is in <code>nums</code>, or <code>false</code> if it is not in <code>nums</code>.</p> <p>You must decrease the overall operation steps as much as possible.</p> <p>Example 1:</p> <p>Input: nums = [2,5,6,0,0,1,2], target = 0 Output: true</p> <p>Example 2:</p> <p>Input: nums = [2,5,6,0,0,1,2], target = 3 Output: false</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> <li><code>nums</code> is guaranteed to be rotated at some pivot.</li> <li><code>-104 &lt;= target &lt;= 104</code></li> </ul> <p>Follow up: This problem is similar to 33. Search in Rotated Sorted Array, but <code>nums</code> may contain duplicates. Would this affect the runtime complexity? How and why?</p>", "tags": ["leetcode", "computer_sience", "python", "c", "coding_chalenge", "binary_search", "O(n)"]}, {"location": "notes/Leetcode%2010-100/81.%20Search%20in%20Rotated%20Sorted%20Array%20II/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "python", "c", "coding_chalenge", "binary_search", "O(n)"]}, {"location": "notes/Leetcode%2010-100/81.%20Search%20in%20Rotated%20Sorted%20Array%20II/#remove-duplicate-find-shift-point-binary-search", "title": "Remove Duplicate + Find shift point + Binary search", "text": "<p><code>O(n)</code></p>", "tags": ["leetcode", "computer_sience", "python", "c", "coding_chalenge", "binary_search", "O(n)"]}, {"location": "notes/Leetcode%2010-100/81.%20Search%20in%20Rotated%20Sorted%20Array%20II/#some-conclusion", "title": "Some conclusion", "text": "<p>While there is a lot of similarity from 33. Search in Rotated Sorted Array . The main breaking point is that we can\u2019t effectively find the shift point as if <code>nums[mid] == nums[0]</code>, it could either be left, or right because of duplication. Both example could be: <pre><code>-  L     M     R\n- [2, 0, 2, 2, 2]\n- [2, 2, 2, 0, 2]\n</code></pre></p> <p>So to preventing this, we should at least remove duplication on either end, here is a snippet code that I try to clear the duplicate on <code>nums</code> array left side: <pre><code>        for i in range(n-1,-1,-1):\nif nums[i] == nums[0]:\ncontinue\nself.nums = nums[:i+1]\nn = len(self.nums)\nbreak\nif n == 0:\nreturn False\n</code></pre></p> <p>Final code should be the same as 33. Search in Rotated Sorted Array <pre><code>class Solution:\ndef findShiftPoint(self):\nshiftPoint = -1\nisFound = False\npointerLeftIndex = 0\npointerRightIndex = len(self.nums)\nwhile True:\nmidIndex = (pointerLeftIndex + pointerRightIndex) // 2\nif pointerLeftIndex == midIndex:\nbreak\nif self.nums[midIndex] &gt;= self.nums[0]:\npointerLeftIndex = midIndex\nelse:\npointerRightIndex = midIndex\nif pointerLeftIndex+1 == pointerRightIndex:\nshiftPoint = len(self.nums)-1 - pointerLeftIndex\nisFound = True\nreturn (shiftPoint, isFound)\ndef binarySearch(self, startIndex,endIndex, target):\ntargetIndex, isFound = -1, False\nleft = startIndex-1\nright = endIndex +1\nwhile True:\nmidIndex = (left + right) // 2\nif left == midIndex:\nbreak \nif self.nums[midIndex] &lt;= target:\nleft = midIndex\nelse:\nright = midIndex\nif left+1 == right:\ntargetIndex = left\nif startIndex &lt;= targetIndex &lt;= endIndex:\nisFound = self.nums[targetIndex] == target\nreturn (targetIndex, isFound)\ndef search(self, nums: List[int], target: int) -&gt; int:\nself.nums = nums\nn = len(nums)\nself.target = target\nfor i in range(n-1,-1,-1):\nif nums[i] == nums[0]:\ncontinue\nself.nums = nums[:i+1]\nn = len(self.nums)\nbreak\nif n == 0:\nreturn False\nresult = -1\nshiftPoint, isFound = self.findShiftPoint()\ntargetIndex, isFound = self.binarySearch(0, n- shiftPoint -1, target)\nif isFound:\nreturn True\ntargetIndex, isFound = self.binarySearch(n- shiftPoint,n-1, target)\nif isFound:\nreturn True\nreturn False\n</code></pre></p> <p>Time complexity: Worst case O(n)</p> <ul> <li>As we need to remove duplicate on left/right side, which in theory can be the whole array, costing O(n) time</li> <li>Other binary finding cost O(log n)</li> </ul>", "tags": ["leetcode", "computer_sience", "python", "c", "coding_chalenge", "binary_search", "O(n)"]}, {"location": "notes/Leetcode%2010-100/84.%20Largest%20Rectangle%20in%20Histogram/", "title": "84. Largest Rectangle in Histogram", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "cache", "binary_search", "array", "python", "O(n ** 2)", "O(n ** 2 log n)"]}, {"location": "notes/Leetcode%2010-100/84.%20Largest%20Rectangle%20in%20Histogram/#problem", "title": "Problem", "text": "<p>Given an array of integers <code>heights</code> representing the histogram\u2019s bar height where the width of each bar is <code>1</code>, return the area of the largest rectangle in the histogram.</p> <p>Example 1:</p> <p></p> <p>Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= heights.length &lt;= 10**5</code></li> <li><code>0 &lt;= heights[i] &lt;= 10**4</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "cache", "binary_search", "array", "python", "O(n ** 2)", "O(n ** 2 log n)"]}, {"location": "notes/Leetcode%2010-100/84.%20Largest%20Rectangle%20in%20Histogram/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "cache", "binary_search", "array", "python", "O(n ** 2)", "O(n ** 2 log n)"]}, {"location": "notes/Leetcode%2010-100/84.%20Largest%20Rectangle%20in%20Histogram/#cache-it-all", "title": "Cache it all", "text": "<p><code>O(n ** 2)</code></p> <p>We need what information, we cache it:</p> <ul> <li>Loop through the provided <code>height</code> array from left to right (<code>[0..n]</code>)</li> <li>Using a dictionary hash map <code>cache</code> to store all the rectangle we can create up until now</li> <li>Calculate the next one using: <code>cache[(i,p)] = cache[(i-1,p)] + p</code> which mean:<ul> <li>With current bar with a height of <code>p</code> ;</li> <li>we can append it and form a rectangle to the last know <code>i-1</code> index <code>p</code> height rectangle.</li> </ul> </li> </ul> <pre><code>from collections import defaultdict\nclass Solution:\ndef largestRectangleArea(self, heights: List[int]) -&gt; int:\ncache = defaultdict(int)\nlargest = 0 \nfor i, h in enumerate(heights):\nfor p in range(1, h+1):\ncache[(i,p)] = cache[(i-1,p)] + p\nif largest &lt; cache[(i,p)]:\nlargest = cache[(i,p)]\nreturn largest\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "cache", "binary_search", "array", "python", "O(n ** 2)", "O(n ** 2 log n)"]}, {"location": "notes/Leetcode%2010-100/84.%20Largest%20Rectangle%20in%20Histogram/#optimize", "title": "Optimize", "text": "<p><code>O(n ** 2 log n)</code></p> <ul> <li>Binary search: Using binary search instead of loop through all possible <code>p in [0..h]</code> with each bar; only calculating and caching p with a clear know of it</li> <li>Optimize memory: We only need index <code>(i-1)</code> information to process index <code>i</code>, so we don\u2019t need to cache/can free any thing before it.</li> <li>Optimize calculation: We only need to store the appearance of each height, check for largest rectangle only when it goes out of the scope or end of the loop.</li> </ul> <pre><code>class Solution:\ndef largestRectangleArea(self, heights: List[int]) -&gt; int:\ncache = [{}, {}]\nprev, curr = 0, 1\nlargest = 0 \nfor i, h in enumerate(heights):\nif i == 0:\nh = heights[0]\ncache[prev][h] = i\nlargest = h\nprev_keys = [h]\ncontinue\ninsert_pos = bisect_right(prev_keys, h)\ncurr_keys = prev_keys[:insert_pos].copy()\nfor key in prev_keys[:insert_pos]:\ncache[curr][key] = cache[prev][key]\nif h not in prev_keys:\ncache[curr][h] = i\nif insert_pos &lt; len(prev_keys):\ncache[curr][h] = cache[prev][prev_keys[insert_pos]]\ncurr_keys.append(h)\nfor key in prev_keys[insert_pos:]:\nif largest &lt; (i-cache[prev][key])*key:\nlargest = (i-cache[prev][key])*key\ncurr, prev = prev, curr\nprev_keys = curr_keys\n# print(cache[curr])\ncache[curr] = {}\nfor key in cache[prev]:\nif largest &lt; (len(heights)-cache[prev][key])*key:\nlargest = (len(heights)-cache[prev][key])*key\nreturn largest\n</code></pre> <ul> <li>Try to clear the dictionary and using copy for quickly create key array, I quite gave up at this point</li> </ul> <pre><code>class Solution:\ndef largestRectangleArea(self, heights: List[int]) -&gt; int:\ncache = [[], [|], []]\nprev, curr = 0, 1\nlargest = 0 \nprev_keys = []\nfor i, h in enumerate(heights):\nif i == 0:\nh = heights[0]\nlargest = h\ncache[prev].append(i)\nprev_keys = [h]\ncontinue\ninsert_pos = bisect_right(prev_keys, h)\ncurr_keys = prev_keys[:insert_pos].copy()\ncache[curr] = cache[prev][:insert_pos].copy()\nif h not in prev_keys:\ncurr_keys.append(h)\ncache[curr].append(i)\nif insert_pos &lt; len(prev_keys):\ncache[curr][-1] = cache[prev][insert_pos]\nfor k, start in enumerate(cache[prev][insert_pos:]):\nkey = insert_pos + k \nif largest &lt; (i-start)*prev_keys[key]:\nlargest = (i-start)*prev_keys[key]\ncurr, prev = prev, curr\nprev_keys = curr_keys\n# print(cache[curr])\nfor i, key in enumerate(cache[prev]):\nif largest &lt; (len(heights)-key)*prev_keys[i]:\nlargest = (len(heights)-key)*prev_keys[i]\nreturn largest\n</code></pre> <p>After understand the yanked code, I realize a lot more imprisonment window:</p> <ul> <li>We not need separated <code>prev</code> and <code>curr</code> cache. We can just reuse the <code>prev</code> one directly, pop out any unused <code>&lt;out of the scope&gt;</code> rectangle</li> <li>So I only use <code>cache</code> and <code>keys</code>, instead of having <code>curr_keys, prev_keys, curr, prev, cache[curr] = cache[prev]</code></li> <li>We used the previous <code>keys</code> array directly, so instead of use <code>bisect_right</code> to find the cut out, calculate the <code>&lt;out of the scope&gt;</code> rectangle first and update using a while loop <code>pop()</code> them out until the height of the last one in <code>keys</code> array is lower than current processed height <code>h</code>.<ul> <li>This also mean we have to find another way to get the <code>cache[prev][insert_pos]</code>, which is a product of <code>bisect_right</code> and already be free from memory by <code>keys.pop()</code>. so I set a term <code>w</code> and update it every time using <code>keys.pop()</code></li> </ul> </li> <li>We also can append a <code>[0]</code> at the end so we can reused the logic inside the loop to find largest rectangle, instead of using separated loop at the end.</li> </ul> <p><code>O(n ** 2)</code></p> <pre><code>class Solution:\ndef largestRectangleArea(self, heights: List[int]) -&gt; int:\ncache = []\nkeys = []\nlargest = 0\nfor i, h in enumerate(heights + [0]):\nif i == 0:\nh = heights[0]\nlargest = h\ncache.append(i)\nkeys.append(h)\ncontinue\nw = i\nwhile len(keys) &gt; 0 and keys[-1] &gt; h:\nk = keys.pop()\nstart = cache.pop()\nif largest &lt; (i-start)*k:\nlargest = (i-start)*k\nw = start\nif len(keys) == 0 or keys[-1] != h:\nkeys.append(h)\ncache.append(w)\nreturn largest\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "cache", "binary_search", "array", "python", "O(n ** 2)", "O(n ** 2 log n)"]}, {"location": "notes/Leetcode%2010-100/84.%20Largest%20Rectangle%20in%20Histogram/#gave-up-yank-some-code", "title": "Gave up: Yank some code", "text": "<p>This is quite close to final version of mine some how <pre><code>class Solution:\ndef largestRectangleArea(self, heights: List[int]) -&gt; int:\nif len(heights) == 1:\nreturn heights[0]\n# stack = [&lt;remember_height&gt;, &lt;window_length&gt;]]\nstack = [[heights[0], 1|heights[0], 1]]\ntopHeight, topWidth = stack[-1]\nlargest = heights[0]\nfor h in heights[1:] + [0]:\nw = 1\nif stack and h &lt;= topHeight:\nwhile stack and h &lt; topHeight:\ncurrH, currW = stack.pop()\ntopHeight, topWidth = stack[-1] if stack else (None, None)\nw += currW\narea = (w - 1) * currH\nif area &gt; largest:\nlargest = area\nif stack and h == topHeight:\ntopWidth += w\nstack[-1] = (h, topWidth)\ncontinue\ntopHeight, topWidth = h, w\nstack.append((topHeight, topWidth))\nreturn largest\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "cache", "binary_search", "array", "python", "O(n ** 2)", "O(n ** 2 log n)"]}, {"location": "notes/Leetcode%2010-100/86.%20Partition%20List/", "title": "86. Partition List", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/86.%20Partition%20List/#problem", "title": "Problem", "text": "<p>Given the <code>head</code> of a linked list and a value <code>x</code>, partition it such that all nodes less than <code>x</code> come before nodes greater than or equal to <code>x</code>.</p> <p>You should preserve the original relative order of the nodes in each of the two partitions.</p> <p>Example 1:</p> <p></p> <p>Input: head = [1,4,3,2,5,2], x = 3 Output: [1,2,2,4,3,5]</p> <p>Example 2:</p> <p>Input: head = [2,1], x = 2 Output: [1,2]</p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 200]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li><code>-200 &lt;= x &lt;= 200</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/86.%20Partition%20List/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/86.%20Partition%20List/#de-linked-list-and-make-new-one", "title": "De-linked list and make new one", "text": "<p><code>O(n)</code></p> <p>Just throw away the linked list, I storing all data in a array and rebuild new one.</p> <ul> <li>Loop through <code>head</code> to construct <code>delink</code> array that have all <code>value</code> at the same position of <code>head</code> list</li> <li>Loop through the <code>delink</code> array twice to construct the result link list </li> </ul> <pre><code>class Solution:\ndef partition(self, head: Optional[ListNode], x: int) -&gt; Optional[ListNode]:\np = head\ndelink = []\nwhile p:\ndelink.append(p.val) \np = p.next\nnewHead = None\np = None\nfor i in delink:\nif i &gt;= x:\ncontinue\nif newHead is None:\nnewHead = ListNode(i)\np = newHead\ncontinue\np.next = ListNode(i)\np = p.next\nfor i in delink:\nif i &lt; x:\ncontinue\nif newHead is None:\nnewHead = ListNode(i)\np = newHead\ncontinue\np.next = ListNode(i)\np = p.next\nreturn newHead\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/86.%20Partition%20List/#loop-on-linked-list-but-still-make-new-one", "title": "Loop on linked list but still make new one", "text": "<p><code>O(n)</code></p> <p>The previous approach only loop through the list once, not randomly accessing it, so we can just use normal loop through provided <code>head</code> linked list using a pointer <code>p</code> variable.</p> <p>To make it better, I using two temp Linked list to construct the result Linked list, so that I only need to loop through <code>head</code> once:</p> <ul> <li><code>smaller</code>: Contain all smaller node</li> <li><code>equalOrBigger</code>: Contain all the other node</li> </ul> <pre><code>class Solution:\ndef partition(self, head: Optional[ListNode], x: int) -&gt; Optional[ListNode]:\np = head\nsmaller = None\nequalOrBigger = None\neSmall = None\neBig = None\nwhile p:\nif p.val &gt;= x:\nif equalOrBigger is None:\nequalOrBigger = ListNode(p.val)\neBig = equalOrBigger\nelse:\neBig.next = ListNode(p.val)\neBig = eBig.next\nelse:\nif smaller is None:\nsmaller = ListNode(p.val)\neSmall = smaller\nelse:\neSmall.next = ListNode(p.val)\neSmall = eSmall.next\np = p.next\nif smaller is None:\nsmaller = equalOrBigger\nelse:\neSmall.next = equalOrBigger\nreturn smaller\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/86.%20Partition%20List/#loop-on-linked-list-and-reused-all-the-old-provided-listnode", "title": "Loop on linked list and reused all the old provided <code>ListNode</code>", "text": "<p><code>O(n)</code></p> <p>Instead of create new <code>ListNode</code>, we can directly using <code>p</code> as our node Still, we need to store <code>p</code> by <code>temp</code> so that our change doesn\u2019t affect the loop code <pre><code>        while p:\ntemp = p\np = p.next\n# &lt;reuse logic on temp&gt;\n</code></pre></p> <p>Final implementation <pre><code>class Solution:\ndef partition(self, head: Optional[ListNode], x: int) -&gt; Optional[ListNode]:\np = head\nsmaller = None\nequalOrBigger = None\neSmall = None\neBig = None\nwhile p:\ntemp = p\np = p.next\nif temp.val &gt;= x:\nif equalOrBigger is None:\nequalOrBigger = temp\neBig = equalOrBigger\nelse:\neBig.next = temp\neBig = eBig.next\nelse:\nif smaller is None:\nsmaller = temp\neSmall = smaller\nelse:\neSmall.next = temp\neSmall = eSmall.next\nif equalOrBigger is not None:\neBig.next = None\nif smaller is None:\nsmaller = equalOrBigger\nelse:\neSmall.next = equalOrBigger\nreturn smaller\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/88.%20Merge%20Sorted%20Array/", "title": "88. Merge Sorted Array", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/88.%20Merge%20Sorted%20Array/#problem", "title": "Problem", "text": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in non-decreasing order, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p> <p>Merge <code>nums1</code> and <code>nums2</code> into a single array sorted in non-decreasing order.</p> <p>The final sorted array should not be returned by the function, but instead be stored inside the array <code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p> <p>Example 1: <pre><code>**Input:** nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n**Output:** [1,2,2,3,5,6]\n**Explanation:** The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/88.%20Merge%20Sorted%20Array/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/88.%20Merge%20Sorted%20Array/#allocating-new-memory", "title": "Allocating new memory", "text": "<p><code>O(n)</code></p> <p>This is the foundation of merge sort </p> <pre><code>class Solution:\ndef merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -&gt; None:\n\"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\nresult = nums1\nnums1 = nums1[:m].copy()\np1 = 0\np2 = 0\nfor i in range(m+n):\nif p1 &gt;= len(nums1):\nresult[i] = nums2[p2]\np2 += 1\nelif p2 &gt;= len(nums2):\nresult[i] = nums1[p1]\np1 += 1\nelif nums1[p1] &lt; nums2[p2]:\nresult[i] = nums1[p1]\np1 += 1\nelse:\nresult[i] = nums2[p2]\np2 += 1\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%2010-100/91.%20Decode%20Ways/", "title": "91. Decode Ways", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/91.%20Decode%20Ways/#problem", "title": "Problem", "text": "<p>A message containing letters from <code>A-Z</code> can be encoded into numbers using the following mapping:</p> <p>\u2018A\u2019 -&gt; \u201c1\u201d \u2018B\u2019 -&gt; \u201c2\u201d \u2026 \u2018Z\u2019 -&gt; \u201c26\u201d</p> <p>To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, <code>\"11106\"</code> can be mapped into:</p> <ul> <li><code>\"AAJF\"</code> with the grouping <code>(1 1 10 6)</code></li> <li><code>\"KJF\"</code> with the grouping <code>(11 10 6)</code></li> </ul> <p>Note that the grouping <code>(1 11 06)</code> is invalid because <code>\"06\"</code> cannot be mapped into <code>'F'</code> since <code>\"6\"</code> is different from <code>\"06\"</code>.</p> <p>Given a string <code>s</code> containing only digits, return the number of ways to decode it.</p> <p>The test cases are generated so that the answer fits in a 32-bit integer.</p> <p>Example 1: <pre><code>**Input:** s = \"12\"\n**Output:** 2\n**Explanation:** \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n</code></pre></p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> contains only digits and may contain leading zero(s).</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/91.%20Decode%20Ways/#solve", "title": "Solve", "text": "<p>Dynamic programming:</p> <ul> <li>We could use fixed size <code>cache[3]</code> rotation array instead</li> </ul> <pre><code>class Solution:\ndef numDecodings(self, s: str) -&gt; int:\nif s[0] == '0':\nreturn 0\ncache = {}\ncache[-1] = 1\ncache[-2] = 1\nfor i, c in enumerate(s):\nif i == 0:\ncache[i] = 1\ncontinue\ncache[i] = 0\nif c != '0':\ncache[i] = cache[i-1]\nif s[i-1] == '1' or (s[i-1] == '2' and ord(s[i]) &lt;= ord('6')):\ncache[i] += cache[i-2]\nreturn cache[len(s)-1]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/92.%20Reverse%20Linked%20List%20II/", "title": "92. Reverse Linked List II", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n)"]}, {"location": "notes/Leetcode%2010-100/92.%20Reverse%20Linked%20List%20II/#problem", "title": "Problem", "text": "<p>Given the <code>head</code> of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position <code>left</code> to position <code>right</code>, and return the reversed list.</p> <p>Example 1:</p> <p></p> <p>Input: head = [1,2,3,4,5], left = 2, right = 4 Output: [1,4,3,2,5]</p> <p>Example 2:</p> <p>Input: head = [5], left = 1, right = 1 Output: [5]</p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is <code>n</code>.</li> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>-500 &lt;= Node.val &lt;= 500</code></li> <li><code>1 &lt;= left &lt;= right &lt;= n</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n)"]}, {"location": "notes/Leetcode%2010-100/92.%20Reverse%20Linked%20List%20II/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n)"]}, {"location": "notes/Leetcode%2010-100/92.%20Reverse%20Linked%20List%20II/#linked-list-only", "title": "Linked-list only", "text": "<p><code>O(n)</code></p> <p>We do and done reverse the linked list, but only in one traversal. This accomplish by connecting the node to previous node on every step. </p> <p>This is quite challenging when structuring:</p> <ul> <li> <p>First, we get to <code>left</code> position of the linked list, while also save the <code>begin</code> node, which will connect to the last node being reversed. <pre><code>    +---- left\n    |\n[1, 2, 3, 4, 5]\n |\n +---- begin\n</code></pre>     Code: <pre><code>i = 1;\np = head;\nwhile (p != 0 &amp;&amp; i &lt; left) {\ni = i + 1;\nprev = p;\np = p-&gt;next;\n}\nif (prev != 0)\nbegin = prev;\n</code></pre></p> </li> <li> <p>Next, we traversal till the <code>right</code> position, on every step, we link backward. Also, we saving the <code>end</code> node, which will be connect to the remain of the list.  <pre><code>    +---- end/left\n    |\n[1, 2, 3, 4, 5]\n |\n +---- begin\n\n begin    end\n |        |\n[1, 4, 3, 2, 5]\n    |        |\n    right    remain\n</code></pre>     This achieve by saving a lot temporary node.     Code: <pre><code>    while (p != 0 &amp;&amp; i &lt;= right) {\n// printf(\"%d, \", p-&gt;val);\nnext = p-&gt;next;\nif (end == 0)\nend = p;\nelse\np-&gt;next = prev;\ni = i + 1;\nprev = p;\np = next;\n}\nend-&gt;next = p;\nif (left == 1)\nreturn prev; // Special case, begin = NULL\nelse\nbegin-&gt;next = prev;\n</code></pre></p> </li> </ul> <p>Final implementation:</p> Time Submitted Status Runtime Memory Language 09/07/2023 08:06 Accepted 3 ms 5.8 MB c <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* reverseBetween(struct ListNode* head, int left, int right){\nif (left == right) return head;\nstruct ListNode *p = head;\nstruct ListNode *prev = 0;\nstruct ListNode *next = 0;\nstruct ListNode *begin = 0;\nstruct ListNode *end = 0;\nint i = 1;\nwhile (p != 0 &amp;&amp; i &lt; left) {\ni = i + 1;\nprev = p;\np = p-&gt;next;\n}\nif (prev != 0)\nbegin = prev;\nwhile (p != 0 &amp;&amp; i &lt;= right) {\n// printf(\"%d, \", p-&gt;val);\nnext = p-&gt;next;\nif (end == 0)\nend = p;\nelse\np-&gt;next = prev;\ni = i + 1;\nprev = p;\np = next;\n}\nend-&gt;next = p;\nif (left == 1)\nreturn prev;\nelse\nbegin-&gt;next = prev;\nreturn head;\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n)"]}, {"location": "notes/Leetcode%2010-100/94.%20Binary%20Tree%20Inorder%20Traversal/", "title": "94. Binary Tree Inorder Traversal", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/94.%20Binary%20Tree%20Inorder%20Traversal/#problem", "title": "Problem", "text": "<p>Given the <code>root</code> of a binary tree, return the inorder traversal of its nodes\u2019 values.</p> <p>Example 1:</p> <p></p> <p>Input: root = [1,null,2,3] Output: [1,3,2]</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/94.%20Binary%20Tree%20Inorder%20Traversal/#solve", "title": "Solve", "text": "<p>You can return all the node value of a binary tree in many order: <code>bfs</code>, <code>dfs</code>, <code>lnr</code>, <code>rnl</code>, <code>lrn</code> .</p> <p>The problem specifically require Inorder traversal, which mean <code>left-node-right</code> order</p> <pre><code># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\ndef inorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\nanwser = []\nif root is None:\nreturn anwser\nif root.left:\nanwser += self.inorderTraversal(root.left)\nanwser.append(root.val)\nif root.right:\nanwser += self.inorderTraversal(root.right)\nreturn anwser\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/98.%20Validate%20Binary%20Search%20Tree/", "title": "98. Validate Binary Search Tree", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/98.%20Validate%20Binary%20Search%20Tree/#problem", "title": "Problem", "text": "<p>Given the <code>root</code> of a binary tree, determine if it is a valid binary search tree (BST).</p> <p>A valid BST is defined as follows:</p> <ul> <li>The left subtree of a node contains only nodes with keys less than the node\u2019s key.</li> <li>The right subtree of a node contains only nodes with keys greater than the node\u2019s key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> </ul> <p>Example 1:</p> <p></p> <p>Input: root = [2,1,3] Output: true</p> <p>Example 2:</p> <p></p> <p>Input: root = [5,1,4,null,null,3,6] Output: false Explanation: The root node\u2019s value is 5 but its right child\u2019s value is 4.</p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 104]</code>.</li> <li><code>-231 &lt;= Node.val &lt;= 231 - 1</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/98.%20Validate%20Binary%20Search%20Tree/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/98.%20Validate%20Binary%20Search%20Tree/#recursion-bottom-up", "title": "Recursion - bottom up", "text": "<p>If we want a valid BST, then all tree node it self is a valid BST. With each tree node check, I try to remember:</p> <ul> <li>Is it a valid Tree</li> <li>What is it coverage range</li> </ul> <p>This then helping us when it come to their parent node, we:</p> <ul> <li>If its left, right node isn\u2019t a valid Tree, then the parent node isn\u2019t a valid Tree. Quickly return <code>False</code></li> <li>If the coverage range not match:   <code>[Left range] &lt; Parent.val &lt; [Right range]</code> then the Parent isn\u2019t a valid Tree. Quickly return <code>False</code></li> <li>If both above pass, we have a valid parent tree node. Return it coverage range <code>[l,r]</code> and its valid Tree stage <code>True</code></li> </ul> <pre><code>class Solution:\ndef isValidBST(self, root: Optional[TreeNode]) -&gt; bool:\ndef represent(root):\nl = root.val\nr = root.val\nif root.left:\nl_left, l_right, l_check = represent(root.left)\nif not l_check or root.val &lt;= l_right:\nreturn 0, 0, False\nl = l_left\nif root.right:\nr_left, r_right, r_check = represent(root.right)\nif not r_check or r_left &lt;= root.val:\nreturn 0, 0, False\nr = r_right\nreturn l, r, True\n_, _, result = represent(root)\nreturn result\n</code></pre> <p>While some how this return a accepted, this shouldn\u2019t work:</p> <ul> <li>The stack will be deallocated, all Rep object that we define will free the memory after return to the original parent function.</li> <li>So the return function which trying to return a pointer to Rep object, return to a free position in stack. Which then maybe be overridden, and make not so good behavior.  <pre><code>typedef struct {\nint l;\nint r;\nbool valid;\n} Rep;\nRep check(struct TreeNode* root){\nint l = root-&gt;val;\nint r = root-&gt;val;\nif (root-&gt;left != NULL) {\nRep left = check(root-&gt;left);\nif (!left.valid || l &lt;= left.r) {\nRep wrong = {0, 0, false};\nreturn wrong;\n}\nl = left.l;\n}\nif (root-&gt;right != NULL) {\nRep right = check(root-&gt;right);\nif (!right.valid || right.l &lt;= r) {\nRep wrong = {0, 0, false};\nreturn wrong;\n}\nr = right.r;\n}\nRep result = {l, r, true};\nreturn result;\n}\nbool isValidBST(struct TreeNode* root) {\nreturn check(root).valid;\n}\n</code></pre></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/98.%20Validate%20Binary%20Search%20Tree/#recursion-top-down", "title": "Recursion - top down", "text": "<p>If we want a valid BST, then all tree node it self is a valid BST. Start from the top <code>root</code> tree node, with a range of <code>[left, right] = [-MAX_INT, MAX_INT]</code>, to check our if <code>root</code> a valid BTS:</p> <ul> <li>All tree node in the Left should be covered by <code>[-MAX_INT, root.val -1]</code></li> <li>All tree node in the Right should be covered by <code>[root.val +1, MAX_INT]</code></li> </ul> <p>We push it down until checking all the node possible, any node that have value outside of it desirable range will return us with a <code>False</code> valid BTS <code>root</code></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/98.%20Validate%20Binary%20Search%20Tree/#memory-limit", "title": "Memory limit", "text": "<p>The MAX_INT should large than - <code>-2**31 &lt;= Node.val &lt;= 2**31 - 1</code>, which may require you to give a bigger memory</p> <p>While there is some (??) moments here.  Here is Leetcode C memory allocate: int = 4 bytes long = long long = 8 bytes</p> <p>My memory. Here is C memory allocate: int = 2 bytes long = 4 bytes long long = 8 bytes</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%2010-100/98.%20Validate%20Binary%20Search%20Tree/#implementation", "title": "Implementation", "text": "<p>By using long (8 bytes) integer:</p> <pre><code>bool check(struct TreeNode* root, long l, long r){\nif (root-&gt;left != NULL) {\nif (! check(root-&gt;left, l, root-&gt;val))\nreturn false;\n}\nif (root-&gt;right != NULL) {\nif (! check(root-&gt;right, root-&gt;val, r))\nreturn false;\n}\nreturn l &lt; root-&gt;val &amp;&amp; root-&gt;val &lt; r;\n}\nbool isValidBST(struct TreeNode* root) {\nreturn check(root, LLONG_MIN, LLONG_MAX);\n}\n</code></pre> <p>or by using a boolean as our representative to MAX_INT number, instead of real value:  <pre><code>bool check(struct TreeNode* root, int l, int r, bool haveL, bool haveR){\nif (root-&gt;left != NULL) {\nif (! check(root-&gt;left, l, root-&gt;val, haveL, true))\nreturn false;\n}\nif (root-&gt;right != NULL) {\nif (! check(root-&gt;right, root-&gt;val, r, true, haveR))\nreturn false;\n}\nif (haveL){\nif (! (l &lt; root-&gt;val))\nreturn false; }\nif (haveR){\nif (! (root-&gt;val &lt; r)) {\nreturn false;\n}\n}\nreturn true;\n}\nbool isValidBST(struct TreeNode* root) {\nreturn check(root, 0, 0, false, false);\n}\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/101.%20Symmetric%20Tree/", "title": "101. Symmetric Tree", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/101.%20Symmetric%20Tree/#problem", "title": "Problem", "text": "<p>Given the <code>root</code> of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).</p> <p>Example 1:</p> <p></p> <p>Input: root = [1,2,2,3,4,4,3] Output: true</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/101.%20Symmetric%20Tree/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/101.%20Symmetric%20Tree/#bfs-on-both-side", "title": "BFS on both side", "text": "<p><code>O(n)</code></p> <p>Quite tricky, the way is keeping track of all node to travel and their corresponded mirror position  </p> <pre><code># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\ndef isSymmetric(self, root: Optional[TreeNode]) -&gt; bool:\nqueue = [(root, root)]\nwhile len(queue) &gt; 0:\np, q = queue.pop(0)\nif p.val != q.val:\nreturn False\nif p.right and q.left:\nqueue.append((p.right, q.left))\nelif p.right or q.left:\nreturn False\nif p.left and q.right:\nqueue.append((p.left, q.right))\nelif p.left or q.right:\nreturn False\nreturn True\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/102.%20Binary%20Tree%20Level%20Order%20Traversal/", "title": "102. Binary Tree Level Order Traversal", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/102.%20Binary%20Tree%20Level%20Order%20Traversal/#problem", "title": "Problem", "text": "<p>Given the <code>root</code> of a binary tree, return the level order traversal of its nodes\u2019 values. (i.e., from left to right, level by level).</p> <p>Example 1:</p> <p></p> <p>Input: <code>root = [3,9,20,null,null,15,7]</code> Output: <code>[[3],[9,20],[15,7|3],[9,20],[15,7]]</code></p> <p>Example 2:</p> <p>Input: <code>root = [1]</code> Output: <code>[[1|1]]</code></p> <p>Example 3:</p> <p>Input: <code>root = []</code> Output: <code>[]</code></p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/102.%20Binary%20Tree%20Level%20Order%20Traversal/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/102.%20Binary%20Tree%20Level%20Order%20Traversal/#recursive", "title": "Recursive", "text": "<p><code>O(n)</code></p> <p>I do exactly what the problem said:</p> <ul> <li>Create a array <code>result</code></li> <li>Loop through all nodes in the <code>root</code> tree, while keeping its level using recursive</li> <li>Push them in to <code>result</code> as we go</li> </ul> <pre><code>class Solution:\ndef levelOrder(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\nresult = []\ndef helper(root, level = None):\nif level is None:\nlevel = 0\nwhile len(result) - 1 &lt; level:\nresult.append([])\nresult[level].append(root.val)\nif root.left:\nhelper(root.left, level + 1)\nif root.right:\nhelper(root.right, level + 1)\nif root:\nhelper(root)\nreturn result\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/102.%20Binary%20Tree%20Level%20Order%20Traversal/#using-queue", "title": "Using queue", "text": "<p><code>O(n)</code></p> <p>Simple BFS implement with queue</p> <pre><code>class Solution:\ndef levelOrder(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\nresult = []\nq = []\nif root:\nq.append((root,0))\nwhile len(q) &gt; 0:\nr, level = q.pop(0)\nif len(result) - 1 &lt; level:\nresult.append([])\nresult[level].append(r.val)\nif r.left:\nq.append((r.left, level + 1))\nif r.right:\nq.append((r.right, level + 1))\nreturn result\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/103.%20Binary%20Tree%20Zigzag%20Level%20Order%20Traversal/", "title": "103. Binary Tree Zigzag Level Order Traversal", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/103.%20Binary%20Tree%20Zigzag%20Level%20Order%20Traversal/#problem", "title": "Problem", "text": "<p>Given the <code>root</code> of a binary tree, return the zigzag level order traversal of its nodes\u2019 values. (i.e., from left to right, then right to left for the next level and alternate between).</p> <p>Example 1:</p> <p></p> <p>Input: <code>root = [3,9,20,null,null,15,7]</code> Output: <code>[[3],[20,9],[15,7|3],[20,9],[15,7]]</code></p> <p>Example 2:</p> <p>Input: <code>root = [1]</code> Output: <code>[[1|1]]</code></p> <p>Example 3:</p> <p>Input: <code>root = []</code> Output: <code>[]</code></p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/103.%20Binary%20Tree%20Zigzag%20Level%20Order%20Traversal/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/103.%20Binary%20Tree%20Zigzag%20Level%20Order%20Traversal/#order-traversal-and-modify-on-the-result", "title": "Order Traversal and modify on the result", "text": "<p><code>O(n)</code></p> <p>By reusing our 102. Binary Tree Level Order Traversal, we can just reverse the order of result array at every <code>odd</code> index.</p> <p>As the order of result is already left -&gt; right</p> <pre><code>class Solution:\ndef zigzagLevelOrder(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\nresult = []\nq = []\nif root:\nq.append((root,0))\nwhile len(q) &gt; 0:\nr, level = q.pop(0)\nif len(result) - 1 &lt; level:\nresult.append([])\nresult[level].append(r.val)\nif r.left:\nq.append((r.left, level + 1))\nif r.right:\nq.append((r.right, level + 1))\nfor i in range(1, len(result), 2):\nresult[i] = result[i][::-1]\nreturn result\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/104.%20Maximum%20Depth%20of%20Binary%20Tree/", "title": "104. Maximum Depth of Binary Tree", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/104.%20Maximum%20Depth%20of%20Binary%20Tree/#problem", "title": "Problem", "text": "<p>Given the <code>root</code> of a binary tree, return its maximum depth.</p> <p>A binary tree\u2019s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p> <p>Example 1:</p> <p></p> <p>Input: root = [3,9,20,null,null,15,7] Output: 3</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/104.%20Maximum%20Depth%20of%20Binary%20Tree/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/104.%20Maximum%20Depth%20of%20Binary%20Tree/#tree-traversal-nlr", "title": "Tree traversal - NLR", "text": "<p><code>O(n)</code></p> <ul> <li> <p>Go to each node and keep track their deep level <pre><code>#TODO\n</code></pre></p> </li> <li> <p>Or use simple recursion <pre><code># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\ndef maxDepth(self, root: Optional[TreeNode]) -&gt; int:\nif root is None:\nreturn 0\ndeep = 1\nif root.left:\nleft_deep = self.maxDepth(root.left)\nif deep &lt; left_deep + 1:\ndeep = left_deep + 1\nif root.right:\nright_deep = self.maxDepth(root.right)\nif deep &lt; right_deep + 1:\ndeep = right_deep + 1\nreturn deep\n</code></pre></p> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/108.%20Convert%20Sorted%20Array%20to%20Binary%20Search%20Tree/", "title": "108. Convert Sorted Array to Binary Search Tree", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/108.%20Convert%20Sorted%20Array%20to%20Binary%20Search%20Tree/#problem", "title": "Problem", "text": "<p>Given an integer array <code>nums</code> where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.</p> <p>Example 1:</p> <p></p> <p>Input: nums = [-10,-3,0,5,9] Output: [0,-3,9,-10,null,5] Explanation: [0,-10,5,null,-3,null,9] is also accepted:</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/108.%20Convert%20Sorted%20Array%20to%20Binary%20Search%20Tree/#solve", "title": "Solve", "text": "<p><code>O(n)</code></p> <p>A simple recursion, we reuse our own created function Recursion break case is when:</p> <ul> <li><code>len(nums) == 0</code> which we return <code>None</code> </li> <li><code>len(nums)== 1</code> which it is a leaf <code>TreeNode</code> with <code>leaf.left = leaf.right == None</code></li> </ul> <pre><code># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\ndef sortedArrayToBST(self, nums: List[int]) -&gt; Optional[TreeNode]:\nif len(nums) == 1:\nreturn TreeNode(nums[0])\nif len(nums) ==0:\nreturn None\nmid = len(nums)//2\nroot_value = nums[mid]\nleft = self.sortedArrayToBST(nums[:mid])\nright = self.sortedArrayToBST(nums[mid+1:])\nreturn TreeNode(root_value, left, right)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/110.%20Balanced%20Binary%20Tree/", "title": "110. Balanced Binary Tree", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/110.%20Balanced%20Binary%20Tree/#problem", "title": "Problem", "text": "<p>Given a binary tree, determine if it is height-balanced.</p> <p>Example 1:</p> <p></p> <p>Input: root = [3,9,20,null,null,15,7] Output: true</p> <p>Example 2:</p> <p></p> <p>Input: root = [1,2,2,3,3,null,null,4,4] Output: false</p> <p>Example 3:</p> <p>Input: root = [] Output: true</p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li> <li><code>-104 &lt;= Node.val &lt;= 104</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/110.%20Balanced%20Binary%20Tree/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/110.%20Balanced%20Binary%20Tree/#white-board", "title": "White board", "text": "<p>First, we need to understand A balance binary tree, which is a binary tree that have:</p> <ul> <li>Every node in tree is a balance binary tree</li> <li>Height of left node and right node difference is not greater than 1</li> </ul> <p>We will want to work with height of every single node in the tree. This can be achieve by traversal and storing all tree node height using recursion,</p> <pre><code>func getHeight(root *TreeNode) int {\nleft := 0\nif root.Left != nil {\nleft = getHeight(root.Left)\n}\nright := 0\nif root.Right != nil {\nright := getHeight(root.Left)\n}\nreturn max(left, right) + 1\n}\n</code></pre> <p>but the problem is that:</p> <p>How we can store data that we can reference to the corresponded tree node</p> <p>I achieved this by creating a new tree, that have the same structure of our tree, where it have another field height.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/110.%20Balanced%20Binary%20Tree/#clone-tree-and-comparing-height", "title": "Clone tree and comparing height", "text": "<p><code>O(n)</code></p> <p>This clone method is quite trouble some, we really need to spend less than this much of memory for this kind of problem. As our height is only use in one comparation.</p> <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc max(a, b int) int {\nif a &gt; b {\nreturn a\n}\nreturn b\n}\ntype TreeWrap struct {\nval int\nheight int\nleft *TreeWrap\nright *TreeWrap\n}\nfunc wrap(tn *TreeNode) *TreeWrap{\nif tn == nil {\nreturn nil\n}\nheight := 1\nvar left *TreeWrap = nil\nif tn.Left != nil {\nleft = wrap(tn.Left)\nheight = max(height, 1 + left.height)\n}\nvar right *TreeWrap= nil\nif tn.Right != nil {\nright = wrap(tn.Right)\nheight = max(height, 1 + right.height)\n}\ntw := &amp;TreeWrap{\ntn.Val,\nheight,\nleft,\nright,\n}\nreturn tw\n}\nfunc (tw *TreeWrap) isBalanced() bool {\nif tw == nil {\nreturn true\n}\nleft := 0\nif tw.left != nil {\nif ! tw.left.isBalanced() {\nreturn false\n}\nleft = tw.left.height\n}\nright := 0\nif tw.right != nil {\nif ! tw.right.isBalanced() {\nreturn false\n}\nright = tw.right.height\n}\nreturn left - right &lt;= 1 &amp;&amp; left - right &gt;= -1\n}\nfunc isBalanced(root *TreeNode) bool {\nrootwrap := wrap(root)\nreturn rootwrap.isBalanced()\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/110.%20Balanced%20Binary%20Tree/#optimize-1-only-traversal-once-and-not-storing-height", "title": "Optimize 1 - Only traversal once and not storing height", "text": "<p><code>O(n)</code></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node/", "title": "116. Populating Next Right Pointers in Each Node", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node/#problem", "title": "Problem", "text": "<p>You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition: <pre><code>struct Node {\nint val;\nNode *left;\nNode *right;\nNode *next;\n}\n</code></pre> Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p> <p>Initially, all next pointers are set to <code>NULL</code>.</p> <p>Example 1:</p> <p></p> <p>Input: root = [1,2,3,4,5,6,7] Output: [1,#,2,3,#,4,5,6,7,#] Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with \u2018#\u2019 signifying the end of each level.</p> <p>Example 2:</p> <p>Input: root = [] Output: []</p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 212 - 1]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul> <p>Follow-up:</p> <ul> <li>You may only use constant extra space.</li> <li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node/#tree-traversal-bfs", "title": "Tree traversal - BFS", "text": "<p><code>O(n)</code></p> <p>By reusing our 102. Binary Tree Level Order Traversal, we can just using result to help us populate every node next.</p> <p>As the order of result is already left -&gt; right, we loop and set our <code>node[i].next = node[i+1]</code> with every <code>result[0..n]</code></p> <pre><code>class Solution:\ndef connect(self, root: 'Optional[Node]') -&gt; 'Optional[Node]':\nresult = []\nq = []\nif root:\nq.append((root,0))\nwhile len(q) &gt; 0:\nr, level = q.pop(0)\nif len(result) - 1 &lt; level:\nresult.append([])\nresult[level].append(r)\nif r.left:\nq.append((r.left, level + 1))\nif r.right:\nq.append((r.right, level + 1))\nfor nodes in result:\nfor i in range(len(nodes)-1):\nnodes[i].next = nodes[i+1]\nreturn root\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/118.%20Pascal%27s%20Triangle/", "title": "118. Pascal's Triangle", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/118.%20Pascal%27s%20Triangle/#problem", "title": "Problem", "text": "<p>Given an integer <code>numRows</code>, return the first numRows of Pascal\u2019s triangle.</p> <p>In Pascal\u2019s triangle, each number is the sum of the two numbers directly above it as shown:</p> <p></p> <p>Example 1: <pre><code>**Input:** numRows = 5\n**Output:** [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1|1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/118.%20Pascal%27s%20Triangle/#solve", "title": "Solve", "text": "<p><code>O(n ** 2)</code></p> <ul> <li>Simply simulating what the problem said, no optimizing anything </li> </ul> Time Submitted Status Runtime Memory Language 07/10/2023 23:40 Accepted 49 ms 16.2 MB python3 <pre><code>class Solution:\ndef generate(self, numRows: int) -&gt; List[List[int]]:\nanswer = [[1], [1,1], [1,2,1|1], [1,1], [1,2,1]]\nfor row in range(3,numRows):\nlast = answer[row-1]\ncurrent_row = [1]\nfor index in range(len(last)-1):\ncurrent_row.append(last[index] + last[index+1])\ncurrent_row.append(1)\nanswer.append(current_row)\nreturn answer[:numRows]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/118.%20Pascal%27s%20Triangle/#c-implementation", "title": "C Implementation", "text": "<p><code>O(n ** 2)</code></p> <p>Ton of pointer, hate to say that it is unclear which/how variable should be return back to Leetcode. For normal competition, result should be return through <code>stdout</code> or output file</p> Time Submitted Status Runtime Memory Language 09/09/2023 00:42 Accepted 7 ms 6.5 MB c <pre><code>/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** generate(int numRows, int* returnSize, int** returnColumnSizes){\nint *s;\nint **res = malloc (sizeof (int *) * numRows);\n*returnSize = numRows;\n// printf(\"returnSize = %d\\n\", *returnSize);\n*returnColumnSizes = malloc (sizeof (int) * numRows);\nfor (int i = 1; i &lt;= numRows; i++) {\ns = malloc(sizeof(int) * i);\n// printf(\"Current line:\");\nfor (int j = 0; j &lt; i; j ++) {\nif (j == 0 || j == i-1) {\ns[j] = 1;\n} else {\ns[j] = res[i-2][j] + res[i-2][j-1];\n}\n// printf(\" %d\", s[j]);\n}\nres[i-1] = s;\n(*returnColumnSizes)[i-1] = i;\n// printf(\"| returnColumnSizes = %d\\n\", (*returnColumnSizes)[i-1]);\n}\nreturn res;\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/119.%20Pascal%27s%20Triangle%20II/", "title": "119. Pascal's Triangle II", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/119.%20Pascal%27s%20Triangle%20II/#problem", "title": "Problem", "text": "<p>Given an integer <code>rowIndex</code>, return the <code>rowIndexth</code> (0-indexed) row of the Pascal\u2019s triangle.</p> <p>In Pascal\u2019s triangle, each number is the sum of the two numbers directly above it</p> <p>Example 1:</p> <p>Input: rowIndex = 3 Output: [1,3,3,1]</p> <p>Example 2:</p> <p>Input: rowIndex = 0 Output: [1]</p> <p>Example 3:</p> <p>Input: rowIndex = 1 Output: [1,1]</p> <p>Constraints:</p> <ul> <li><code>0 &lt;= rowIndex &lt;= 33</code></li> </ul> <p>Follow up: Could you optimize your algorithm to use only <code>O(rowIndex)</code> extra space?</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/119.%20Pascal%27s%20Triangle%20II/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/119.%20Pascal%27s%20Triangle%20II/#white-board", "title": "White board", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/119.%20Pascal%27s%20Triangle%20II/#analyzing-the-problem", "title": "Analyzing the problem", "text": "<p>It nice to have some follow up, so I decided to go up with that route directy</p> <p>The problem have quote directly that</p> <p>(0-indexed) row of the Pascal\u2019s triangle.</p> <ul> <li>This mean, we have <code>0 -&gt; [1]</code> and <code>1 -&gt; [1,1]</code> as a base value</li> <li>I overlook about this so it take me some time to realized, mostly because of why my result return to <code>[1,2,1]</code> instead of <code>[1,3,3,1]</code> with row index 3.</li> <li>There is a lot of Off by one error to be consider like:<ul> <li>We need to start calculating at row 2</li> <li>The calculating need to add 1 to the last number every time process to the next row.</li> </ul> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/119.%20Pascal%27s%20Triangle%20II/#ideal", "title": "Ideal", "text": "<p>Now let talk about the main function solved the problem </p> <ul> <li>Let say I have a full  <code>int[rowIndex]</code> array to work at</li> <li>Start at 2 (0 and 1 index is base level)</li> <li>A triangle calculating formula is that: With row index i (i&gt;=2), it always have</li> </ul> <pre><code>row[i].length = i + 1 //0 indexed, remember off by one error\nrow[i, 0]     = 1 //First element\nrow[i, i + 1] = 1 //Last element\n// For all other element\nrow[i, j] = row[i-1, j] + row[i-1, j-1] </code></pre> <p>So the ideal is that we update the row to the next one directly using above info with out the need to create a new array.</p> <p>By the define, a array that being used for storing result shouldn\u2019t being count for space complexity. But let say we only have a single array to work with here. </p> <p>Also <code>O(rowIndex)</code> extra space, mean we can still make 2 array with <code>rowIndex</code> length.</p> <p>To do that, I need see that: <code>row[i-1, j]</code> is update to <code>row[i, j]</code> by adding <code>row[i-1, j-1]</code>. We overwrite the value of our row value, so that:</p> <pre><code>row[i, j] = row[i-1, j] + row[i-1, j-1]\n</code></pre> <p>become in-depended with <code>i</code>, making it:</p> <pre><code>row[j]    = row[j] + row[j - 1]\n</code></pre> <p>Let enforce a rule that we update from left to right. So j value running from <code>1, 2, 3, ...</code> so on till current row length. We could see this isn\u2019t work, as we update the value of <code>row[j]</code>, the next time we need to access it previous value to calculating <code>row[j+1] = row[j+1] + row[j]</code>.</p> <p>So we need to have a temporary variable to storing the previous value of row[j] before overwriting it.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/119.%20Pascal%27s%20Triangle%20II/#quick-implementation", "title": "Quick implementation", "text": "<p>With that much information, i directly try to implementation in python. </p> <p>Which is accepted with </p> <p>Runtime 44 ms, Beats 18.96% Memory 16.2 MB, Beats 53.14%</p> <pre><code>class Solution:\ndef getRow(self, rowIndex: int) -&gt; List[int]:\nres = [1,1]\nif (rowIndex == 0):\nreturn [1]\nif (rowIndex == 1):\nreturn [1,1]\nfor row in range(2,rowIndex+1):\nmemo = res[0]\nfor i in range(1,row):\nmemo, res[i] = res[i], res[i] + memo\nres.append(1)\nreturn res\n</code></pre> <ul> <li>We not have to go for a fix size array just yet, just to implement the process of update res array using our formula.</li> <li><code>memo</code> is used to store the previous value of <code>res[i]</code>, while <code>res[i]</code> is overwritten by the value of <code>res[i] + memo = res[i] + res[i-1]</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/119.%20Pascal%27s%20Triangle%20II/#c-implementation", "title": "C Implementation", "text": "<p><code>c</code> <code>O(n ** 2)</code></p> <p>C is a language that I can have better control on the program memory, so I choosing it to finish the problem. Not thing to fancy, i try to implementing the python code exactly.</p> <p>But I do run into some Segfault because of 0-index causing Off by one error, cost me some time to debug and rewriting the code.</p> <p>The final implementation is here:</p> <p>Which is accepted with </p> <p>Runtime 3 ms, Beats 51.12% Memory 6.4 MB, Beats 38.98%</p> <pre><code>/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getRow(int rowIndex, int* returnSize){\n*returnSize = rowIndex + 1;\nint* res = malloc(sizeof (int) * *returnSize);\nres[0] = 1;\nif (rowIndex == 0) return res;\nres[1] = 1;\nfor (int currRow = 2; currRow &lt;= rowIndex; currRow ++){\nint memo = res[0];\nint temp = 0; for (int i = 1; i &lt; currRow; i ++){\ntemp = memo;\nmemo = res[i];\nres[i] = res[i] + temp;\n}\nres[currRow] = 1;\n}\nreturn res;\n}\n</code></pre> <p>I try to do some more fancy by pushing all of the variable definition to the top of the function, while it doesn\u2019t help anything with the memory, but at least i get 0 ms runtime (Beats 100.00%of users with C!!!). But this is base purely on the load of Leetcode, so it quite random/unreliable on this runtime result. </p> <p>I do look at some answer of other user using Leetcode interface with 0ms run, or lower memory. They doesn\u2019t making any difference from my code (other than having different variable name), which just mean that Leetcode result is unreliable.</p> <p>Yanked code</p> <pre><code>int* getRow(int rowIndex, int* returnSize){\nint size = rowIndex + 1;\nint *output = malloc(size * sizeof(int));\noutput[0] = 1;\nint a = 0, b = 1;\nfor(int i = 0; i &lt;= rowIndex; i++){\na = 0, b = 1;\nfor(int j = 0; j &lt; i; j++){\noutput[j] = a + b;\na = b;\nb = output[j+1];\n}\noutput[i] = 1;\n}\n*returnSize = size;\nreturn output;\nfree(output);\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock/", "title": "121. Best Time to Buy and Sell Stock", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "linear_search", "python", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock/#problem", "title": "Problem", "text": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p> <p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p> <p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return <code>0</code>.</p> <p>Example 1:</p> <p>Input: prices = [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "linear_search", "python", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock/#solve", "title": "Solve", "text": "<ul> <li>I already solve 714. Best Time to Buy and Sell Stock with Transaction Fee, still, it not quite the same.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "linear_search", "python", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock/#brute-force", "title": "Brute force", "text": "<p><code>O(n ** 2)</code></p> <ul> <li>A quick <code>n**2</code> answer</li> <li>Which don\u2019t care about how input <code>prices</code> work<ul> <li>We checking all possible buy time (which cost O(n) time)</li> <li>each time, we find the best time to sell stock (which also cost  <code>O(n)</code> time)</li> </ul> </li> </ul> <pre><code>class Solution:\ndef maxProfit(self, prices: List[int]) -&gt; int:\nif len(prices) == 1:\nreturn 0\nmax_price = 0\nfor i in range(len(prices)):\nfor j in range(i+1, len(prices)):\nif max_price &gt;= prices[j] - prices[i]:\ncontinue\nmax_price = prices[j] - prices[i]\nreturn max_price\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "linear_search", "python", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock/#optimizing", "title": "Optimizing", "text": "<p><code>O(n)</code></p> <ul> <li>We can optimize this by try find the max price of <code>prices[i+1: len(prices)]</code> immediately. We could use a Dynamic programming for storing all Maximum value of <code>prices[i+1: len(prices)]</code> <pre><code># TODO\n</code></pre></li> </ul> <p>Or calculating it on the fly in the same loop that checking all possible stock buy times.</p> <p>In final implementation, I instead do a reverse job, where I checking all possible stock sell time (which between <code>[1 .. len(prices) - 1]</code>).</p> <ul> <li>For this case, we instead find min price or <code>prices[0: j]</code>. Keeping track of it in <code>curr_min_price</code> variable. </li> <li>This just update the stock best <code>max_price</code> from 1 to n. Using this formula <pre><code>max_price = prices[index] - curr_min_price\n</code></pre></li> </ul> <p>Final implementation</p> <pre><code>class Solution:\ndef maxProfit(self, prices: List[int]) -&gt; int:\nif len(prices) == 1:\nreturn 0\ncurr_min_price = prices[0] # keep track of the min of value price[0:index-1]\nmax_price = 0\nfor index, value in enumerate(prices):\nif index == 0:\ncontinue\nif max_price &lt; prices[index] - curr_min_price:\nmax_price = prices[index] - curr_min_price\nif curr_min_price &gt; prices[index]:\ncurr_min_price = prices[index]\nreturn max_price\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "linear_search", "python", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/122.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20II/", "title": "122. Best Time to Buy and Sell Stock II", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/122.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20II/#problem", "title": "Problem", "text": "<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p> <p>On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</p> <p>Find and return the maximum profit you can achieve.</p> <p>Example 1: <pre><code>**Input:** prices = [7,1,5,3,6,4]\n**Output:** 7\n**Explanation:** Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/122.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20II/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/122.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20II/#dynamic-programing-python", "title": "Dynamic programing <code>python</code>", "text": "<ul> <li> <p>I already solve 714. Best Time to Buy and Sell Stock with Transaction Fee,  and it quite the same.</p> </li> <li> <p>Here is quick modified to get the right answer. Which just reduce the fee part <pre><code>class Solution:\ndef maxProfit(self, prices: List[int]) -&gt; int:\nbestProfit = [0, 0]\nfor step, price in enumerate(prices):\nif step == 0:\nbestProfit[1] = - price\ncontinue\ntmp = bestProfit[0]\nbestProfit[0] = max(bestProfit[0], bestProfit[1] + price)\nbestProfit[1] = max(bestProfit[1], tmp - price)\nreturn bestProfit[0]\n</code></pre></p> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/124.%20Binary%20Tree%20Maximum%20Path%20Sum/", "title": "124. Binary Tree Maximum Path Sum", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/124.%20Binary%20Tree%20Maximum%20Path%20Sum/#problem", "title": "Problem", "text": "<p>A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.</p> <p>The path sum of a path is the sum of the node\u2019s values in the path.</p> <p>Given the <code>root</code> of a binary tree, return the maximum path sum of any non-empty path.</p> <p>Example 1:</p> <p></p> <p>Input: root = [1,2,3] Output: 6 Explanation: The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6.</p> <p>Example 2:</p> <p></p> <p>Input: root = [-10,9,20,null,null,15,7] Output: 42 Explanation: The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = 42.</p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 3 * 104]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/124.%20Binary%20Tree%20Maximum%20Path%20Sum/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/124.%20Binary%20Tree%20Maximum%20Path%20Sum/#dynamic-programming-on-tree", "title": "Dynamic programming on Tree", "text": "<p>I hate it when I can\u2019t control how <code>TreeNode</code> work, my first approach to to populate all <code>TreeNode</code> with it <code>maxPath</code> (the max value of path that contain its self as the end node).</p> <p>We calculate base on this formula:</p> <ul> <li><code>maxPath(root) = Max(0, root.val) + max(maxPath(left), maxPath(right))</code></li> </ul> <p>After that, we try to find the Maximum Path Sum by checking all possible <code>TreeNode</code></p> <ul> <li><code>maxPathSum(root) = pathOnlyIn(Root) = max(pathOnlyIn(Left) , pathOnlyIn(Right) , pathGoTrough(Root))</code> </li> <li><code>pathGoTrough(Root) = maxPath(left) + maxPath(right) + root.val</code></li> <li><code>pathOnlyIn(None) = 0</code></li> <li><code>pathGoTrough(None) = Not define</code></li> </ul> <p>But, I can\u2019t just adding the <code>left.maxPath</code>, <code>right.maxPath</code>; so here is the code that combining both in one loop  <pre><code>class Solution:\ndef maxPathSum(self, root: Optional[TreeNode]) -&gt; int:\ndef helper(root):\nif root is None:\nreturn 0, -100000\nmaxLeftPath, onlyLeftMax = helper(root.left)\nmaxRightPath, onlyRightMax = helper(root.right)\nmaxRootPath = max(root.val, root.val + max(maxLeftPath, maxRightPath))\nonlyRootMax = root.val + max(0, maxLeftPath) + max(0, maxRightPath)\nmaxPathSum = max(onlyLeftMax, onlyRightMax, onlyRootMax)\nreturn maxRootPath, maxPathSum\n_, maxPathSum = helper(root) \nreturn maxPathSum\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/125.%20Valid%20Palindrome/", "title": "125. Valid Palindrome", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/125.%20Valid%20Palindrome/#problem", "title": "Problem", "text": "<p>A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p> <p>Given a string <code>s</code>, return <code>true</code> if it is a palindrome, or <code>false</code> otherwise.</p> <p>Example 1:</p> <pre><code>**Input:** s = \"A man, a plan, a canal: Panama\"\n**Output:** true\n**Explanation:** \"amanaplanacanalpanama\" is a palindrome.\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/125.%20Valid%20Palindrome/#solve", "title": "Solve", "text": "<p>Do as the problem ask, without any optimization:</p> <ol> <li>Lower key all character,</li> <li>Keep all alphabet and numbers character only, storing in a new variable call <code>alphabel_only</code></li> <li>Check if <code>alphabel_only</code> backward and forward is the same</li> </ol> <pre><code>class Solution:\ndef isPalindrome(self, s: str) -&gt; bool:\ns = s.lower()\nalphabel_only = \"\"\nfor c in s:\nif ord(\"a\") &lt;= ord(c) &lt;= ord(\"z\") or ord(\"0\") &lt;= ord(c) &lt;= ord(\"9\") :\nalphabel_only += c\nfor i, c in enumerate(alphabel_only):\nif alphabel_only[len(alphabel_only) - 1 - i] != c:\nreturn False\nreturn True\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/130.%20Surrounded%20Regions/", "title": "130. Surrounded Regions", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "BFS", "python"]}, {"location": "notes/Leetcode%20100-1000/130.%20Surrounded%20Regions/#problem", "title": "Problem", "text": "<p>Given an <code>m x n</code> matrix <code>board</code> containing <code>'X'</code> and <code>'O'</code>, capture all regions that are 4-directionally surrounded by <code>'X'</code>.</p> <p>A region is captured by flipping all <code>'O'</code>s into <code>'X'</code>s in that surrounded region.</p> <p>Example 1:</p> <p></p> <p>Input: board = <code>[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"|\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]</code> Output: <code>[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"|\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]</code> Explanation: Notice that an \u2018O\u2019 should not be flipped if:</p> <ul> <li>It is on the border, or</li> <li>It is adjacent to an \u2018O\u2019 that should not be flipped. The bottom \u2018O\u2019 is on the border, so it is not flipped. The other three \u2018O\u2019 form a surrounded region, so they are flipped.</li> </ul> <p>Example 2:</p> <p>Input: board = <code>[[\"X\"|\"X\"]]</code> Output: <code>[[\"X\"|\"X\"]]</code></p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>board[i][j]</code> is <code>'X'</code> or <code>'O'</code>.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "BFS", "python"]}, {"location": "notes/Leetcode%20100-1000/130.%20Surrounded%20Regions/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "BFS", "python"]}, {"location": "notes/Leetcode%20100-1000/130.%20Surrounded%20Regions/#simulation-using-bfs", "title": "Simulation using BFS", "text": "<p><code>python</code></p> <p>Just focus on the rule in the example: </p> <p>an \u2018O\u2019 should not be flipped if:</p> <ul> <li>It is on the border, or</li> <li>It is adjacent to an \u2018O\u2019 that should not be flipped.</li> </ul> <p>So I check all the border for <code>'O'</code>. Adding them all to a queue, and start do a BFS on all of them to find if any Adj cell is also <code>'O'</code>.</p> <p>After visiting all <code>'O'</code> that we should not flip (Which being track with our visited array <code>v</code>), flipping all other remain one.</p> <pre><code>class Solution:\ndef solve(self, board: List[List[str]]) -&gt; None:\n\"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\nm = len(board)\nn = len(board[0])\nq = []\nv = set()\nfor i in range(n):\nif board[0][i] == 'O':\nq.append((0, i))\nv.add((0, i))\nif board[m - 1][i] == 'O':\nq.append((m - 1, i))\nv.add((m - 1, i))\nfor i in range(m):\nif (i,0) not in v:\nif board[i][0]  == 'O':\nq.append((i, 0))\nv.add((i, 0))\nif (i, n - 1) not in v:\nif board[i][n - 1]  == 'O':\nq.append((i, n- 1))\nv.add((i, n - 1))\nwhile len(q) &gt; 0:\nx, y = q.pop(0)\nfor nx, ny in [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]:\nif not (0 &lt;= nx &lt; m and 0 &lt;= ny &lt; n):\ncontinue\nif (nx,ny) in v:\ncontinue\nv.add((nx,ny))\nif board[nx][ny] == 'O':\nq.append((nx,ny))\nfor i in range(m):\nfor j in range(n):\nif (i, j) not in v:\nboard[i][j] = 'X'\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "BFS", "python"]}, {"location": "notes/Leetcode%20100-1000/131.%20Palindrome%20Partitioning/", "title": "131. Palindrome Partitioning", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/131.%20Palindrome%20Partitioning/#problem", "title": "Problem", "text": "<p>Given a string <code>s</code>, partition <code>s</code> such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of <code>s</code>.</p> <p>Example 1: <pre><code>**Input:** s = \"aab\"\n**Output:** [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"|\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n</code></pre> Example 2: <pre><code>**Input:** s = \"a\"\n**Output:** [[\"a\"|\"a\"]]\n</code></pre> Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 16</code></li> <li><code>s</code> contains only lowercase English letters.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/131.%20Palindrome%20Partitioning/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/131.%20Palindrome%20Partitioning/#preprocess-data", "title": "Preprocess data", "text": "<p>The problem will be easier when we know all the palindrome substring of <code>s</code>. This is quite easy, we focusing this pattern of a palindrome string</p> <pre><code>palindrome_string = &lt; c &gt; + palindrome_substring + &lt; c &gt;\n</code></pre> <p>where <code>c</code> is repeating character.</p> <p>There is a lot of way to implement this function, the final result will be a <code>func(x,y)</code> that can quickly check substring <code>s[x:y]</code> is a palindrome or not in O(1) lookup time</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/131.%20Palindrome%20Partitioning/#dynamic-programming", "title": "Dynamic programming", "text": "<pre><code>        palindrome_string = []\ndef isPalindrome(x, y):\nreturn palindrome_string[y - x][x]\n# Find all palindrome\nfor size in range(0, len(s)):\ncurr_palindrome_string = []\nfor i in range(0, len(s)-size):\nif size == 0:\ncurr_palindrome_string.append(True)\ncontinue\nif size == 1:\ncurr_palindrome_string.append(s[i] == s[i+size])\ncontinue\ncheck = s[i] == s[i+size]\ncheck &amp;= isPalindrome(i+1, i+size-1)\ncurr_palindrome_string.append(check)\npalindrome_string.append(curr_palindrome_string)\n</code></pre> <p>We have <code>isPalindrome</code> is the <code>func(x,y)</code></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/131.%20Palindrome%20Partitioning/#recursion", "title": "Recursion", "text": "<pre><code>        cache2 = {}\ndef isPalindrome(x,y):\nif x &gt; y:\nreturn False\nif x == y:\nreturn True\nif (x,y) in cache2:\nreturn cache2[(x,y)]\nif s[x] != s[y]:\ncache2[(x, y)] = False\nreturn False\nif s[x+1:y] != \"\" and not isPalindrome(x+1,y-1):\ncache2[(x, y)] = False\nreturn False\ncache2[(x, y)] = True\nreturn True\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/131.%20Palindrome%20Partitioning/#getting-all-the-palindrome-split", "title": "Getting all the palindrome split", "text": "<p>After preprocessing data, We can then try to split the string base on:</p> <ul> <li>If the substring is palindrome, then try split it, continue split the remaining substring.</li> <li>If the substring isn\u2019t palindrome, pass</li> </ul> <pre><code>class Solution:\ndef partition(self, s: str) -&gt; List[List[str]]:\ndef isPalindrome(x, y):\n# Last implementation\ncache = {}\ndef palindrome_split(x, y):\nif x &gt;= y:\nreturn [[|]]\nif x == y - 1:\nreturn [[s[x:y|s[x:y]]]\nif (x, y) in cache:\nreturn cache[(x,y)]\npossible = []\nfor end in range(x,y):\nstart = x\ncurr = s[start:end+1]\nres = []\nif isPalindrome(start, end):\nall_pali = palindrome_split(end+1, y)\nfor pali in all_pali:\nres.append([curr] + pali)\npossible += res\ncache[(x,y)] = possible\nreturn cache[(x,y)]\nreturn palindrome_split(0, len(s))\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/131.%20Palindrome%20Partitioning/#java-implementation", "title": "Java implementation", "text": "<pre><code>class Solution {\nprivate int[][] cacheIsPalindrome;\nprivate int n;\nprivate List&lt;List&lt;String&gt;&gt;[][] cachePalindromeSplit;\nprivate String s;\nprivate boolean isPalindrome(int x, int y) {\nif (x &gt; y) return false;\nif (x == y) return true;\nif (cacheIsPalindrome[x][y] != 0) return cacheIsPalindrome[x][y] &gt; 0;\nif (s.charAt(x) != s.charAt(y)) {\ncacheIsPalindrome[x][y] = -1;\nreturn false;\n}\nif ((x + 1 &lt; y)   &amp;&amp; !isPalindrome(x + 1, y - 1)) {\ncacheIsPalindrome[x][y] = -1;\nreturn false;\n}\ncacheIsPalindrome[x][y] = 1;\nreturn true;\n}\nprivate List&lt;List&lt;String&gt;&gt; palindromeSplit(int x, int y) {\nif (x &gt;= y) {\nList&lt;List&lt;String&gt;&gt; result = new ArrayList&lt;&gt;();\nresult.add(new ArrayList&lt;&gt;());\nreturn result;\n}\nif (x == y - 1) {\nList&lt;List&lt;String&gt;&gt; result = new ArrayList&lt;&gt;();\nList&lt;String&gt; single = new ArrayList&lt;&gt;();\nsingle.add(s.substring(x, y));\nresult.add(single);\nreturn result;\n}\nif (!cachePalindromeSplit[x][y].isEmpty()) {\nreturn cachePalindromeSplit[x][y];\n}\nList&lt;List&lt;String&gt;&gt; possible = new ArrayList&lt;&gt;();\nfor (int end = x; end &lt; y; end++) {\nint start = x;\nString curr = s.substring(start, end + 1);\nList&lt;List&lt;String&gt;&gt; res = new ArrayList&lt;&gt;();\nif (isPalindrome(start, end)) {\nList&lt;List&lt;String&gt;&gt; all_pali = palindromeSplit(end + 1, y);\nfor (List&lt;String&gt; pali : all_pali) {\nList&lt;String&gt; combined = new ArrayList&lt;&gt;();\ncombined.add(curr);\ncombined.addAll(pali);\nres.add(combined);\n}\n}\npossible.addAll(res);\n}\ncachePalindromeSplit[x][y] = possible;\nreturn possible;\n}\npublic List&lt;List&lt;String&gt;&gt; partition(String s) {\nn = s.length();\ncacheIsPalindrome = new int[n+1][n+1];\ncachePalindromeSplit = new ArrayList[n+1][n+1];\nthis.s = s;\nfor (int i = 0; i &lt;= n; i++) for (int j = 0; j &lt;= n; j++) cachePalindromeSplit[i][j] = new ArrayList&lt;&gt;();\nreturn palindromeSplit(0, n);\n}\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/131.%20Palindrome%20Partitioning/#comparison", "title": "Comparison", "text": "<ul> <li>Caching can make a different</li> <li>Generate data on the fly using recursion may help on overall python time cost</li> </ul> Time Submitted Status Runtime Memory Language 08/11/2023 19:44 Accepted 502 ms 33.2 MB python3 08/11/2023 19:05 Accepted 521 ms 32.1 MB python3 08/11/2023 19:02 Accepted 600 ms 32.3 MB python3 <ul> <li>The caching is replace by allocate a two dimension array, here is the different between caching and not</li> </ul> Time Submitted Status Runtime Memory Language 08/11/2023 22:05 Accepted 46 ms 56 MB java 08/11/2023 22:00 Accepted 7 ms 55.2 MB java <ul> <li>If you want to make it even faster, we can do some cleaver way utilizing bottom-up call to build up each <code>List&lt;String&gt;</code>. Also, the <code>y</code> variable in <code>palindromeSplit</code> can be remove, it\u2019s not changing after all of calculations. The result implementation look like this:</li> </ul> <pre><code>    private List&lt;List&lt;String&gt;&gt; ans;\nprivate void FindSubstringsq`1(int ind, ArrayList&lt;String&gt; list) {\nif (ind == n) {\nans.add(new ArrayList&lt;String&gt;(list));\nreturn;\n}\nfor (int i = ind + 1; i &lt;= n; i++) {\nif (!isPalindrome(ind, i-1)) continue;\nlist.add(s.substring(ind, i));\nFindSubstrings(i, list);\nlist.remove(list.size() - 1);\n}\n}\npublic List&lt;List&lt;String&gt;&gt; partition(String s) {\nn = s.length();\nthis.s = s;\nans = new ArrayList&lt;List&lt;String&gt;&gt;();\nFindSubstrings(0, new ArrayList&lt;String&gt;());\nreturn ans;\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/134.%20Gas%20Station/", "title": "134. Gas Station", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/134.%20Gas%20Station/#problem", "title": "Problem", "text": "<p>There are <code>n</code> gas stations along a circular route, where the amount of gas at the <code>ith</code> station is <code>gas[i]</code>.</p> <p>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from the <code>ith</code> station to its next <code>(i + 1)th</code> station. You begin the journey with an empty tank at one of the gas stations.</p> <p>Given two integer arrays <code>gas</code> and <code>cost</code>, return the starting gas station\u2019s index if you can travel around the circuit once in the clockwise direction, otherwise return <code>-1</code>. If there exists a solution, it is guaranteed to be unique</p> <p>Example 1:</p> <p>Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2] Output: 3 Explanation: Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 4. Your tank = 4 - 1 + 5 = 8 Travel to station 0. Your tank = 8 - 2 + 1 = 7 Travel to station 1. Your tank = 7 - 3 + 2 = 6 Travel to station 2. Your tank = 6 - 4 + 3 = 5 Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3. Therefore, return 3 as the starting index.</p> <p>Example 2:</p> <p>Input: gas = [2,3,4], cost = [3,4,3] Output: -1 Explanation: You can\u2019t start at station 0 or 1, as there is not enough gas to travel to the next station. Let\u2019s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 0. Your tank = 4 - 3 + 2 = 3 Travel to station 1. Your tank = 3 - 3 + 3 = 3 You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3. Therefore, you can\u2019t travel around the circuit once no matter where you start.</p> <p>Constraints:</p> <ul> <li><code>n == gas.length == cost.length</code></li> <li><code>1 &lt;= n &lt;= 105</code></li> <li><code>0 &lt;= gas[i], cost[i] &lt;= 104</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/134.%20Gas%20Station/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/134.%20Gas%20Station/#white-board", "title": "White board", "text": "<p>Here I see two 2 option:</p> <ol> <li>A quick O(n ** 2) case:     Which we try on each start point, and simulating the running car (oblivious case)</li> <li>Try to kept the result (caching):<ul> <li>It hard to reuse the calculated path, if we ever try to reused, a space needed in worst case could be O(n ** 2). Here I could try pre-calculate sum gas[0..i] and cost[0..i]. But, again, it seem not that ideal using that could help solve the problem</li> <li>The next one I think it could be better is a sliding window on a recursive list<ul> <li>Start with left = right = 0</li> <li>When the window reach length = n, or | left - right | = n we can stop and return left </li> <li>While Increasing right, if the total of sliding window <code>total &lt; 0</code>, we increasing left till <code>total &gt;= 0</code></li> <li>This mean, if the ever <code>left &gt; n</code>, we have try all possible start point, thus we can\u2019t found a solution and return -1 </li> </ul> </li> </ul> </li> </ol> <p>Attempt on flow chart </p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/134.%20Gas%20Station/#implementation-1-on-2-trying-it-all", "title": "Implementation 1 : O(n ** 2) trying it all", "text": "<p><code>O(n ** 2)</code></p> <ul> <li>Still, even a easy thing could go wrong, it cost me quite some times to implement this some how ??</li> </ul> <pre><code>class Solution:\ndef canCompleteCircuit(self, gas: List[int], cost: List[int]) -&gt; int:\nn = len(gas)\nfor i in range(n):\ntotal_gas = gas[i] - cost[i]\nif total_gas &lt; 0:\ncontinue\ncheck = True\n# print (f\"gas: {total_gas}, at gas[{i}]\")\nfor j in range(1,n+1):\nnextGas = i + j\nnextGas %= n\nnextCost = cost[nextGas]\nnextGas = gas[nextGas]\ntotal_gas = total_gas + nextGas - nextCost\n# print (f\"gas: {total_gas}, at gas[{(i + j) % n}]\")\nif total_gas &lt; 0:\ncheck = False\nbreak\nif check:\nreturn i\nreturn -1\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/134.%20Gas%20Station/#sliding-window", "title": "Sliding window", "text": "<p><code>O(n)</code></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/134.%20Gas%20Station/#python", "title": "Python", "text": "<ul> <li>The flow chart is actually right, which is nice</li> <li><code>right</code> can only travel <code>2n</code>, <code>left</code> can only travel <code>n</code>, while it is nested, both is independent, making this a <code>O(n)</code> times complexity</li> </ul> <p>Still, the result isn\u2019t that great at all ? Here is final implementation</p> <p>1141ms Beats 22.82% of users with Python3</p> <pre><code>class Solution:\ndef canCompleteCircuit(self, gas: List[int], cost: List[int]) -&gt; int:\nn = len(gas)\ntotal = left = right = 0\nwhile right &lt; left + n:\ntotal += gas[right % n] - cost[right % n]\nwhile total &lt; 0:\ntotal -= gas[left] - cost[left]\nleft += 1\nif left &gt;= n:\nreturn -1\nright += 1\nreturn left\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/134.%20Gas%20Station/#any-other-language-implementation", "title": "Any other language implementation", "text": "<p>This make me feel like try on a different language, again, every one beat me some how while using C</p> <p>127ms Beats 53.02% of users with C</p> <p><code>c</code> <pre><code>int canCompleteCircuit(int* gas, int gasSize, int* cost, int costSize){\nint n = costSize;\nint total = 0;\nint left = 0;\nint right = 0;\nwhile (right &lt; left + n) {\ntotal += gas[right % n] - cost[right % n];\nwhile (total &lt; 0){\ntotal -= gas[left] - cost[left];\nleft += 1;            if (left &gt;= n) {\nreturn -1;\n}\n}\nright += 1;\n}\nreturn left;\n}\n</code></pre></p> <p>Still, Leetcode C calculating result implementation is slow (too much over head) i think, let try another, use rust this time. It still slower than a lot of people here ? <code>rust</code></p> <p>12ms Beats 69.15% of users with Rust</p> <pre><code>impl Solution {\npub fn can_complete_circuit(gas: Vec&lt;i32&gt;, cost: Vec&lt;i32&gt;) -&gt; i32 {\nlet n = gas.len();\nlet mut total = 0;\nlet mut left = 0;\nlet mut right = 0;\nwhile right &lt; left + n {\ntotal += gas[right % n] - cost[right % n];\nwhile total &lt; 0 {\ntotal -= gas[left] - cost[left];\nleft += 1;\nif left &gt;= n {\nreturn -1;\n}\n}\nright += 1;\n}\nleft as i32\n}\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/134.%20Gas%20Station/#still-why-yank-and-read-the-code", "title": "Still, why?? - Yank and read the code", "text": "<p><code>O(n)</code></p> <p>Here is the best code possible in rust (5ms)</p> <ul> <li>First it seem just add all gas and cost, enumerate it, result <code>(idx, diff)</code></li> <li>Wrapping a Fold to make a accumulator tuple on 3 variable: <code>(total_gas, current_gas, start)</code></li> <li>Loop through all index and <code>(idx, diff)</code> with key control flow:<ul> <li><code>current_gas &lt; 0</code> work just like total of our sliding window, and instead of increasing <code>left</code> by one each, we just need to jump to <code>index+1</code> (~ <code>right+1</code> in my implement) here it seem (?)</li> <li>It not even need to calculate anything above <code>O(n)</code>. The <code>total_gas</code> is obliviously the total of our sliding window if we ever found a result.  Which if it &lt; 0, making it a invalid result and we return <code>-1</code> </li> </ul> </li> <li>By all of this, return the final <code>total</code> accumulation on all <code>gas[i] - cost[i]</code>, and <code>start</code> value.</li> </ul> <p>For my thought, this have a lot of assuming and reasoning behind that we could ever use this type of return result. We are seem trying to:</p> <ul> <li>Combine our <code>right := left -&gt; left + n</code> accumulation loop</li> <li>With our <code>left</code> updating loop skip -&gt; Just jump to <code>index + 1</code> and set total to <code>0</code></li> <li>With reducing the need to recalculating <code>total_gas</code></li> </ul> <p>This all cost quite some time to analyzing and isn\u2019t seem to be possible with my current knowledge </p> <p>Resubmit the same code, result is worse than my implementation. This make me think that Leetcode is just in heavy load, and my implementation is good enough </p> <p>15ms Beats 44.68% of users with Rust</p> <pre><code>impl Solution {\npub fn can_complete_circuit(gas: Vec&lt;i32&gt;, cost: Vec&lt;i32&gt;) -&gt; i32 {\nassert!(gas.len() &gt; 0);\nassert_eq!(gas.len(), cost.len());\nlet (total, _, start) = gas\n.into_iter()\n.zip(cost.into_iter())\n.map(|(gas, cost)| gas - cost)\n.enumerate()\n.fold(\n(0, 0, 0),\n|(mut total_gas, mut current_gas, mut start), (idx, diff)| {\ntotal_gas += diff;\ncurrent_gas += diff;\nif current_gas &lt; 0 {\ncurrent_gas = 0;\nstart = idx + 1;\n}\n(total_gas, current_gas, start)\n},\n);\nif total &gt;= 0 {\nstart as i32\n} else {\n-1\n}\n}\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "c", "rust", "O(n ** 2)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/136.%20Single%20Number/", "title": "136. Single Number", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/136.%20Single%20Number/#problem", "title": "Problem", "text": "<p>Given a non-empty array of integers <code>nums</code>, every element appears twice except for one. Find that single one.</p> <p>You must implement a solution with a linear runtime complexity and use only constant extra space.</p> <p>Example 1: <pre><code>**Input:** nums = [2,2,1]\n**Output:** 1\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/136.%20Single%20Number/#solve", "title": "Solve", "text": "<ul> <li>Using binary <code>xor</code> (<code>^</code> operation in python), we can nullify any two time appear number  </li> <li>The remaining is the needed answer</li> </ul> <pre><code>class Solution:\ndef singleNumber(self, nums: List[int]) -&gt; int:\na_number = 0\nfor n in nums:\na_number ^= n\nreturn a_number\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/138.%20Copy%20List%20with%20Random%20Pointer/", "title": "138. Copy List with Random Pointer", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c"]}, {"location": "notes/Leetcode%20100-1000/138.%20Copy%20List%20with%20Random%20Pointer/#problem", "title": "Problem", "text": "<p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p> <p>Construct a deep copy of the list. The deep copy should consist of exactly <code>n</code> brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.</p> <p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p> <p>Return the head of the copied linked list.</p> <p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p> <ul> <li><code>val</code>: an integer representing <code>Node.val</code></li> <li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li> </ul> <p>Your code will only be given the <code>head</code> of the original linked list.</p> <p>Example 1:</p> <p></p> <p>Input: head = <code>[[7,null],[13,0],[11,4],[10,2],[1,0|7,null],[13,0],[11,4],[10,2],[1,0]]</code> Output: <code>[[7,null],[13,0],[11,4],[10,2],[1,0|7,null],[13,0],[11,4],[10,2],[1,0]]</code></p> <p>Example 2:</p> <p></p> <p>Input: head = <code>[[1,1],[2,1|1,1],[2,1]]</code> Output: <code>[[1,1],[2,1|1,1],[2,1]]</code></p> <p>Example 3:</p> <p></p> <p>Input: head = <code>[[3,null],[3,0],[3,null|3,null],[3,0],[3,null]]</code> Output: <code>[[3,null],[3,0],[3,null|3,null],[3,0],[3,null]]</code></p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 1000</code></li> <li><code>-10**4 &lt;= Node.val &lt;= 10**4</code></li> <li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c"]}, {"location": "notes/Leetcode%20100-1000/138.%20Copy%20List%20with%20Random%20Pointer/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c"]}, {"location": "notes/Leetcode%20100-1000/138.%20Copy%20List%20with%20Random%20Pointer/#de-linked-list", "title": "De-linked list", "text": "<p><code>c</code></p> <p>It quite nonsense on the node-&gt;random part of the problem. This making it impossible to create new node memory by any order, and we have to re-access and adding node-&gt;random value later. </p> <p>Also, we creating O(n) memory anyway, so it just better that we utilized our O(n) space to the fullest.</p> <ul> <li>This might mean create a continues array-like memory on the heap in one malloc and accessing it will be directly like an array.</li> <li>But we not have length of the Linked list provided, so we have no ideal on how to create our memory.</li> </ul> <p>I go for a easier approach first, which just delinked list with a array to storing all of the pointer. This help me:</p> <ul> <li>Having a length of the List</li> <li>Keeping a record of all pointer address</li> <li>Which make finding all node-&gt;random pointed to which node easier</li> </ul> <p>This information is needed for me reconstruct all node.</p> <pre><code>struct Node* copyRandomList(struct Node* head) {\nstruct Node* n[1000];\nint point[1000] = {0};\nstruct Node* p = head;\nint i = 0;\nint j = 0;\nint length = 0;\nn[0] = 0;\nwhile (p != 0) {\nn[i] = p;\np = p-&gt;next;\ni = i + 1;\n}\nlength = i;\nfor (i = 0; i &lt; length ; i ++) {\npoint[i] = 0;\n// printf(\"%d \", point[i]);\np = n[i]-&gt;random;\nfor (j = 0; j &lt; length; j ++) {\nif (p == n[j]) {\npoint[i] = j+1;\n}\n}\n// printf(\"%d \\n\", point[i]);\n}\nfor (i = length-1; i &gt;= 0 ; i --) {\n// printf(\"Why?\");\np = malloc(sizeof(struct Node));\np-&gt;val = n[i]-&gt;val;\np-&gt;next = 0;\nif (i &lt; length-1) {\np-&gt;next = n[i+1];\n}\nn[i] = p;\n// printf(\"At %d : %d %08p\\n\", i, n[i]-&gt;val, n[i]);\n}\n// printf(\"log!\\n\");\nfor (i = 0; i &lt; length ; i ++) {\n// printf(\"%d \", point[i]);\nif (point[i] == 0) {\nn[i]-&gt;random = 0;\n} else {\nn[i]-&gt;random = n[point[i] - 1];\n}\n}\nreturn n[0];\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c"]}, {"location": "notes/Leetcode%20100-1000/139.%20Word%20Break/", "title": "139. Word Break", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/139.%20Word%20Break/#problem", "title": "Problem", "text": "<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p> <p>Note that the same word in the dictionary may be reused multiple times in the segmentation.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 300</code></li> <li><code>1 &lt;= wordDict.length &lt;= 1000</code></li> <li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li> <li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li> <li>All the strings of <code>wordDict</code> are unique.</li> </ul> <p>Example 1: <pre><code>**Input:** s = \"leetcode\", wordDict = [\"leet\",\"code\"]\n**Output:** true\n**Explanation:** Return true because \"leetcode\" can be segmented as \"leet code\".\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/139.%20Word%20Break/#solve", "title": "Solve", "text": "<p>A example of dynamic programming.</p> <ul> <li>Using <code>set()</code> hash map for better string finding</li> <li>Using evaluation: If <code>s[1]</code> can be create by provided word dict, <code>s[2]</code> is also a word =&gt; that mean <code>s[1]+s[2]</code> can be create by provided word dict. We can using this to form a dynamic programming approach</li> </ul> <pre><code>class Solution:\ndef wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:\nwordDict = set(wordDict)\ndp = [False]*(len(s)+1)\ndp[0] = True\nfor i in range(1, len(s)+1):\nfor j in range(i):\nif dp[j] and (s[j:i] in wordDict):\ndp[i] = True\nreturn dp[len(s)]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/141.%20Linked%20List%20Cycle/", "title": "141. Linked List Cycle", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/141.%20Linked%20List%20Cycle/#problem", "title": "Problem", "text": "<p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail\u2019s <code>next</code> pointer is connected to. Note that <code>pos</code> is not passed as a parameter.</p> <p>Return <code>true</code> if there is a cycle in the linked list. Otherwise, return <code>false</code>.</p> <p>Example 1:</p> <p></p> <p>Input: head = [3,2,0,-4], pos = 1 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/141.%20Linked%20List%20Cycle/#solve", "title": "Solve", "text": "<p>Keep tracked of any node that we have pass by a hashmap. If we step in a tracked node, then there is a cycle, and we can return <code>True</code>.</p> <p>Return <code>False</code> if otherwise</p> <pre><code>class Solution:\ndef hasCycle(self, head: Optional[ListNode]) -&gt; bool:\ncache = set()\np = head\nwhile p:\nif p in cache:\nreturn True\ncache.add(p)\np = p.next\nreturn False \n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/146.%20LRU%20Cache/", "title": "146. LRU Cache", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/146.%20LRU%20Cache/#problem", "title": "Problem", "text": "<p>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.</p> <p>Implement the <code>LRUCache</code> class:</p> <ul> <li><code>LRUCache(int capacity)</code> Initialize the LRU cache with positive size <code>capacity</code>.</li> <li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li> <li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, evict the least recently used key.</li> </ul> <p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= capacity &lt;= 3000</code></li> <li><code>0 &lt;= key &lt;= 104</code></li> <li><code>0 &lt;= value &lt;= 105</code></li> <li>At most <code>2 * 105</code> calls will be made to <code>get</code> and <code>put</code>.</li> </ul> <p>Example 1: <pre><code>**Input**\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4|2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n**Output**\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n</code></pre> Explanation <pre><code>LRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/146.%20LRU%20Cache/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/146.%20LRU%20Cache/#using-build-in", "title": "Using build-in", "text": "<p>Using built-in class <code>OrderedDict</code> of python</p> <pre><code>from collections import OrderedDict\nclass LRUCache:\ndef __init__(self, capacity: int):\nself.capacity = capacity\nself.cache = OrderedDict()\ndef get(self, key: int) -&gt; int:\nif key in self.cache:\nself.cache.move_to_end(key)\nreturn self.cache[key]\nelse:\nreturn -1\ndef put(self, key: int, value: int) -&gt; None:\nif key in self.cache:\nself.cache.move_to_end(key)\nelse:\nif len(self.cache) &gt;= self.capacity:\nself.cache.popitem(last=False)\nself.cache[key] = value\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/146.%20LRU%20Cache/#reimplementation-double-linked-list", "title": "Reimplementation - Double Linked list", "text": "<p>This is a hard task, and require a lot of knowledge from a person. Here is a double linked list version where</p> <ul> <li>Adding a node is pushing it in to end of the linked list, which cost O(1).</li> <li>Popping a node will need  <pre><code>class Node:\ndef __init__(self, key, value):\nself.key = key\nself.value = value\nself.prev = None\nself.next = None\nclass LRUCache:\ndef __init__(self, capacity: int):\nself.capacity = capacity\nself.count = 0\nself.head = None\nself.tail = None\nself.hashmap = {}\ndef delete_node(self, node):\nif node.prev:\nnode.prev.next = node.next\nelse:\nself.head = node.next\nif node.next:\nnode.next.prev = node.prev\nelse:\nself.tail = node.prev\ndef add_to_front(self, node):\nnode.next = self.head\nnode.prev = None\nif self.head:\nself.head.prev = node\nself.head = node\nif not self.tail:\nself.tail = node\ndef update_lru_cache(self, key, value):\nnode = self.hashmap[key]\nif node:\nnode.value = value\nself.delete_node(node)\nself.add_to_front(node)\ndef get(self, key: int) -&gt; int:\nnode = self.hashmap.get(key)\nif node:\nself.delete_node(node)\nself.add_to_front(node)\nreturn node.value\nelse:\nreturn -1\ndef put(self, key: int, value: int) -&gt; None:\nif key in self.hashmap:\nself.update_lru_cache(key, value)\nelse:\nif self.count == self.capacity:\nself.hashmap.pop(self.tail.key)\nself.delete_node(self.tail)\nself.count -= 1\nnew_node = Node(key, value)\nself.hashmap[key] = new_node\nself.add_to_front(new_node)\nself.count += 1\n</code></pre></li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#define MAX_LOOKUP_SIZE (unsigned long)1e4\ntypedef struct cache_node {\nint key;\nint val;\nstruct cache_node* next;\nstruct cache_node* prev;\n} cache_node;\ntypedef struct {\ncache_node* cache;\ncache_node head;\nint capacity;\nint size;\ncache_node* lookup[MAX_LOOKUP_SIZE];\n} LRUCache;\n// Function to create a new cache node\ncache_node* createNode(int key, int value) {\ncache_node* newNode = (cache_node*)malloc(sizeof(cache_node));\nnewNode-&gt;key = key;\nnewNode-&gt;val = value;\nnewNode-&gt;next = NULL;\nnewNode-&gt;prev = NULL;\nreturn newNode;\n}\n// Function to insert a node at the tail of the doubly linked list\nvoid insertAtTail(cache_node* head, cache_node* node) {\ncache_node* tail = head-&gt;prev;\nnode-&gt;next = tail-&gt;next;\nnode-&gt;prev = tail;\ntail-&gt;next = node;\nnode-&gt;next-&gt;prev = node;\n}\n// Function to remove a node from the doubly linked list\nvoid removeNode(cache_node* node) {\nnode-&gt;next-&gt;prev = node-&gt;prev;\nnode-&gt;prev-&gt;next = node-&gt;next;\n}\n// Function to move a node to the tail of the doubly linked list (mark as least recently used)\nvoid makeLRU(cache_node* head, cache_node* node) {\nremoveNode(node);\ninsertAtTail(head, node);\n}\nLRUCache* lRUCacheCreate(int capacity) {\nLRUCache* lru = (LRUCache*)malloc(sizeof(LRUCache));\nmemset(lru-&gt;lookup, 0, sizeof(lru-&gt;lookup));\nlru-&gt;cache = (cache_node*)malloc(sizeof(cache_node) * capacity);\nlru-&gt;size = 0;\nlru-&gt;capacity = capacity;\nlru-&gt;head.next = lru-&gt;head.prev = &amp;lru-&gt;head;\nreturn lru;\n}\nint lRUCacheGet(LRUCache* obj, int key) {\ncache_node* found = obj-&gt;lookup[key];\nif (!found) {\nreturn -1;\n}\nmakeLRU(&amp;obj-&gt;head, found);\nreturn found-&gt;val;\n}\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\ncache_node* found = obj-&gt;lookup[key];\nif (found) {\nfound-&gt;val = value;\nmakeLRU(&amp;obj-&gt;head, found);\nreturn;\n}\ncache_node* head = obj-&gt;head.next;\ncache_node* tmp;\n/* Evict case */\nif (obj-&gt;capacity == obj-&gt;size) {\nobj-&gt;lookup[head-&gt;key] = NULL;\nremoveNode(head);\ntmp = head;\n} else {\ntmp = &amp;obj-&gt;cache[obj-&gt;size++];\n}\ntmp-&gt;key = key;\ntmp-&gt;val = value;\nobj-&gt;lookup[key] = tmp;\ninsertAtTail(&amp;obj-&gt;head, tmp);\n}\nvoid lRUCacheFree(LRUCache* obj) {\nfree(obj-&gt;cache);\nfree(obj);\n}\n</code></pre> <p>For compiler file and testing, you want to add main function <pre><code>int main() {\nLRUCache* cache = lRUCacheCreate(2);\nlRUCachePut(cache, 1, 1);\nlRUCachePut(cache, 2, 2);\nprintf(\"%d\\n\", lRUCacheGet(cache, 1)); // Output: 1\nlRUCachePut(cache, 3, 3);\nprintf(\"%d\\n\", lRUCacheGet(cache, 2)); // Output: -1\nlRUCachePut(cache, 4, 4);\nprintf(\"%d\\n\", lRUCacheGet(cache, 1)); // Output: -1\nprintf(\"%d\\n\", lRUCacheGet(cache, 3)); // Output: 3\nprintf(\"%d\\n\", lRUCacheGet(cache, 4)); // Output: 4\nlRUCacheFree(cache);\nreturn 0;\n}\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/148.%20Sort%20List/", "title": "148. Sort List", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n log n)"]}, {"location": "notes/Leetcode%20100-1000/148.%20Sort%20List/#problem", "title": "Problem", "text": "<p>Given the <code>head</code> of a linked list, return the list after sorting it in ascending order.</p> <p>Example 1:</p> <p></p> <p>Input: head = [4,2,1,3] Output: [1,2,3,4]</p> <p>Example 2:</p> <p></p> <p>Input: head = [-1,5,3,4,0] Output: [-1,0,3,4,5]</p> <p>Example 3:</p> <p>Input: head = [] Output: []</p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 5 * 104]</code>.</li> <li><code>-105 &lt;= Node.val &lt;= 105</code></li> </ul> <p>Follow up: Can you sort the linked list in <code>O(n logn)</code> time and <code>O(1)</code> memory (i.e. constant space)?</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n log n)"]}, {"location": "notes/Leetcode%20100-1000/148.%20Sort%20List/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n log n)"]}, {"location": "notes/Leetcode%20100-1000/148.%20Sort%20List/#quick-thought-and-white-board", "title": "Quick thought and white board", "text": "<p>O(1) memory could mean using in-place sorting this seem not that possible for any O(n log n). Still, I think could try using merge sort here, this make possible as we dealing with linked list, which it self have some ideal way of memory handling.</p> <p>Quick though on merge sort with bottom up appoarch </p> <p>Flow chart attempt </p> <p>Merge sort is quite a complex thing to do a flow chart </p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n log n)"]}, {"location": "notes/Leetcode%20100-1000/148.%20Sort%20List/#implementation-merge-sort-bottom-up", "title": "Implementation Merge sort bottom up", "text": "<p>This is hard, a really hard way to do a simple thing, while the result is just too bad in python.</p> <p>Doing it in <code>O(1)</code> space</p> <p>My flow chart is garbage here, but let talk about it:</p> <ul> <li>First, we want to split the linked list. This can be done using Bottom up or Top down approach, which here I using bottom up:<ul> <li>This is done by split them into a <code>length = 2 ** i = 1 &lt;&lt; i</code> , or <code>length in [1, 2, 4, 8, ...]</code></li> <li>If this adding up to the length of the inputted linked list, we are done merging</li> <li>If the linked list isn\u2019t being traversal all the way yet, this mean we can split it to at least two linked array. So, we have to merge it   </li> <li>This mean, we trying to merge two linked list length <code>~ length</code> together</li> </ul> </li> <li>Merge Sort isn\u2019t a big of a deal, but we need at least 4 input:<ul> <li><code>Start</code> : This is the handle of the Linked list, which isn\u2019t in the merge range (or sorted range) and remain unchanged. This require so that we can keep the linked list flow in right order. We should have <code>Start = prev_Left</code></li> <li><code>Left</code>: This is the head of First list, The first list should be <code>Left -&gt; ... -&gt; prev_Right</code></li> <li><code>Right</code>: This is the head of Second list, which should be <code>Right -&gt; ... -&gt; prev_End</code></li> <li><code>End</code>: Similar to start, but it out side merge range and at the end.</li> <li>We done the merge part by:<ul> <li>Start with <code>leash = Start</code>, <code>p</code> start from start of the first linked list <code>Left</code>, <code>q</code>  start from start of the second linked list <code>Right</code>.</li> <li>Link it to either <code>p</code> or <code>q</code> base on their value, minimum have higher piority.<ul> <li>If either reach their corresponded end (<code>p == Right</code> or <code>q == End</code>), we push all remain <code>p</code> or <code>q</code>  into leash</li> </ul> </li> <li>The last <code>leash</code> is linked to <code>End</code></li> <li>To help our next merge, we return the <code>leash</code> which is the next <code>start</code> point of the next merge (if had) </li> </ul> </li> </ul> </li> <li>This mean, we have to handle the main loop to extract and call merge sort on all needed for input <code>(start, left, right, end)</code><ul> <li>To simplify the problem, I create a temp <code>handle</code> that connect to <code>head</code> of inputted linked list, this mean case where <code>left = head</code> can have <code>start = handle</code> </li> <li>We can loop through the linked list once, each time keep track of start, left, right, end:<ul> <li>If we have <code>left == head, right == None, end == None</code>, this mean we done merge and the linked list is sorted</li> <li>If we have <code>left != head, right == None, end == None</code>, this mean we can skip the merge function and go to next length</li> <li>If we have <code>right != None</code>, we try to reach till <code>end</code>:<ul> <li>We need to merge founded <code>start, left, right, end</code></li> <li>If <code>end == None</code>, which mean we not have any remain node to merge, so we go to the next length</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Here, I just please my self if I have some extra way to contain split point, like a array or some thing similar, but oh well. </p> <p>645ms Beats 14.82% of users with Python3</p> <pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\ndef sortList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\ndef merge(start, left, right, end):\nleash = start\np = left\nq = right\nwhile True:\nif p != right and q != end:\nif p.val &lt; q.val:\nleash.next = p\nleash = leash.next\np = p.next\nelse:\nleash.next = q\nleash = leash.next\nq = q.next\nelif p != right:\nleash.next = p\nleash = leash.next\np = p.next\nelif q != end:\nleash.next = q\nleash = leash.next\nq = q.next\nelif p == right and q == end:\nbreak\n# print(leash.val)\nleash.next = end\nreturn leash\nhandle = ListNode(0, head)\nfor i in range(4 * 4 * 4 * 4):\nlength = 1 &lt;&lt; i\nstart = handle\nend = None\nwhile True:\np = start.next\nq = p\nfor _ in range(length):\nif q == None:\nif p == handle.next:\nreturn handle.next\nelse:\nbreak\nq = q.next\nif q == None:\nbreak\nend = q\nfor _ in range(length):\nif end == None:\nbreak\nend = end.next\nprev_end = merge(start, p, q, end)\n# print(handle, start.val, p.val, q.val, end == None)\nif end != None:\nstart = prev_end\nelse:\nbreak\nreturn handle.next\n</code></pre> <p>Obvious way is just delinked list and sort the whole thing in one go, but this is fine. I don\u2019t think this code is unreadable, but it quite hard to implement.</p> <p>This mean, I should care more about the approach before decide to code the thing. Let see some easier approach, while of course using some thing that rewarded than <code>python</code>.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n log n)"]}, {"location": "notes/Leetcode%20100-1000/148.%20Sort%20List/#top-down-merge-sort", "title": "Top down Merge sort", "text": "<p><code>O(n log n)</code></p> <ul> <li>Well, top down is even harder, you want to split the list in half. Every single time.</li> </ul> <p>TBH I taking longer to finish this, but overall the code look easier to understand that the bottom up approach  - The main point is that we split it into actual Linked list, rather than keeping it inplace - This reduce the need of <code>start</code> and <code>end</code> variable</p> <ul> <li>Now, the merge sort just need to received a single linked list as input. Split it in half, sort each half, then merge it</li> <li>For the split, we split them into two real linked list (link end of left and right into <code>NIL</code> or <code>0</code>) <ul> <li>Split could use two pointer to find the middle Node.</li> <li>A <code>prev_p</code> is used to track the end of left linked list, so we can set <code>prev_p -&gt; next = 0</code> to split left into a different linked list.</li> </ul> </li> <li>Other than that, the main merge flow work the same.<ul> <li>We still need temp value to hold the <code>head</code> of new list. Which is <code>temp.next</code> here, I use a stack allocate <code>temp</code> variable so that I not need to free that address after finishing the function.  </li> <li>Return the head <code>temp.next</code> of new list so that after merge old head could have been move to other place merge</li> </ul> </li> </ul> <p>67ms Beats 61.63% of users with C</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\ntypedef struct ListNode Node;\n// void printLinkedList(Node* head) {\n//     Node* p = head;\n//     while (p != 0) {\n//         printf(\"%d \", p-&gt;val);\n//         p = p-&gt;next;\n//     }\n//     printf(\"\\n\");\n// }\nvoid split_half (Node* head, Node** left, Node** right) {\nif (head == 0) {\n*left = 0;\n*right = 0;\nreturn;\n}\nNode *prev_p = 0;\nNode *p = head;\nNode *q = head;\nwhile (true) {\nprev_p = p;\np = p-&gt;next;\nq = q-&gt;next;\nif (q == 0)\nbreak;\nq = q-&gt;next;\nif (q == 0)\nbreak;\n}\n*left = head;\nprev_p-&gt;next = 0;\n*right = p;\n}\nNode* merge_sort(Node* head) {\nif (head == 0 || head-&gt;next == 0) {\nreturn head;\n}\nNode temp;\nNode* leash = &amp;temp; Node* left, *right;\nsplit_half(head, &amp;left, &amp;right);\n// if (left != 0) printLinkedList(left);\n// if (right != 0) printLinkedList(right);\n// printf(\"\\n\");\nleft = merge_sort(left);\nright = merge_sort(right);\nNode* p = left;\nNode* q = right;\nwhile (true) {\nif (p != 0 &amp;&amp; q != 0) {\nif (p-&gt;val &lt; q-&gt;val) {\nleash-&gt;next = p;\nleash = leash-&gt;next;\np = p-&gt;next;\n} else {\nleash-&gt;next = q;\nleash = leash-&gt;next;\nq = q-&gt;next;\n}\n} else if (p != 0) {\nleash-&gt;next = p;\nleash = leash-&gt;next;\np = p-&gt;next;\n} else if (q != 0) {\nleash-&gt;next = q;\nleash = leash-&gt;next;\nq = q-&gt;next;\n} else if (p == 0 &amp;&amp; q == 0) {\nbreak;\n}\n}\n// printLinkedList(temp.next);\nreturn temp.next;\n}\nstruct ListNode* sortList(struct ListNode* head){\nNode* prev, *left, *right, *start, *end;\nNode* p = head;\nhead = merge_sort(head);\nreturn head;\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n log n)"]}, {"location": "notes/Leetcode%20100-1000/148.%20Sort%20List/#rust", "title": "Rust ?", "text": "<p>We not even have a mutable value, which mean, we can\u2019t change the input </p> <pre><code>impl Solution {\npub fn sort_list(head: Option&lt;Box&lt;ListNode&gt;&gt;) -&gt; Option&lt;Box&lt;ListNode&gt;&gt; {\nmatch &amp;mut head {\nSome(node) =&gt; {\nnode.val = 5;\nreturn head;\n}\nNone =&gt; {\nreturn head;\n}\n}\n}\n}\n</code></pre> <p>Thus require us, to modify provided function into a mutable one</p> <pre><code>impl Solution {\npub fn sort_list(mut head: Option&lt;Box&lt;ListNode&gt;&gt;) -&gt; Option&lt;Box&lt;ListNode&gt;&gt; {\nmatch &amp;mut head {\nSome(node) =&gt; {\nnode.val = 5;\nreturn head;\n}\nNone =&gt; {\nreturn head;\n}\n}\n}\n}\n</code></pre> <p>Now this is some what workable, but overall, isn\u2019t even ideal for this type of question. Hmmmmmmmmm ? Guess I never know.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n log n)"]}, {"location": "notes/Leetcode%20100-1000/149.%20Max%20Points%20on%20a%20Line/", "title": "149. Max Points on a Line", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/149.%20Max%20Points%20on%20a%20Line/#problem", "title": "Problem", "text": "<p>Given an array of <code>points</code> where <code>points[i] = [xi, yi]</code> represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.</p> <p>Example 1:</p> <p></p> <p>Input: points = <code>[[1,1],[2,2],[3,3|1,1],[2,2],[3,3]]</code> Output: 3</p> <p>Example 2:</p> <p></p> <p>Input: points = <code>[[1,1],[3,2],[5,3],[4,1],[2,3],[1,4|1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]</code> Output: 4</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= points.length &lt;= 300</code></li> <li><code>points[i].length == 2</code></li> <li><code>-10**4 &lt;= x_i, y_i &lt;= 10**4</code></li> <li>All the <code>points</code> are unique.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/149.%20Max%20Points%20on%20a%20Line/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/149.%20Max%20Points%20on%20a%20Line/#white-board", "title": "White board", "text": "<ul> <li>Let call the total input = n = points.length<ul> <li>Every possible two point is: 300 x (300-1) = n ** 2 ~ 90000 ~ 10 ** 6</li> <li>For normal calculation, I don\u2019t want my theoretical calculation complexity (time complexity) &gt; 25_000_000, which mean we have about 25 ~ log(n) ~ log(n ** 2) nested loop to solve the problem if we try doing this path.</li> </ul> </li> </ul> <p>Attempt flow chart (I think I need to use draw.io, paint is pain) </p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/149.%20Max%20Points%20on%20a%20Line/#ignore-float-point", "title": "Ignore float point.", "text": "<p>This is a wrong answer, but non the less, I try it anyway</p> <p>We base on 2 function</p> <ul> <li>Vector</li> <li>Normalized</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/150.%20Evaluate%20Reverse%20Polish%20Notation/", "title": "150. Evaluate Reverse Polish Notation", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/150.%20Evaluate%20Reverse%20Polish%20Notation/#problem", "title": "Problem", "text": "<p>You are given an array of strings <code>tokens</code> that represents an arithmetic expression in a Reverse Polish Notation.</p> <p>Evaluate the expression. Return an integer that represents the value of the expression.</p> <p>Note that:</p> <ul> <li>The valid operators are <code>'+'</code>, <code>'-'</code>, <code>'*'</code>, and <code>'/'</code>.</li> <li>Each operand may be an integer or another expression.</li> <li>The division between two integers always truncates toward zero.</li> <li>There will not be any division by zero.</li> <li>The input represents a valid arithmetic expression in a reverse polish notation.</li> <li>The answer and all the intermediate calculations can be represented in a 32-bit integer.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/150.%20Evaluate%20Reverse%20Polish%20Notation/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/150.%20Evaluate%20Reverse%20Polish%20Notation/#white-board", "title": "White board", "text": "<p>A fancy name, in my academy year, we call it Postfix expression.</p> <p>We used stack to storing the calculated number data:</p> <ul> <li>If we process a number token, add it to the stack</li> <li>If we process a operator token, pop 2 top of the stack number, do the operation on them and push result back to the stack</li> <li>After all calculation, the stack should have only one element.  </li> </ul> <p>A invalid mathematics formula is found when we either:</p> <ul> <li>Not have enough number in stack to do a operation</li> <li>Having more than one element in the stack after all calculation</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/150.%20Evaluate%20Reverse%20Polish%20Notation/#implement", "title": "Implement", "text": "<p><code>c</code> <code>O(n)</code></p> <p>Not even draft code first with python like what i usually do, I think it better to have some practice with c to solve this problem.</p> <p>First, we handle a string token instead of direct number, or operator:</p> <ul> <li>This mean we wan\u2019t to separating which is which, thus I need to implementing <code>isOperator</code> to check:<ul> <li>A token string with length isn\u2019t equal to 1 is not a operator</li> <li>If they is, the only character should be <code>+</code>, <code>-</code>, <code>*</code> or <code>/</code> </li> </ul> </li> <li>If we found a number as string, we want to handle by process it back to integer for easier calculation. We dealing with the number range of <code>[-200, 200]</code>, so we need to handle the <code>-</code> sign for negative number</li> </ul> <p>I process without (almost) no data validating at all here because I assuming that all input of the problem is always a valid </p> <p>or else their will be specifically say what I should return when it have invalid result</p> <p>After that is implementing Post-fix expression formula calculation, which involve implementing a Stack:</p> <ul> <li>Here I can use an array implementation of stack for quick coding time. With default size of \\(10^4\\) , with 3 basic function <code>pop</code>, <code>push</code>, <code>init</code> </li> <li>Formula calculation process implementation, which is just exactly what we said in white board session. Pop and push immediate calculation result over stack until we process all of provided Post-fix formula tokens.</li> <li>The final result is the only element left in the stack after all calculation</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\nint isOperation(char *str) {\nif (strlen(str) != 1) {\nreturn 0;\n}\nint c = str[0];\nreturn c == '+' || c == '-' || c == '*' || c == '/';\n}\nint getNumber(char *str) {\nint num = 0;\nint sign = 1;\nfor (int i = 0; i &lt; strlen(str); i++) {\nint c = str[i];\nif (c == '-') {\nsign = -1;\ncontinue;\n}\nnum *= 10;\nnum += c - '0';\n}\nreturn num * sign;\n}\ntypedef struct {\nint value[10000];\nint top;\n} Stack;\nint pop(Stack *s) {\nint res = s-&gt;value[s-&gt;top];\ns-&gt;top--;\nreturn res;\n}\nvoid push(Stack *s, int value) {\ns-&gt;top++;\ns-&gt;value[s-&gt;top] = value;\n}\nvoid init(Stack *s) { s-&gt;top = -1; }\nint evalRPN(char **tokens, int tokensSize) {\nint result = 0;\nchar *curr = 0;\nStack stack;\nint expr1, expr2;\ninit(&amp;stack);\nfor (int i = 0; i &lt; tokensSize; i++) {\ncurr = tokens[i];\nif (!isOperation(curr)) {\npush(&amp;stack, getNumber(curr));\n} else {\nexpr2 = pop(&amp;stack);\nexpr1 = pop(&amp;stack);\nswitch (curr[0]) {\ncase '+': {\npush(&amp;stack, expr1 + expr2);\nbreak;\n}\ncase '-': {\npush(&amp;stack, expr1 - expr2);\nbreak;\n}\ncase '*': {\npush(&amp;stack, expr1 * expr2);\nbreak;\n}\ncase '/': {\n// int default to trunc toward zero\npush(&amp;stack, expr1 / expr2);\nbreak;\n}\ndefault: {\nprintf(\"Found invalid operator %s\", curr);\n}\n}\n}\n}\nresult = stack.value[0];\nif (stack.top != 0) {\nprintf(\"Invalid formula!!\");\n}\nreturn result;\n}\nint main() {\nint res = 0;\nchar *s[5];\n// tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\ns[0] = \"2\";\ns[1] = \"1\";\ns[2] = \"+\";\ns[3] = \"3\";\ns[4] = \"*\";\nres = evalRPN(s, 5);\nprintf(\"%d\\n\", res);\nchar *s2[13] = {\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"};\nres = evalRPN(s2, 13);\nprintf(\"%d\\n\", res);\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/150.%20Evaluate%20Reverse%20Polish%20Notation/#after-thought", "title": "After thought", "text": "<p>At first, when trying to solve this problem, My first thought is that I can\u2019t gain anything back from the problem. This already been solve by me in Mathematic expression calculation. While playing with python, i can easily use most of build-in function to speedup the process</p> <p>But, using c to re-write it again, it interesting to see some thing like this line  <pre><code>char *s2[13] = {\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"};\n</code></pre> in the main function. Quite a great support from c lang for variable initiation. </p> <p>I\u2019m amazed that how little validate I done in this implementation, normally when dealing with math, the validating take a ton of time to get thing right, even meaning </p> <p>Also without much practice, it\u2019s easy to forget how to write switch case (for a time limited code session, I would rather using if statement all the way tbh) </p> <pre><code>int main() {\nint res = 0;\nchar *s[5];\n// tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\ns[0] = \"2\";\ns[1] = \"1\";\ns[2] = \"+\";\ns[3] = \"3\";\ns[4] = \"*\";\nres = evalRPN(s, 5);\nprintf(\"%d\\n\", res);\nchar *s2[13] = {\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"};\nres = evalRPN(s2, 13);\nprintf(\"%d\\n\", res);\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/168.%20Excel%20Sheet%20Column%20Title/", "title": "168. Excel Sheet Column Title", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "math", "python", "c"]}, {"location": "notes/Leetcode%20100-1000/168.%20Excel%20Sheet%20Column%20Title/#problem", "title": "Problem", "text": "<p>Given an integer <code>columnNumber</code>, return its corresponding column title as it appears in an Excel sheet.</p> <p>For example: <pre><code>A -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 ...\n</code></pre> Example 1:</p> <p>Input: columnNumber = 1 Output: \u201cA\u201d</p> <p>Example 2:</p> <p>Input: columnNumber = 28 Output: \u201cAB\u201d</p> <p>Example 3:</p> <p>Input: columnNumber = 701 Output: \u201cZY\u201d</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= columnNumber &lt;= 2**31 - 1</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "math", "python", "c"]}, {"location": "notes/Leetcode%20100-1000/168.%20Excel%20Sheet%20Column%20Title/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "math", "python", "c"]}, {"location": "notes/Leetcode%20100-1000/168.%20Excel%20Sheet%20Column%20Title/#borrowmemo-number-modification", "title": "Borrow/Memo number modification", "text": "<p>Like 171. Excel Sheet Column Number, this problem is a special base 26 to base 10 problem. That has character set <code>[\"A\", \"B\", ..., \"Z\" ]</code> with corresponds value <code>[1,2,3,4,...,26]</code>  (it\u2019s not including <code>0</code>)</p> <p>To make this easier to understand:</p> <ul> <li><code>\"AB\" = 27</code> can be presentation as <code>[1, 2]</code> (in special base 26)</li> <li><code>\"ZY\" = 701</code> can be presentation as <code>[26, 25]</code> (in special base 26)</li> <li><code>\"Z\" = 27</code> can be presentation as <code>[26]</code> (in special base 26)</li> </ul> <pre><code>def convertBase26Without0():\n## Need to implement\n</code></pre> <p>While in normal base 26 (with 0), we have:</p> <ul> <li><code>\"AB\" = 27</code> can be presentation as <code>[1, 2]</code> (in normal base 26)</li> <li><code>\"ZY\" = 701</code> can be presentation as <code>[1, 0, 25]</code> (in normal base 26)</li> <li><code>\"Z\" = 26</code> can be presentation as <code>[1, 0]</code> (in normal base 26)</li> </ul> <pre><code>def convertBase26():\nremain = columnNumber\ncurr = 0\nnums = []\nwhile remain:\ncurr = remain % 26\nremain = remain // 26\nnums.apppend(curr)\n</code></pre> <p>After a \u201cquick\u201d analyze, I come to this conclusion</p> <ul> <li>This work the same as normal base 26, just without <code>0</code>, instead, we have a new value <code>26</code></li> <li>This mean, instead of normal base 26 using <code>10</code> or <code>[1, 0]</code> -&gt; we write <code>Z</code> or <code>[26]</code> instead</li> <li>Which it self is a modification: With any <code>0</code> we replace it with <code>26</code>, and minus the next number by <code>1</code>. Effectively to said that we are borrowing <code>26</code> value from the next number</li> </ul> Time Submitted Status Runtime Memory Language 08/22/2023 23:38 Accepted 48 ms 16.2 MB python3 <pre><code>class Solution:\ndef convertToTitle(self, columnNumber: int) -&gt; str:\nr = columnNumber\nc = 0\nv = []\nmemo = 0\nwhile r &gt; 26:\nc = r % 26 + memo\nr = r // 26\nmemo = 0\nif c &lt;= 0:\nmemo = -1\nv.append(26+c)\nelse:\nv.append(c)\nres = \"\"\nord_a = ord(\"A\") - 1\nif r + memo &gt; 0:\nres += chr(r + ord_a + memo)\nfor i in v[::-1]:\nif i == \"0\":\ncontinue\nres += chr(i + ord_a)\nreturn res\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "math", "python", "c"]}, {"location": "notes/Leetcode%20100-1000/168.%20Excel%20Sheet%20Column%20Title/#adding-1", "title": "Adding 1", "text": "<p>This work the same as normal base 26, just without <code>0</code>, instead, we have a new value <code>26</code></p> <p>A more nature take is that we adding 1 for every number after modification, this can be achieve by taking <code>1</code> value from the <code>remain</code> and add it to <code>curr</code></p> Time Submitted Status Runtime Memory Language 08/22/2023 18:07 Accepted 46 ms 16.3 MB python3 <pre><code>class Solution:\ndef convertToTitle(self, columnNumber: int) -&gt; str:\nremain = columnNumber\ncurr = 0\nord_subA = ord(\"A\") - 1\nres = \"\"\nwhile remain &gt;= 26:\ncurr = (remain - 1) % 26 + 1\nremain = (remain - 1) // 26\nres = chr(curr + ord_subA) + res\nif remain &gt; 0:\nres = chr(remain + ord_subA) + res\nreturn res\n</code></pre> <p>By take a look at the best implementation, which done the same thing, just more compact:</p> <pre><code>class Solution:\ndef convertToTitle(self, columnNumber: int) -&gt; str:\nout = ''\nwhile columnNumber != 0:\nout = chr(ord('A') + (columnNumber - 1) % 26) + out\ncolumnNumber = (columnNumber - 1) // 26\nreturn out\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "math", "python", "c"]}, {"location": "notes/Leetcode%20100-1000/168.%20Excel%20Sheet%20Column%20Title/#c-implementation", "title": "C implementation", "text": "<p><code>c</code></p> <p>To prepare for creating <code>char *</code> (using <code>maloc</code>), we want to create a big enough char array, which need to be pre calculating.</p> <p>So I just create a big enough memory size in stack, process the problem. Then re-copy the result\u2019s value one by one to the heap allocation variable, already knowing it length and return.</p> <p>As string in c is <code>char[]</code> or <code>char *</code> with <code>NULL</code> at end. I make sure to put <code>NULL</code> or <code>00000000</code> into the last element of the result <code>title</code></p> Time Submitted Status Runtime Memory Language 08/23/2023 09:08 Accepted 2 ms 5.4 MB c <pre><code>char* convertToTitle(int columnNumber) {\nchar nums[10] = {0};\nint length = 0;\nwhile (columnNumber &gt; 0) {\ncolumnNumber--;\nnums[length] = 'A' + (columnNumber % 26);\ncolumnNumber /= 26;\nlength++;\n}\nchar* title = (char*)malloc((length + 1) * sizeof(char));\ntitle[length] = NULL;\nfor (int i = length - 1; i &gt;= 0; i --) {\ntitle[i] = nums[length - i - 1];\n}\nreturn title;\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "math", "python", "c"]}, {"location": "notes/Leetcode%20100-1000/169.%20Majority%20Element/", "title": "169. Majority Element", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/169.%20Majority%20Element/#problem", "title": "Problem", "text": "<p>Given an array <code>nums</code> of size <code>n</code>, return the majority element.</p> <p>The majority element is the element that appears more than <code>\u230an / 2\u230b</code> times. You may assume that the majority element always exists in the array.</p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10**4</code></li> <li><code>-10**9 &lt;= nums[i] &lt;= 10**9</code></li> </ul> <p>Follow-up: Could you solve the problem in linear time and in <code>O(1)</code> space?</p> <p>Example 1: <pre><code>**Input:** nums = [3,2,3]\n**Output:** 3\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/169.%20Majority%20Element/#solve", "title": "Solve", "text": "<p>Let quickly settle this with a hash map counting cache array, ideally with built-in implementation <code>dict()</code> or <code>{}</code> in python</p> <pre><code>class Solution:\ndef majorityElement(self, nums: List[int]) -&gt; int:\nnums_count = {}\nfor n in nums:\nif n not in nums_count:\nnums_count[n] = 0\nnums_count[n] += 1\nif nums_count[n] &gt; len(nums)//2:\nreturn n\nreturn \"Some thing isn't right\"\n</code></pre> <p>A better that using lower memory is using quicksort and return the value of middle <code>n//2</code> index element  <pre><code>class Solution:\ndef majorityElement(self, nums: List[int]) -&gt; int:\nnums.sort()\nreturn nums[n//2]\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/169.%20Majority%20Element/#follow-up-madness", "title": "Follow up madness", "text": "<p>Here is the <code>Crtl + C</code> code: <pre><code>class Solution:\ndef majorityElement(self, nums: List[int]) -&gt; int:\nconfident = 0\nmajority_number = None\nfor current_number in nums:\nif confident == 0:\nmajority_number = current_number\nif current_number == majority_number:\nconfident += 1 \nelse:\nconfident -= 1\nreturn majority_number\n</code></pre></p> <ul> <li>You assuming any number to be the <code>majority_number</code>. </li> <li>With each loop through all available number in <code>nums</code> array we check our <code>confident</code> level<ul> <li>If it appear again: raise our <code>confident</code> by 1</li> <li>Else reducing it by 1</li> <li>When <code>confident = 0</code>, we try change our <code>majority_number</code></li> </ul> </li> <li>Return <code>majority_number</code> after</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/169.%20Majority%20Element/#compare", "title": "Compare?", "text": "<p>Barely notice-able different, the input really easy on us. Unless we using a compiler, a interpreter language like <code>python</code> does not provide good enough information on which faster</p> Argo Time Submitted Status Runtime Memory Language Linear 07/13/2023 14:38 Accepted 180 ms 17.8 MB python3 Sort 07/13/2023 14:22 Accepted 170 ms 17.8 MB python3 Dict 07/13/2023 14:07 Accepted 193 ms 17.8 MB python3", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/171.%20Excel%20Sheet%20Column%20Number/", "title": "171. Excel Sheet Column Number", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/171.%20Excel%20Sheet%20Column%20Number/#problem", "title": "Problem", "text": "<p>Given a string <code>columnTitle</code> that represents the column title as appears in an Excel sheet, return its corresponding column number.</p> <p>For example: <pre><code>A -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n</code></pre> Example 1: <pre><code>**Input:** columnTitle = \"A\"\n**Output:** 1\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/171.%20Excel%20Sheet%20Column%20Number/#solve", "title": "Solve", "text": "<p>A special base 26 to base 10 problem. That has character set <code>[\"A\", \"B\", ..., \"Z\" ]</code> with corresponds value <code>[1,2,3,4,...,26]</code>  (no <code>0</code>)</p> <pre><code>class Solution:\ndef titleToNumber(self, columnTitle: str) -&gt; int:\nsub_base26 = columnTitle[::-1]\ntrue_value = 0\nfor index, char in enumerate(sub_base26):\ntrue_value += (ord(char) - ord(\"A\") + 1) * (26 ** index)\nreturn true_value\n</code></pre> <p>The fun begin at 168. Excel Sheet Column Title, where you want to revert this process. This is other hand need more thought on how these type of number work</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/190.%20Reverse%20Bits/", "title": "190. Reverse Bits", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/190.%20Reverse%20Bits/#problem", "title": "Problem", "text": "<p>Reverse bits of a given 32 bits unsigned integer.</p> <p>Note:</p> <ul> <li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer\u2019s internal binary representation is the same, whether it is signed or unsigned.</li> <li>In Java, the compiler represents the signed integers using 2\u2019s complement notation. Therefore, in Example 2 above, the input represents the signed integer <code>-3</code> and the output represents the signed integer <code>-1073741825</code>.</li> </ul> <p>Constraints:</p> <ul> <li>The input must be a binary string of length <code>32</code></li> </ul> <p>Example 1: <pre><code>**Input:** n = 00000010100101000001111010011100\n**Output:**    964176192 (00111001011110000010100101000000)\n**Explanation:** The input binary string **00000010100101000001111010011100** represents the unsigned integer 43261596, so return 964176192 which its binary representation is **00111001011110000010100101000000**.\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/190.%20Reverse%20Bits/#solve", "title": "Solve", "text": "<p>Here is what i done:</p> <ul> <li>Turn number <code>n</code> to binary string using <code>bin(n)</code></li> <li>Padding <code>0</code> to get enough 32 bit, by adding <code>(1&lt;&lt;32)</code> and remove first bit of the string <code>bin(n)</code> (And <code>0b</code> string from the result, which in total is 3 character)</li> <li>Revert the product string using <code>[::-1]</code></li> <li>And finally turn the revert binary string back to number using <code>int(&lt;binary_string&gt;, base=2)</code> <pre><code>class Solution:\ndef reverseBits(self, n: int) -&gt; int:\nreturn int`-1], base=2`\n</code></pre></li> </ul> <p>Or just simple adding it bit by bit, using binary manipulation <pre><code>uint32_t reverseBits(uint32_t n) {\nuint32_t r_num = 0;\nfor (int i = 0; i &lt; 32; i++) {\nr_num &lt;&lt;= 1; //r_num = r_num * 2\nr_num += (n &gt;&gt; i) &amp; 1; // r_num = r_num + n[32-i] \n}\nreturn r_num;\n}\n</code></pre></p> Time Submitted Status Runtime Memory Language 07/17/2023 22:57 Accepted 1 ms 5.4 MB c 07/17/2023 22:45 Accepted 53 ms 16.2 MB python3", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/191.%20Number%20of%201%20Bits/", "title": "191. Number of 1 Bits", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/191.%20Number%20of%201%20Bits/#problem", "title": "Problem", "text": "<p>Write a function that takes the binary representation of an unsigned integer and returns the number of \u20181\u2019 bits it has (also known as the Hamming weight).</p> <p>Constraints:</p> <ul> <li>The input must be a binary string of length <code>32</code>.</li> </ul> <p>Note:</p> <ul> <li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer\u2019s internal binary representation is the same, whether it is signed or unsigned.</li> <li>In Java, the compiler represents the signed integers using 2\u2019s complement notation. Therefore, in Example 3, the input represents the signed integer. <code>-3</code>.</li> </ul> <p>Example 1: <pre><code>**Input:** n = 00000000000000000000000000001011\n**Output:** 3\n**Explanation:** The input binary string **00000000000000000000000000001011** has a total of three '1' bits.\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/191.%20Number%20of%201%20Bits/#solve", "title": "Solve", "text": "<p>Python have a exact function <code>int.bit_count()</code> to do this task</p> <pre><code>class Solution:\ndef hammingWeight(self, n: int) -&gt; int:\nreturn n.bit_count()\n</code></pre> <p>Other than that could be: Turn any number to binary <pre><code>class Solution:\ndef hammingWeight(self, n: int) -&gt; int:\nreturn bin(n)[2:].count(\"1\")\n</code></pre></p> <p>While with C/C++, counting using bit manipulation <pre><code>int hammingWeight(uint32_t n) {\nint count = 0;\nwhile (n != 0) {\ncount += n &amp; 1; // count = count + n % 2;\nn &gt;&gt;= 1; // n = n / 2\n}\nreturn count;\n}\n</code></pre></p> Time Submitted Status Runtime Memory Language 07/17/2023 22:33 Accepted 2 ms 5.5 MB c 07/17/2023 22:29 Accepted 47 ms 16.3 MB python3 07/17/2023 22:25 Accepted 41 ms 16.2 MB python3", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/202.%20Happy%20Number/", "title": "202. Happy Number", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/202.%20Happy%20Number/#problem", "title": "Problem", "text": "<p>Write an algorithm to determine if a number <code>n</code> is happy.</p> <p>A happy number is a number defined by the following process:</p> <ul> <li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li> <li>Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</li> <li>Those numbers for which this process ends in 1 are happy.</li> </ul> <p>Return <code>true</code> if <code>n</code> is a happy number, and <code>false</code> if not.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2**31 - 1</code></li> </ul> <p>Example 1:</p> <pre><code>**Input:** n = 19\n**Output:** true\n**Explanation:**\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/202.%20Happy%20Number/#solve", "title": "Solve", "text": "<p>Loop until n == 1. No cycle found return <code>True</code> If we found a cycle, return <code>False</code></p> <p>We can stored visited node into a hash map to check cycle</p> <pre><code>class Solution:\ndef isHappy(self, n: int) -&gt; bool:\nvisited = set()\nwhile n != 1:\nif n in visited:\nreturn False\nvisited.add(n)\nm = 0\ntmp = n\nwhile tmp:\nm += (tmp % 10) ** 2\ntmp = tmp // 10\nn = m\nreturn True\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/206.%20Reverse%20Linked%20List/", "title": "206. Reverse Linked List", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/206.%20Reverse%20Linked%20List/#problem", "title": "Problem", "text": "<p>Given the <code>head</code> of a singly linked list, reverse the list, and return the reversed list.</p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li> <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li> </ul> <p>Example 1:</p> <p></p> <p>Input: head = [1,2,3,4,5] Output: [5,4,3,2,1]</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/206.%20Reverse%20Linked%20List/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/206.%20Reverse%20Linked%20List/#stack", "title": "Stack", "text": "<pre><code>class Solution:\ndef reverseList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\nqueue = []\np = head\nwhile p:\nqueue.append(p)\np = p.next\nresult = None\np = None\nwhile queue:\nif result is None:\nresult = queue.pop()\np = result\nelse:\np.next = queue.pop()\np = p.next\nif p:\np.next = None\nreturn result\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/206.%20Reverse%20Linked%20List/#recursion", "title": "Recursion", "text": "<p>We start with this order: go to the node first, then process our current node value (using <code>print</code> as a place holder) </p> <pre><code>class Solution:\ndef reverseList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\nresult = None\ndef helper(node):\nif node:\nhelper(node.next)\nprint(node.val)\nhelper(head)\nreturn None\n</code></pre> <p>Now instead of printing, we adding node to result instead. Here I using <code>p</code> as a temporary storing the end of <code>result</code> linked list  of link list for O(1) time insert.</p> <pre><code>class Solution:\ndef reverseList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\nself.result = None\nself.p = None\ndef helper(node):\nif node:\nhelper(node.next)\nif self.result is None:\nself.result = node\nself.p = self.result\nelse:\nself.p.next = node\nself.p = self.p.next\nself.p.next = None\nhelper(head)\nreturn self.result\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/207.%20Course%20Schedule/", "title": "207. Course Schedule", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/207.%20Course%20Schedule/#problem", "title": "Problem", "text": "<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [ai, bi]</code> indicates that you must take course <code>bi</code> first if you want to take course <code>ai</code>.</p> <ul> <li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li> </ul> <p>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= numCourses &lt;= 2000</code></li> <li><code>0 &lt;= prerequisites.length &lt;= 5000</code></li> <li><code>prerequisites[i].length == 2</code></li> <li><code>0 &lt;= ai, bi &lt; numCourses</code></li> <li>All the pairs <code>prerequisites[i]</code> are unique.</li> </ul> <p>Example 1:</p> <pre><code>**Input:** numCourses = 2, prerequisites = [[1,0|1,0]]\n**Output:** true\n**Explanation:** There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/207.%20Course%20Schedule/#solve", "title": "Solve", "text": "<p>We have solve 802. Find Eventual Safe States, which do the same problem. The course that can finish need to be a safe node in graph (node that can\u2019t start a cycle path).</p> <ul> <li>We change the input Graph Edges table into better Graph Adj Node table representation. </li> <li>Run the already solve find safe node and get all finish-able course.</li> <li>We now check every course, if we found one isn\u2019t a is safe node then return <code>False</code>, else return <code>True</code></li> </ul> <p>Here we get the best approach, which is a DFS solution to find safe node.  <pre><code>class Solution:\ndef canFinish(self, numCourses: int, prerequisites: List[List[int]]) -&gt; bool:\ngraph = [[] for i in range(numCourses)]\nfor u, v in prerequisites:\ngraph[u].append(v)\nis_safe_node = [None] * len(graph)\ndef DFS(current_node_id):\nif not is_safe_node[current_node_id] is None:\nreturn is_safe_node[current_node_id]\nis_safe_node[current_node_id] = False\nfor adj_node_id in graph[current_node_id]:\nif DFS(adj_node_id) == False:\nreturn False\nis_safe_node[current_node_id] = True\nreturn True\nfor course_id in range(numCourses):\nif not DFS(course_id):\nreturn False\nreturn True\n</code></pre></p> <p>I also give Simulation approach a try, which give almost the same in result.  <pre><code>class Solution:\ndef canFinish(self, numCourses: int, prerequisites: List[List[int]]) -&gt; bool:\ngraph = [[] for i in range(numCourses)]\nfor u, v in prerequisites:\ngraph[u].append(v)\nindegree = [0] * len(graph)\nis_safe_node = [False] * len(graph)\nref_table = [set() for _ in graph]\nfound_safe_node = []\nfor node_id, adjNodes in enumerate(graph):\nif len(adjNodes) == 0:\nfound_safe_node.append(node_id)\nis_safe_node[node_id] = True\nindegree[node_id] = len(adjNodes)\nfor adjNode in adjNodes:\nref_table[adjNode].add(node_id)\nwhile len(found_safe_node) &gt; 0:\nnode_id = found_safe_node.pop(0)\nfor ref_node in ref_table[node_id]:\nif is_safe_node[ref_node]:\nref_table[ref_node] -= set([node_id])\ncontinue\nindegree[ref_node] -= 1\nif indegree[ref_node] == 0:\nfound_safe_node.append(ref_node)\nis_safe_node[ref_node] = True\nfor node_id, is_safe in enumerate(is_safe_node):\nif not is_safe:\nreturn False\nreturn True\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/207.%20Course%20Schedule/#final-comparation", "title": "Final comparation", "text": "Argo Time Submitted Status Runtime Memory Language DFS 07/13/2023 12:14 Accepted 108 ms 17.6 MB python3 Simulation 07/13/2023 12:03 Accepted 112 ms 19.1 MB python3", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/212.%20Word%20Search%20II/", "title": "212. Word Search II", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/212.%20Word%20Search%20II/#problem", "title": "Problem", "text": "<p>Given an <code>m x n</code> <code>board</code> of characters and a list of strings <code>words</code>, return all words on the board.</p> <p>Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p> <p>Example 1:</p> <p></p> <p>Input: board = [[\u201co\u201d,\u201da\u201d,\u201da\u201d,\u201dn\u201d],[\u201ce\u201d,\u201dt\u201d,\u201da\u201d,\u201de\u201d],[\u201ci\u201d,\u201dh\u201d,\u201dk\u201d,\u201dr\u201d],[\u201ci\u201d,\u201df\u201d,\u201dl\u201d,\u201dv\u201d|\u201do\u201d,\u201da\u201d,\u201da\u201d,\u201dn\u201d],[\u201ce\u201d,\u201dt\u201d,\u201da\u201d,\u201de\u201d],[\u201ci\u201d,\u201dh\u201d,\u201dk\u201d,\u201dr\u201d],[\u201ci\u201d,\u201df\u201d,\u201dl\u201d,\u201dv\u201d]], words = [\u201coath\u201d,\u201dpea\u201d,\u201deat\u201d,\u201drain\u201d] Output: [\u201ceat\u201d,\u201doath\u201d]</p> <p>Example 2:</p> <p></p> <p>Input: board = [[\u201ca\u201d,\u201db\u201d],[\u201cc\u201d,\u201dd\u201d|\u201da\u201d,\u201db\u201d],[\u201cc\u201d,\u201dd\u201d]], words = [\u201cabcb\u201d] Output: []</p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 12</code></li> <li><code>board[i][j]</code> is a lowercase English letter.</li> <li><code>1 &lt;= words.length &lt;= 3 * 104</code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> <li>All the strings of <code>words</code> are unique.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/212.%20Word%20Search%20II/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/212.%20Word%20Search%20II/#dp-but-fail-one", "title": "DP but fail one", "text": "<p><code>python</code></p> <p>This just throw TLE a lot on me </p> <p>Guess just BFS/DFS is good enough. I finding all possible available appearance of every string, storing they head, and tail, and all the path in between in a <code>cache</code> dictionary.</p> <p>To make the storing a bit simpler and lower the memory for storing need, I only store string with length that is a power of 2 (<code>2**n</code> length), all words is split to the similar length <code>[1, 2, 4, 8, ...]</code> and check in <code>cache</code> before being process.</p> <pre><code>    def split(self,w):\nsplitRes = []\nclone = w\np = len(w)\ni = 0\nwhile p&gt;0:\nq = (p &amp; 1) &lt;&lt; i\nif q:\nsplitRes.append(clone[:q])\nclone = clone[q:]\ni += 1\np &gt;&gt;= 1\nreturn splitRes\ndef find(self, w, board, cache):\nsw = self.split(w)\nknowedPath = None\nfor s in sw:\nprint(s)\npaths = self.findPaths(s, cache)\nif len(paths) == 0:\nreturn False\nif knowedPath is None:\nknowedPath = paths\ncontinue\nres = self.combine(knowedPath, paths)\nif len(res) == 0:\nreturn False\nknowedPath = res\ncache[w] = knowedPath\nreturn True\n</code></pre> <p>I do it in top-down, so that if it hit cache, then we can return directly, or else we split it again, but in half. This return all available, possible path that string <code>s</code> appear on the <code>board</code>.  </p> <pre><code>    def findPaths(self, s, cache):\nprint(\"+\",s)\nif s in cache:\nreturn cache[s]\nif len(s) == 1:\nreturn []\np1 = self.findPaths(s[:len(s)//2], cache)\np2 = self.findPaths(s[len(s)//2:], cache)\ncache[s] = self.combine(p1, p2)\nreturn cache[s]\n</code></pre> <p>The combine is where I take the <code>path</code> check for intersection, and the continuation of the <code>head</code>, <code>tail</code> of both <code>path</code>.</p> <p>Final implement can be really fast, but going bad when the total possible path goes out of hand.</p> Time Submitted Status Runtime Memory Language 08/26/2023 07:29 Time Limit Exceeded N/A N/A python3 <pre><code>class Solution:\ndef split(self,w):\nsplitRes = []\nclone = w\np = len(w)\ni = 0\nwhile p&gt;0:\nq = (p &amp; 1) &lt;&lt; i\nif q:\nsplitRes.append(clone[:q])\nclone = clone[q:]\ni += 1\np &gt;&gt;= 1\nreturn splitRes\ndef isadj(self, tk, hp):\nif abs(tk[0] - hp[0]) == 1:\nreturn tk[1] == hp[1]\nif abs(tk[1] - hp[1]) == 1:\nreturn tk[0] == hp[0]\nreturn False\ndef combine(self, ks, ps):\nres = []\nfor k, hk, tk in ks:\nfor p, hp, tp in ps:\nif k.isdisjoint(p) and self.isadj(tk, hp):\nres.append((k.union(p), hk, tp))\nreturn res\ndef findPaths(self, s, cache):\nprint(\"+\",s)\nif s in cache:\nreturn cache[s]\nif len(s) == 1:\nreturn []\np1 = self.findPaths(s[:len(s)//2], cache)\np2 = self.findPaths(s[len(s)//2:], cache)\ncache[s] = self.combine(p1, p2)\nreturn cache[s]\ndef find(self, w, board, cache):\nsw = self.split(w)\nknowedPath = None\nfor s in sw:\nprint(s)\npaths = self.findPaths(s, cache)\nif len(paths) == 0:\nreturn False\nif knowedPath is None:\nknowedPath = paths\ncontinue\nres = self.combine(knowedPath, paths)\nif len(res) == 0:\nreturn False\nknowedPath = res\ncache[w] = knowedPath\nreturn True\ndef findWords(self, board: List[List[str]], words: List[str]) -&gt; List[str]:\ncache = {}\nfor r, row in enumerate(board):\nfor i, c in enumerate(row):\nif c not in cache:\ncache[c] = []\npath = set()\npath.add((r,i))\nhead = (r,i)\ntail = (r,i)\ncache[c].append((path, head, tail))\nres = []\nfor w in words:\nprint('==',w)\nif self.find(w, board, cache):\nres.append(w)\nreturn res\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/212.%20Word%20Search%20II/#fallback-1000", "title": "Fallback 1000", "text": "<p><code>python</code></p> <p>So, in case we have of a lot possible path, this give a fall back needed to process the problem. Just process the first 1000 possible path, if it can\u2019t solve the problem, going with the full join</p> <p>While this barely can finish the problem, but Leetcode do a add up in TLE calculating (They send all the  test as one input, after certain time, you get a TLE), which mean I pass the TLE case, but leaving me no time left to easier case. </p> <pre><code>class Solution:\ndef split(self,w):\nsplitRes = []\nclone = w\np = len(w)\ni = 0\nwhile p&gt;0:\nq = (p &amp; 1) &lt;&lt; i\nif q:\nsplitRes.append(clone[:q])\nclone = clone[q:]\ni += 1\np &gt;&gt;= 1\nreturn splitRes\ndef isadj(self, tk, hp):\nif abs(tk[0] - hp[0]) == 1:\nreturn tk[1] == hp[1]\nif abs(tk[1] - hp[1]) == 1:\nreturn tk[0] == hp[0]\nreturn False\ndef combine(self, ks, ps):\nres = []\nfor k, hk, tk in ks:\nfor p, hp, tp in ps:\nif k.isdisjoint(p) and self.isadj(tk, hp):\nres.append((k.union(p), hk, tp))\nreturn res[:1000]\ndef combineFull(self, ks, ps):\nres = []\nfor k, hk, tk in ks:\nfor p, hp, tp in ps:\nif k.isdisjoint(p) and self.isadj(tk, hp):\nres.append((k.union(p), hk, tp))\nreturn res\ndef findPaths(self, s, cache):\n# print(\"+\",s)\nif s in cache and (s in self.isFull):\nreturn cache[s][:1000]\nif len(s) == 1:\nreturn []\np1 = self.findPaths(s[:len(s)//2], cache)\np2 = self.findPaths(s[len(s)//2:], cache)\ncache[s] = self.combine(p1[:1000], p2[:1000])\nif len(cache[s]) == 0 and (len(p1) == 1000) or (len(p2) == 1000):\ncache[s] = self.findPathsFull(s, cache)\nreturn cache[s][:1000]\ndef findPathsFull(self, s, cache):\n# print(\"+ full\",s)\nif (s in cache) and (s in self.isFull):\nreturn cache[s]\nif len(s) == 1:\nreturn []\nself.isFull.add(s)\np1 = self.findPathsFull(s[:len(s)//2], cache)\np2 = self.findPathsFull(s[len(s)//2:], cache)\ncache[s] = self.combineFull(p1, p2)\nreturn cache[s]\ndef find(self, w, board, cache):\nsw = self.split(w)\nknowedPath = None\nfor s in sw:\n# print(s)\npaths = self.findPaths(s, cache)\nif len(paths) == 0:\nreturn False\nif knowedPath is None:\nknowedPath = paths\ncontinue\nres = self.combine(knowedPath, paths)\nif len(res) == 0:\nreturn False\nknowedPath = res\ncache[w] = knowedPath\nreturn True\ndef findWords(self, board: List[List[str]], words: List[str]) -&gt; List[str]:\ncache = {}\nself.isFull = set()\nfor r, row in enumerate(board):\nfor i, c in enumerate(row):\nif c not in cache:\ncache[c] = []\npath = set()\npath.add((r,i))\nhead = (r,i)\ntail = (r,i)\ncache[c].append((path, head, tail))\nself.isFull.add(c)\nres = []\nfor w in words:\n# print('==',w)\nif self.find(w, board, cache):\nres.append(w)\nreturn res\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/212.%20Word%20Search%20II/#what-we-missing", "title": "What we missing", "text": "<ul> <li><code>1 &lt;= words.length &lt;= 3 * 10**4</code> </li> <li><code>1 &lt;= words[i].length &lt;= 10</code> This meaning we need to do a lot of small words length. Then the split seem isn\u2019t do that much as we do a rather small string</li> </ul> <p>We will want to reuse path a lot more. with a more precision combine, as we only do combine on <code>self.isadj(tk, hp)</code>, which it self can be added to <code>cache</code> instead of checking boardly. So maybe, I need to use some of the head, tail as a <code>cache</code> input to make this a possible solution.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/212.%20Word%20Search%20II/#yank-it-trie-tree-solution", "title": "Yank it, Trie tree solution", "text": "<p><code>python</code></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/212.%20Word%20Search%20II/#read-and-learn", "title": "Read and learn", "text": "<p>There is some Trie Tree that you need to learn and finish this problem? Maybe, but I try and fail on DP, so let have some basic reading this code:</p> <ul> <li>We create a <code>TrieNode</code> helper class/object that have <code>children</code> to cache store all possible path goes through; a end of word flag for what ever?</li> <li>We then have Trie, the main object, which split word into similar set of character. This mean when we get our self into a spiting node, we can reused the path up to that spiting point as a similarity</li> <li>Which also mean, any path in the Trie tree that can\u2019t be found on the <code>board</code> we can skip processing them.   </li> </ul> <p>While this is a fine use case, it  doesn\u2019t help with a repetitive case where there just too many path. </p> <pre><code>class TrieNode:\ndef __init__(self):\nself.children = {}\nself.endOfWord = False\nclass Trie:\ndef __init__(self,total_words):\nself.root = TrieNode()\nself.unfound_words = total_words\ndef insert(self, word: str) -&gt; None:\ncur = self.root\nfor c in word:\nif c not in cur.children:\ncur.children[c] = TrieNode()\ncur = cur.children[c]\ncur.endOfWord = True\n</code></pre> <pre><code>class Solution:\ndef findWords(self, board: List[List[str]], words: List[str]) -&gt; List[str]:\nres = []\nM , N = len(board) , len(board[0])\nd = Trie(len(words))                                    \nfor w in words:                                         \nd.insert(w)\n</code></pre> <p>\u2026Fast for ward to the main solve function</p> <p>A helper function go, that:</p> <ul> <li>Take a position <code>(r,c)</code>,  check for current word stage <code>s</code>, basically like a BFS, and curr_node that keeping up with the Trie tree</li> </ul> <pre><code>        def go(r,c,s,cur_node):   \nif cur_node.endOfWord:\nres.append(s)\ncur_node.endOfWord = False                      \nd.unfound_words -= 1\nif d.unfound_words == 0:\nreturn\nif r &lt; 0 or c &lt; 0 or r &gt;= M or c &gt;= N:\nreturn \ncur_chr = board[r][c] \nif cur_chr not in cur_node.children:\nreturn                                          \ncur_root = cur_node\ncur_node = cur_node.children[cur_chr]               \nboard[r][c] = '69'\ngo(r+1,c,s+cur_chr,cur_node) \ngo(r-1,c,s+cur_chr,cur_node) \ngo(r,c-1,s+cur_chr,cur_node) \ngo(r,c+1,s+cur_chr,cur_node) \nboard[r][c] = cur_chr\nif not cur_node.children:\ndel cur_root.children[cur_chr]         \nreturn\n</code></pre> <ul> <li>And the main just going into the board one cell by one cell and do BFS on every cell</li> </ul> <pre><code>        root = d.root\nfor i in range(M):\nfor j in range(N):\nif d.unfound_words == 0:\nreturn res\ngo(i,j,\"\",root)\nreturn res\n</code></pre> <p>So key take away is that we process all the words, at once, on each cell of the board. This make the process easier and stop the process if there isn\u2019t any path can lead to words.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/212.%20Word%20Search%20II/#re-implement", "title": "Re-implement", "text": "<p>The yank implement does seem great, so I keep that in mind and start implement</p> <p>The first is Trie tree, which I use <code>[\"!\"]</code> element to store the word, also keeping track of it parent so that I can cut down some of the TreeNode.</p> <pre><code>class TrieNode:\ndef __init__(self, above = None):\nself.above = above\nself.char = {}\nclass Trie:\ndef __init__(self):\nself.root = TrieNode()\ndef insert(self, w):\np = self.root\nfor c in w:\nif c not in p.char:\np.char[c] = TrieNode(p)\np = p.char[c]\np.char[\"!\"] = w\ndef remove(self, w):\np = self.root\ns = \"\"\nfor c in w:\nif c in p.char:\np = p.char[c]\ns += c\nfor c in s[::-1]:                \nif not p.char:\ndel p.above.char[c]\nelse:\nbreak\np = p.above\n</code></pre> <p>I also do some pretty printing for debug</p> <pre><code>    def __str__(self):\nimport json\np = self.root\ndef helper(p):\nd = {}\nif p is None:\nreturn d\nfor k in p.char:\nif k == \"!\":\nd[k] = p.char[\"!\"]\ncontinue\nd[k] = helper(p.char[k])\nreturn d\nreturn json.dumps(helper(p), indent = 4)\n</code></pre> <p>In the main function, I use a <code>visited</code> hash map to keep track of already pass through cell. Get DSP and BFS wrong naming here (This is DFS)</p> <pre><code>class Solution:\ndef findWords(self, board: List[List[str]], words: List[str]) -&gt; List[str]:\ntree = Trie()\nres = []\nvisited = set()\nfor w in words:\ntree.insert(w)\nm = len(board)\nn = len(board[0])\ndef adj(i,j):\nres = []\nfor x, y in [(i-1,j), (i+1, j), (i, j-1), (i, j+1)]:\nif 0 &lt;= x &lt; m and 0 &lt;= y &lt; n and (x,y) not in visited:\nres.append((x,y))\nreturn res\ndef bfs(i,j, node):\nvisited.add((i,j))\nif \"!\" in node.char:\nres.append(node.char[\"!\"])\ndel node.char[\"!\"]\ntree.remove(res[-1])\nfor x, y in adj(i,j):\nc = board[x][y]\nif c in node.char:\nbfs(x,y, node.char[c])\nvisited.remove((i,j))\nfor i, r in enumerate(board):\nfor j, char in enumerate(r):\nif char in tree.root.char:\nbfs(i,j, tree.root.char[char])\nreturn res\n</code></pre> <p>The final implementation look like this.</p> Time Submitted Status Runtime Memory Language 08/26/2023 12:49 Accepted 1039 ms 21.8 MB python3 <pre><code>class TrieNode:\ndef __init__(self, above = None):\nself.above = above\nself.char = {}\nclass Trie:\ndef __init__(self):\nself.root = TrieNode()\ndef insert(self, w):\np = self.root\nfor c in w:\nif c not in p.char:\np.char[c] = TrieNode(p)\np = p.char[c]\np.char[\"!\"] = w\ndef remove(self, w):\np = self.root\ns = \"\"\nfor c in w:\nif c in p.char:\np = p.char[c]\ns += c\nfor c in s[::-1]:                \nif not p.char:\ndel p.above.char[c]\nelse:\nbreak\np = p.above\ndef __str__(self):\nimport json\np = self.root\ndef helper(p):\nd = {}\nif p is None:\nreturn d\nfor k in p.char:\nif k == \"!\":\nd[k] = p.char[\"!\"]\ncontinue\nd[k] = helper(p.char[k])\nreturn d\nreturn json.dumps(helper(p), indent = 4)\nclass Solution:\ndef findWords(self, board: List[List[str]], words: List[str]) -&gt; List[str]:\ntree = Trie()\nres = []\nvisited = set()\nfor w in words:\ntree.insert(w)\nm = len(board)\nn = len(board[0])\ndef adj(i,j):\nres = []\nfor x, y in [(i-1,j), (i+1, j), (i, j-1), (i, j+1)]:\nif 0 &lt;= x &lt; m and 0 &lt;= y &lt; n and (x,y) not in visited:\nres.append((x,y))\nreturn res\ndef bfs(i,j, node):\nvisited.add((i,j))\nif \"!\" in node.char:\nres.append(node.char[\"!\"])\ndel node.char[\"!\"]\ntree.remove(res[-1])\nfor x, y in adj(i,j):\nc = board[x][y]\nif c in node.char:\nbfs(x,y, node.char[c])\nvisited.remove((i,j))\nfor i, r in enumerate(board):\nfor j, char in enumerate(r):\nif char in tree.root.char:\nbfs(i,j, tree.root.char[char])\nreturn res\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python"]}, {"location": "notes/Leetcode%20100-1000/215.%20Kth%20Largest%20Element%20in%20an%20Array/", "title": "215. Kth Largest Element in an Array", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "sort", "divide_and_conquer"]}, {"location": "notes/Leetcode%20100-1000/215.%20Kth%20Largest%20Element%20in%20an%20Array/#problem", "title": "Problem", "text": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the <code>kth</code> largest element in the array.</p> <p>Note that it is the <code>kth</code> largest element in the sorted order, not the <code>kth</code> distinct element.</p> <p>Can you solve it without sorting?</p> <p>Example 1:</p> <p>Input: nums = [3,2,1,5,6,4], k = 2 Output: 5</p> <p>Example 2:</p> <p>Input: nums = [3,2,3,1,2,4,5,5,6], k = 4 Output: 4</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10**5</code></li> <li><code>-10**4 &lt;= nums[i] &lt;= 10**4</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "sort", "divide_and_conquer"]}, {"location": "notes/Leetcode%20100-1000/215.%20Kth%20Largest%20Element%20in%20an%20Array/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "sort", "divide_and_conquer"]}, {"location": "notes/Leetcode%20100-1000/215.%20Kth%20Largest%20Element%20in%20an%20Array/#quick-select-similarity-to-quick-sort", "title": "Quick select - similarity to quick sort", "text": "<p>Using same ideal of quick sort, we chose a <code>target</code>, split the <code>nums</code> array to 3 subarray base on the comparing result of <code>target</code> and <code>nums[i]</code>, which is</p> <pre><code>[smaller] [equal] [bigger]\n</code></pre> <p>To find any <code>k</code>\u2018th largest position, we select in the range that <code>k</code> in, which mean:</p> <ul> <li><code>k</code> in <code>[bigger]</code> sub array If <code>k &lt;= len(bigger)</code></li> <li><code>k</code> in <code>[equal]</code> sub array If <code>len(bigger) &lt; k &lt;= len(bigger) + len(equal)</code></li> <li><code>k</code> in <code>[smaller]</code> sub array If <code>len(bigger) + len(equal) &lt; k</code></li> </ul> <p>Base on where <code>k</code> is, we narrow down the finding process. Stop if k in <code>[equal]</code> sub array and return <code>target</code>. </p> <p>By randomly chose the target, we effectively preventing bad input (already sorted) array. </p> Time Submitted Status Runtime Memory Language 08/14/2023 14:59 Accepted 6347 ms 29.7 MB python3 08/14/2023 14:58 Accepted 2348 ms 30 MB python3 <pre><code>class Solution:\ndef findKthLargest(self, nums: List[int], k: int) -&gt; int:\nremain = nums.copy()\npos = k\nwhile len(remain) &gt; 0:\ntarget = remain[randrange(0, len(remain))]\n# target = remain[0]\nbigger = []\nequad = []\ni = 0\nwhile i &lt; len(remain):\nif remain[i] &gt; target:\nbigger.append(remain.pop(i))\nelif remain[i] == target:\nequad.append(remain.pop(i))\nelse:\ni += 1\n# print(remain, equad, bigger, pos)\nif  pos &lt;= len(equad) + len(bigger):\nif pos &lt;= len(bigger):\nremain = bigger\nelse:\nreturn target\nelse:\npos = pos - len(bigger) - len(equad)\nreturn 0\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "sort", "divide_and_conquer"]}, {"location": "notes/Leetcode%20100-1000/215.%20Kth%20Largest%20Element%20in%20an%20Array/#sorting-counting-sort", "title": "Sorting - Counting sort", "text": "<p>Counting sort could give the best way to sort a low range of number value (`-104 &lt;= nums[i] &lt;= 104)</p> <p>Base on sort result, we can easily get the k\u2019th largest result</p> Time Submitted Status Runtime Memory Language 08/14/2023 15:32 Accepted 403 ms 29.5 MB python3 <pre><code>class Solution:\ndef findKthLargest(self, nums: List[int], k: int) -&gt; int:\ncount = [0] * 20001\nfor n in nums:\ncount[n + 10000] += 1\npos = 0\nfor `-1]`:\npos += c\nif pos &gt;= k:\nreturn 10000 - i\nreturn 0\n</code></pre> <p>There isn\u2019t negative for array value, while you can use <code>dict</code>, it quite slower. </p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "sort", "divide_and_conquer"]}, {"location": "notes/Leetcode%20100-1000/215.%20Kth%20Largest%20Element%20in%20an%20Array/#c-implementation", "title": "<code>c</code> implementation", "text": "<p>While I hate how you [[pass around variable|pass around variable]] in <code>c</code> language, and how hard it is to set up a proper project folder.</p> <p>This is me trying to implement the quick select solution. But we don\u2019t want to implement Vector like (Using Linked list) or hard code allocating <code>[0..10**5]</code> length array like python code, I try implement <code>O(1)</code> memory space solution </p> <p>Final file: https://github.com/ylsama/leetcode/blob/main/215/c/src/main.c</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "sort", "divide_and_conquer"]}, {"location": "notes/Leetcode%20100-1000/215.%20Kth%20Largest%20Element%20in%20an%20Array/#quick-sort", "title": "Quick sort", "text": "<p>To implement quick select, it is likely require you to know how to implement quicksort algorithms. By sorting, we can just then return the <code>k'th</code> largest value to finish the problem.</p> Time Submitted Status Runtime Memory Language 08/14/2023 20:03 Accepted 210 ms 11.2 MB c <pre><code>void swap(int *x, int *y) {\nint tmp = *x;\n*x = *y;\n*y = tmp;\n}\nint partition(int *nums, int low, int high) {\nint pivot = nums[high];\nint i = (low - 1);\nfor (int j = low; j &lt;= high - 1; j++) {\nif (nums[j] &lt;= pivot) {\ni++;\nswap(&amp;nums[i], &amp;nums[j]);\n}\n}\nswap(&amp;nums[i + 1], &amp;nums[high]);\nreturn (i + 1);\n}\nvoid quicksort(int *nums, int low, int high) {\nif (low &lt; high) {\nint pivotIndex = partition(nums, low, high);\nquicksort(nums, low, pivotIndex - 1);\nquicksort(nums, pivotIndex + 1, high);\n}\n}\nint findKthLargest(int *nums, int numsSize, int k) {\nquicksort(nums, 0, numsSize - 1);\nreturn nums[numsSize - k];\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "sort", "divide_and_conquer"]}, {"location": "notes/Leetcode%20100-1000/215.%20Kth%20Largest%20Element%20in%20an%20Array/#quick-select", "title": "Quick select", "text": "<p>Quick select in O(1) space is just us effectively sort the <code>nums</code> array only in needed part. </p> Time Submitted Status Runtime Memory Language 08/14/2023 19:47 Accepted 91 ms 11.5 MB c <pre><code>void swap(int *x, int *y) {\nint tmp = *x;\n*x = *y;\n*y = tmp;\n}\nint partition(int *nums, int low, int high) {\nint pivot = nums[high];\nint i = (low - 1);\nfor (int j = low; j &lt;= high - 1; j++) {\nif (nums[j] &lt;= pivot) {\ni++;\nswap(&amp;nums[i], &amp;nums[j]);\n}\n}\nswap(&amp;nums[i + 1], &amp;nums[high]);\nreturn (i + 1);\n}\nint quickSellect(int *nums, int low, int high, int pos) {\nif (low &lt; high) {\nint pivotIndex = partition(nums, low, high);\nif (pivotIndex == pos) {\nreturn nums[pivotIndex];\n} else if (pivotIndex &gt; pos) {\nreturn quickSellect(nums, low, pivotIndex - 1, pos);\n} else {\nreturn quickSellect(nums, pivotIndex + 1, high, pos);\n}\n} else if (low == pos) {\nreturn nums[low];\n}\nreturn -1;\n}\nint findKthLargest(int *nums, int numsSize, int k) {\nint res = quickSellect(nums, 0, numsSize - 1, numsSize - k);\nreturn res;\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "sort", "divide_and_conquer"]}, {"location": "notes/Leetcode%20100-1000/215.%20Kth%20Largest%20Element%20in%20an%20Array/#rust-implementation", "title": "<code>rust</code> implementation", "text": "<ul> <li>OOP in rust is quite weird (meaning I mean I haven\u2019t done in it enough), while rust does provide <code>self</code>, it not being used here.</li> </ul> <pre><code>impl Solution {\nfn partition(nums: &amp;mut [i32], low: usize, high: usize) -&gt; usize {\nlet pivot = nums[high];\nlet mut i = low as isize - 1;\nfor j in low..high {\nif nums[j] &lt;= pivot {\ni += 1;\nnums.swap(i as usize, j);\n}\n}\nnums.swap((i + 1) as usize, high);\n(i + 1) as usize\n}\nfn quick_select(nums: &amp;mut [i32], low: usize, high: usize, pos: usize) -&gt; i32 {\nif low &lt; high {\nlet pivot_index = Solution::partition(nums, low, high);\nif pivot_index == pos {\nreturn nums[pivot_index];\n} else if pivot_index &gt; pos {\nreturn Solution::quick_select(nums, low, pivot_index - 1, pos);\n} else {\nreturn Solution::quick_select(nums, pivot_index + 1, high, pos);\n}\n} else if low == pos {\nreturn nums[low];\n}\n-1\n}\npub fn find_kth_largest(nums: Vec&lt;i32&gt;, k: i32) -&gt; i32 {\nlet mut nums_mut = nums.to_vec();\nSolution::quick_select(&amp;mut nums_mut, 0, nums.len() - 1, nums.len() - k as usize)\n}\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "sort", "divide_and_conquer"]}, {"location": "notes/Leetcode%20100-1000/217.%20Contains%20Duplicate/", "title": "217. Contains Duplicate", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/217.%20Contains%20Duplicate/#problem", "title": "Problem", "text": "<p>Given an integer array <code>nums</code>, return <code>true</code> if any value appears at least twice in the array, and return <code>false</code> if every element is distinct.</p> <p>Example 1: <pre><code>**Input:** nums = [1,2,3,1]\n**Output:** true\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/217.%20Contains%20Duplicate/#solve", "title": "Solve", "text": "<p>We can use hash map to make our cache memory of found number</p> <ul> <li>Loop through all number If we found a collision then return <code>True</code>,</li> <li>Return <code>False</code> </li> </ul> <pre><code>class Solution:\ndef containsDuplicate(self, nums: List[int]) -&gt; bool:\ncache = set()\nfor n in nums:\nif n in cache:\nreturn True\ncache.add(n)\nreturn False\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/225.%20Implement%20Stack%20using%20Queues/", "title": "225. Implement Stack using Queues", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/225.%20Implement%20Stack%20using%20Queues/#problem", "title": "Problem", "text": "<p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (<code>push</code>, <code>top</code>, <code>pop</code>, and <code>empty</code>).</p> <p>Implement the <code>MyStack</code> class:</p> <ul> <li><code>void push(int x)</code> Pushes element x to the top of the stack.</li> <li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li> <li><code>int top()</code> Returns the element on the top of the stack.</li> <li><code>boolean empty()</code> Returns <code>true</code> if the stack is empty, <code>false</code> otherwise.</li> </ul> <p>Notes:</p> <ul> <li>You must use only standard operations of a queue, which means that only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code> and <code>is empty</code> operations are valid.</li> <li>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue\u2019s standard operations.</li> </ul> <p>Example 1:</p> <pre><code>**Input**\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], [|], [1], [2], [], [], []]\n**Output**\n[null, null, null, 2, 2, false]\n</code></pre> <p>Explanation <pre><code>MyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n</code></pre></p> <p>Constraints:</p> <ul> <li><code>1 &lt;= x &lt;= 9</code></li> <li>At most <code>100</code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>empty</code>.</li> <li>All the calls to <code>pop</code> and <code>top</code> are valid.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/225.%20Implement%20Stack%20using%20Queues/#solve", "title": "Solve", "text": "<p>I assuming we can only use 4 queue function, that is similar to Leetcode Stack implement provided:</p> <ul> <li>push</li> <li>pop</li> <li>first (which return the first person/element value about to leave the queue - similar to the <code>top</code> of stack)</li> <li>empty</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/225.%20Implement%20Stack%20using%20Queues/#2-queue-pushinsert-modified", "title": "2 Queue - Push/Insert modified", "text": "<p><code>O(n)</code></p> <p>We do need to implement Queue, to create a Stack that using Queue</p> <pre><code># FIFO\nclass MyQueue:\ndef __init__(self):\nself.arr = []\ndef push(self, v):\nself.arr.append(v)\ndef pop(self):\nreturn self.arr.pop(0)\ndef first(self):\nreturn self.arr[0]\ndef empty(self):\nreturn len(self.arr) == 0\n</code></pre> <p>The first implementation:</p> <ul> <li>I try to only use <code>q1</code> as the actual stack</li> <li><code>q2</code> is a buffer to temporally holding the value, which always empty. </li> </ul> <p>We perform operation on our Queue to represented Stack push implementation, so that we push in to the First of Queue, instead of Last.</p> <pre><code>    def push(self, x: int) -&gt; None:\nself.q2.push(x)\nwhile not self.q1.empty():\nv = self.q1.pop()\nself.q2.push(v)\nself.q1, self.q2 = self.q2, self.q1\n</code></pre> <ul> <li>We push the value to <code>q2</code>, making x standing as the first element of <code>q2</code> queue</li> <li>We push all value of <code>q1</code> in to <code>q2</code> by <code>pop()</code> each element out, this maintain the order of element of <code>q1</code> transfer over <code>q2</code></li> <li>Swapping <code>q1</code> and <code>q2</code> </li> </ul> <p>We maintaining <code>q1</code> is the only representation of our stack, while <code>q2 == []</code>. By achieve the modify on queue insert, all other operation can be keep the same.</p> <p>Final implementation:</p> Time Submitted Status Runtime Memory Language 08/28/2023 23:47 Accepted 37 ms 16.4 MB python3 <pre><code># FIFO\nclass MyQueue:\ndef __init__(self):\nself.arr = []\ndef push(self, v):\nself.arr.append(v)\ndef pop(self):\nreturn self.arr.pop(0)\ndef first(self):\nreturn self.arr[0]\ndef empty(self):\nreturn len(self.arr) == 0\n# LIFO\nclass MyStack:\ndef __init__(self):\nself.q1 = MyQueue()\nself.q2 = MyQueue()\ndef push(self, x: int) -&gt; None:\nself.q2.push(x)\nwhile not self.q1.empty():\nv = self.q1.pop()\nself.q2.push(v)\nself.q1, self.q2 = self.q2, self.q1\ndef pop(self) -&gt; int:\nreturn self.q1.pop()\ndef top(self) -&gt; int:\nreturn self.q1.first()\ndef empty(self) -&gt; bool:\nreturn self.q1.empty()\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/225.%20Implement%20Stack%20using%20Queues/#1-queue-pushinsert-modified", "title": "1 Queue - Push/Insert modified", "text": "<p><code>O(n)</code></p> <p>Just create a bookmark, where we track the last of the queue (and that I mean it will be the head of  the stack). By running every element in a cycle and stop at our bookmark (also remember to pop() the bookmark out), we done done push x into the first of our queue.</p> Time Submitted Status Runtime Memory Language 08/29/2023 00:16 Accepted 40 ms 16.6 MB python3 <pre><code># FIFO\nclass MyQueue:\ndef __init__(self):\nself.arr = []\ndef push(self, v):\nself.arr.append(v)\ndef pop(self):\nreturn self.arr.pop(0)\ndef first(self):\nreturn self.arr[0]\ndef empty(self):\nreturn len(self.arr) == 0\n# LIFO\nclass MyStack:\ndef __init__(self):\nself.q1 = MyQueue()\ndef push(self, x: int) -&gt; None:\nself.q1.push(0)\nself.q1.push(x)\nv = self.q1.pop()\nwhile v != 0:\nself.q1.push(v)\nv = self.q1.pop()\ndef pop(self) -&gt; int:\nreturn self.q1.pop()\ndef top(self) -&gt; int:\nreturn self.q1.first()\ndef empty(self) -&gt; bool:\nreturn self.q1.empty()\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/234.%20Palindrome%20Linked%20List/", "title": "234. Palindrome Linked List", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/234.%20Palindrome%20Linked%20List/#problem", "title": "Problem", "text": "<p>Given the <code>head</code> of a singly linked list, return <code>true</code> if it is a palindrome or <code>false</code> otherwise.</p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 105]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li>Example 1:</li> </ul> <p></p> <p>Input: head = [1,2,2,1] Output: true</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/234.%20Palindrome%20Linked%20List/#solve", "title": "Solve", "text": "<pre><code>class Solution:\ndef isPalindrome(self, head: Optional[ListNode]) -&gt; bool:\nif not head or not head.next:  # Handle empty list or single-node list\nreturn True\n# Helper function to reverse a linked list\ndef reverse_list(node):\nbefore = None\nwhile node:\ntmp = node.next\nnode.next = before\nbefore = node\nnode = tmp\nreturn before\nslow, fast = head, head\nwhile fast and fast.next:\nslow = slow.next\nfast = fast.next.next\nif fast:  # Odd number of nodes\nslow = slow.next\nreversed_second_half = reverse_list(slow)\n# Compare the first half and the reversed second half\nwhile reversed_second_half:\nif head.val != reversed_second_half.val:\nreturn False\nhead = head.next\nreversed_second_half = reversed_second_half.next\nreturn True\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/239.%20Sliding%20Window%20Maximum/", "title": "239. Sliding Window Maximum", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/239.%20Sliding%20Window%20Maximum/#problem", "title": "Problem", "text": "<p>You are given an array of integers <code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p> <p>Return the max sliding window.</p> <p>Example 1:</p> <p>Input: nums = [1,3,-1,-3,5,3,6,7], k = 3 Output: [3,3,5,5,6,7] Explanation: <pre><code>Window position                 Max\n---------------                 -----\n[1  3  -1] -3  5  3  6  7       **3**\n 1 [3  -1  -3] 5  3  6  7       **3**\n 1  3 [-1  -3  5] 3  6  7       **5**\n 1  3  -1 [-3  5  3] 6  7       **5**\n 1  3  -1  -3 [5  3  6] 7       **6**\n 1  3  -1  -3  5 [3  6  7]      **7**\n</code></pre> Example 2:</p> <p>Input: nums = [1], k = 1 Output: [1]</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>-10**4 &lt;= nums[i] &lt;= 10**4</code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/239.%20Sliding%20Window%20Maximum/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/239.%20Sliding%20Window%20Maximum/#re-run-sum-every-time", "title": "Re-run sum every time", "text": "<p>This is a TLE solution</p> <p>There isn\u2019t much thing to said, still I try to do some thing cleaver:</p> <ul> <li>We use a circle to store the current sliding window</li> <li>The max function O(k) is call only if the added number is smaller than replace value and replace value is our current maximum number </li> </ul> Time Submitted Status Runtime Memory Language 08/16/2023 18:17 Time Limit Exceeded N/A N/A python3 <pre><code>class Solution:\ndef maxSlidingWindow(self, nums: List[int], k: int) -&gt; List[int]:\ncircle = nums[:k]\ncurrMax = max(circle)\nres = [currMax]\nindex = 0\nrerun = False\nfor v in nums[k:]:\nif circle[index] == currMax:\nrerun = True\nif v &gt;= currMax:\nrerun = False\ncurrMax = v\ncircle[index] = v\nif rerun:\nrerun = False\ncurrMax = max(circle)\nres.append(currMax)\nindex += 1\nindex %= k\nreturn res\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/239.%20Sliding%20Window%20Maximum/#min-max-tree", "title": "Min-max tree", "text": "<p>A good close to O(log n) time complexity to find any Maximum number in any range. The process is that we build and storing divide by 2 of the array maximum</p> <pre><code>array:  1 2 3 4 5 6 7 8\ntree :  [2] [4] [6] [8]\n        [  4  ] [  8  ] \n        [      8      ]\n</code></pre> <p>We then travel through and comparing all node that covering <code>[x, y]</code> range  </p> Time Submitted Status Runtime Memory Language 08/16/2023 23:24 Accepted 8451 ms 352 MB python3 <pre><code>class Solution:\ndef maxSlidingWindow(self, nums: List[int], k: int) -&gt; List[int]:\ncache = {}\n# inclusive\ndef buildCache(l, r):\nif l == r:\ncache[(l,r)] = nums[l]\nelse:\nm = (l + r) // 2\nbuildCache(l, m)\nbuildCache(m+1, r)\ncache[(l,r)] = max(cache[(l,m)], cache[(m+1,r)])\nbuildCache(0, len(nums) - 1)\ndef getCache(x, y, l=0, r=len(nums)-1):\nif (y &lt; l) or (r &lt; x):\nreturn -100000\nif (x &lt;= l &lt;= r &lt;= y):\nreturn cache[(l,r)]\nm = (l + r) // 2\nreturn max(getCache(x,y, l,m), getCache(x,y, m+1,r))\nres = []\nfor i in range(len(nums)-k+1):\nres.append(getCache(i, i+k-1))\nreturn res\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/239.%20Sliding%20Window%20Maximum/#priority-queue-with-random-access-update", "title": "Priority Queue with random access update", "text": "<p>Another good close to O(log n) time complexity that creating a Heap to easily find Maximum number. </p> <p>The process is that we build a modified heap with a replace that can access the last insert number and replace it with the next number, base on:</p> <ul> <li>A cycle, fixed size <code>array</code>, that use to mimic the current sliding window. In the implement already remove that.</li> <li>A heap <code>self.heap</code></li> <li>Array <code>possition</code> that index <code>i</code> store the position of <code>heap</code> element <code>i</code>  in <code>array</code>. Or <code>array[i] == heap[pos[i]]</code></li> <li>Array <code>revertPossition</code> that index <code>i</code> store the position of <code>array</code> element <code>i</code> in the <code>heap</code>. Or <code>array[revPos[i]] == heap[i]</code></li> </ul> <p>Example: <pre><code>index  [1, 2, 3, 4, 5, 6, 7, 8]\n---\nnums   [1, 9, 8, 4, 4, 3, 2, 5, 1, 3 , ...\narray  [1, 9, 8, 4, 4, 3, 2, 5]\nheap   [9, 5, 8, 4, 4, 3, 2, 1]\npos    [2, 8, 3, 4, 5, 6, 7, 1]\nrevPos [8, 1, 3, 4, 5, 6, 7, 2]\n</code></pre></p> <p>Explain: </p> <ul> <li>Element <code>9</code> have position <code>1</code> in the <code>heap</code>, but have the position <code>2</code> in the array; So its <code>possition</code> is <code>2</code></li> <li>Element <code>1</code> have position <code>1</code> in the <code>array</code>, but have the position <code>1</code> in the array; So its <code>revertPossition</code> is <code>8</code> </li> </ul> <p>So, when we update our sliding window <code>array</code>. We remove the last insert <code>next</code> element of cycle, fixed size <code>array</code>, change it to new value <code>v</code> of the next number in <code>nums</code> array. While doing so, we update:</p> <ul> <li><code>heap</code>: Replacing <code>heap[revPos[next]]</code> with new value <code>v</code></li> <li>We then update the <code>heap</code> base on <code>v</code> value (go up or down in the heap). We also keep track of <code>pos</code> and <code>revPos</code> change by swapping them correspond with <code>heap</code> element position change:<ul> <li><code>swap(pos[parrent], pos[child])</code> : Basic swaping</li> <li><code>swap(revertPos[ pos[child] ], self.revertPos[ pos[parrent] ])</code> : Advantage swap, took me too long when trying to done the <code>revertPos</code> array directly (no <code>pos</code> array). After lot of trial and error, I have to go back to this implementation for simplicity.</li> </ul> </li> </ul> <p>It took quite some time to reimplement heap, quite great that I can done it.  </p> <p>The <code>Heap</code> data structure is implement base on array. To reduce the complexity of the calculation I use array <code>[1..n]</code> by padding  all of my array with element <code>[0]</code> (as array in python start at <code>0</code>)</p> <p>Start at node <code>x</code> in the heap, we can access</p> <ul> <li>To get parent node: <code>x//2</code> (<code>if x != 1</code>) </li> <li>To get child node: <code>x*2</code> , <code>x*2 + 1</code> (<code>if them inside the heap</code>)</li> </ul> <p>The heap have fixed size, and the update is change directly on one of heap node, so we only implement <code>up</code>, <code>down</code> function to update the element position after change.</p> <p>The main component is keep track of <code>next</code> element that need to replace. The <code>array</code> is cycle, with index <code>[1..n]</code> (inclusive), so <code>next</code> is increase by one or restart to <code>1</code> at <code>next == n+1</code> every loop  </p> <pre><code>from typing import List\nclass Heap:\ndef getChild(self, x):\nres = []\nif x*2+1 &lt;= self.size:\nres.append(x*2+1)\nif x*2 &lt;= self.size:\nres.append(x*2)\nreturn res\ndef getParrent(x):\nreturn x // 2\ndef __init__(self, arr):\nself.heap = [-1] + arr\nself.size = len(arr)\nself.pos = list(range(self.size + 1))\nself.revertPos = list(range(self.size + 1))\nself.next = 1\nfor i in range(1, self.size+1):\nself.update(i)\nfor i in range(1, self.size+1):\nself.revertPos[self.pos[i]] = i\ndef update(self, x):\nif x == 1:\nreturn\npx = Heap.getParrent(x)\nif self.heap[x] &gt; self.heap[px]:\nself.heap[x], self.heap[px] = self.heap[px], self.heap[x]\nself.pos[x], self.pos[px] = self.pos[px], self.pos[x]\nself.revertPos[self.pos[x]], self.revertPos[self.pos[px]\n] = self.revertPos[self.pos[px]], self.revertPos[self.pos[x]]\nself.update(px)\ndef downgrade(self, x):\ncx_arr = self.getChild(x)\nif len(cx_arr) == 2 and self.heap[cx_arr[1]] &gt; self.heap[cx_arr[0]]:\ncx_arr.pop(0)\nfor cx in cx_arr:\nif self.heap[x] &lt; self.heap[cx]:\nself.heap[x], self.heap[cx] = self.heap[cx], self.heap[x]\nself.pos[x], self.pos[cx] = self.pos[cx], self.pos[x]\nself.revertPos[self.pos[x]], self.revertPos[self.pos[cx]\n] = self.revertPos[self.pos[cx]], self.revertPos[self.pos[x]]\nself.downgrade(cx)\nbreak\ndef incNext(self):\nif self.next &gt;= self.size:\nself.next = 1\nelse:\nself.next += 1\ndef replace(self, v):\npos = self.revertPos[self.next]\nself.incNext()\nold = self.heap[pos]\nself.heap[pos] = v\nif old &lt; v:\nself.update(pos)\nelse:\nself.downgrade(pos)\nclass Solution:\ndef maxSlidingWindow(self, nums: List[int], k: int) -&gt; List[int]:\nheap = Heap(nums[:k])\nres = [heap.heap[1]]\nfor i in nums[k:]:\nheap.replace(i)\nres.append(heap.heap[1])\nreturn res\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/242.%20Valid%20Anagram/", "title": "242. Valid Anagram", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/242.%20Valid%20Anagram/#problem", "title": "Problem", "text": "<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>t</code> is an anagram of <code>s</code>, and <code>false</code> otherwise.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters.</li> </ul> <p>Example 1: <pre><code>**Input:** s = \"anagram\", t = \"nagaram\"\n**Output:** true\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/242.%20Valid%20Anagram/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/242.%20Valid%20Anagram/#sort-and-compare-using-hash", "title": "Sort and compare using hash", "text": "<p>Re-arrange both string with sort or count each character them comparing. I prefer Re-arrange as it has the lowest memory</p> <pre><code>class Solution:\ndef isAnagram(self, s: str, t: str) -&gt; bool:\nreturn sorted(s) == sorted(t)\n</code></pre> <p>I want to implement C code that using similar approach. C not have provided <code>hash</code> function so we use a implement of djb2 hash <pre><code>// djb2 hash function for strings\nunsigned long hash_string(const char* str) {\nunsigned long hash = 5381;\nint c;\nwhile ((c = *str++)) {\nhash = ((hash &lt;&lt; 5) + hash) + c; /* hash * 33 + c */\n}\nreturn hash;\n}\nint compare_char(const void* a, const void* b) {\nreturn *(char*)a - *(char*)b;\n}\nbool isAnagram(char* s, char* t) {\nint len_s = strlen(s);\nint len_t = strlen(t);\nif (len_s != len_t) {\nreturn false;\n}\nqsort(s, len_s, sizeof(char), compare_char);\nqsort(t, len_t, sizeof(char), compare_char);\nreturn hash_string(s) == hash_string(t);\n}\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/242.%20Valid%20Anagram/#counting", "title": "Counting", "text": "<p>While this isn\u2019t a general way, we only have a range of 26 character, which quite low, and count sort is a great <code>O(n)</code> way to deal with these type of problem.</p> <pre><code>int isAnagram(char * s, char * t){\nint lens = strlen(s);\nif (lens != strlen(t)) return 0;\nint s_counter[26] = {0};\nint t_counter[26] = {0};\nfor (int i = 0; i &lt; lens; i++){\nint curr_letter_s = s[i] - 97;\ns_counter[curr_letter_s]++;\nint curr_letter_t = t[i] - 97;\nt_counter[curr_letter_t]++;\n}\nfor (int i = 0; i &lt; 26; i++){\nif (s_counter[i] != t_counter[i]) return 0;\n}\nreturn 1;\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/242.%20Valid%20Anagram/#compare", "title": "Compare", "text": "Time Submitted Status Runtime Memory Language 07/19/2023 22:07 Accepted 6 ms 5.8 MB c 07/19/2023 22:04 Accepted 30 ms 6.3 MB c 07/19/2023 21:59 Accepted 71 ms 17.4 MB python3", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/268.%20Missing%20Number/", "title": "268. Missing Number", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/268.%20Missing%20Number/#problem", "title": "Problem", "text": "<p>Given an array <code>nums</code> containing <code>n</code> distinct numbers in the range <code>[0, n]</code>, return the only number in the range that is missing from the array.</p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10**4</code></li> <li><code>0 &lt;= nums[i] &lt;= n</code></li> <li>All the numbers of <code>nums</code> are unique.</li> </ul> <p>Example 1: <pre><code>**Input:** nums = [3,0,1]\n**Output:** 2\n**Explanation:** n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/268.%20Missing%20Number/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/268.%20Missing%20Number/#bit-manipulation", "title": "Bit manipulation", "text": "<p>We can use <code>xor</code> to get needed information: </p> <ul> <li><code>Xor</code> two same number will return 0</li> <li>While <code>Xor</code> any number with 0 return it self</li> </ul> <p>We already know <code>nums</code> array is range <code>[0..len(nums)]</code> with a missing number. By <code>xor</code> all available number in range <code>[0..len(nums)]</code> again, we effectively negative all exist number in <code>nums</code> array, leaving only one missing number left being <code>xor</code> with <code>0</code>.</p> <p>Which mean, the sum <code>s</code> of <code>xor</code> all number is our needed result missing number</p> <pre><code>class Solution:\ndef missingNumber(self, nums: List[int]) -&gt; int:\ns = 0\nfor i, x in enumerate(nums):\ns = s ^ i ^ x\ns = s ^ len(nums)\nreturn s\n</code></pre> <p>Same implement in C <pre><code>int missingNumber(int* nums, int numsSize){\nint s = 0;\nfor (int i = 0; i &lt; numsSize; i++) {\ns ^= i ^ nums[i];\n}\ns ^= numsSize;\nreturn s;\n}\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/268.%20Missing%20Number/#sort-counting-caching-binary-search-tree", "title": "Sort, Counting, Caching, Binary search tree\u2026", "text": "<p>Try to find missing number by checking all possible answer one by one:</p> <ul> <li>Loop through <code>nums</code> array, remember all found number</li> <li>Checking again in range <code>[0..len(number)]</code> and our chosen caching information from previous step to quickly separate: which number is in <code>nums</code> array, and which is the missing one</li> </ul> <pre><code>class Solution:\ndef missingNumber(self, nums: List[int]) -&gt; int:\nisFound = [False] * (len(nums)+1)\nfor x in nums:\nisFound[x] = True\nfor i, f in enumerate(isFound):\nif not f:\nreturn i\nreturn len(nums)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/274.%20H-Index/", "title": "274. H Index", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "binary_search"]}, {"location": "notes/Leetcode%20100-1000/274.%20H-Index/#problem", "title": "Problem", "text": "<p>Given an array of integers <code>citations</code> where <code>citations[i]</code> is the number of citations a researcher received for their <code>ith</code> paper, return the researcher\u2019s h-index.</p> <p>According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of <code>h</code> such that the given researcher has published at least <code>h</code> papers that have each been cited at least <code>h</code> times.</p> <p>Example 1:</p> <p>Input: citations = [3,0,6,1,5] Output: 3 Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.</p> <p>Example 2:</p> <p>Input: citations = [1,3,1] Output: 1</p> <p>Constraints:</p> <ul> <li><code>n == citations.length</code></li> <li><code>1 &lt;= n &lt;= 5000</code></li> <li><code>0 &lt;= citations[i] &lt;= 1000</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "binary_search"]}, {"location": "notes/Leetcode%20100-1000/274.%20H-Index/#solve", "title": "Solve", "text": "<p>O(n log n) because of sort. Count sort could make this better - Using binary search knowing that \u201cat least <code>h</code> papers that have each been cited at least <code>h</code> times.\u201d Which mean, finding the starting point where <code>citations[m] &gt;= n-m</code></p> <pre><code>class Solution:\ndef hIndex(self, citations: List[int]) -&gt; int:\ncitations.sort()\nn = len(citations)\nl = -1\nr = n\nwhile True:\nm = (l + r) // 2\nif l == m:\nbreak\nif citations[m] &gt;= n-m:\nr = m\nelse:\nl = m\nreturn n-r\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "binary_search"]}, {"location": "notes/Leetcode%20100-1000/283.%20Move%20Zeroes/", "title": "283. Move Zeroes", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/283.%20Move%20Zeroes/#problem", "title": "Problem", "text": "<p>Given an integer array <code>nums</code>, move all <code>0</code>\u2019s to the end of it while maintaining the relative order of the non-zero elements.</p> <p>Note that you must do this in-place without making a copy of the array.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10**4</code></li> <li><code>-2**31 &lt;= nums[i] &lt;= 2**31 - 1</code></li> </ul> <p>Example 1: <pre><code>**Input:** nums = [0,1,0,3,12]\n**Output:** [1,3,12,0,0]\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/283.%20Move%20Zeroes/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/283.%20Move%20Zeroes/#bubble-sort", "title": "Bubble Sort", "text": "<ul> <li><code>-2**31 &lt;= nums[i] &lt;= 2**31 - 1</code> so we not want to count that much, even of you want to, consider using a <code>dict()</code> hash map</li> <li>Quite simple problem, but they want you to keeping <code>nums</code> in-place which causing some trouble as we dealing with python array (Which is way more than just a normal array)</li> </ul> <p>Here i using bubble sort to push all <code>0</code> number to the end, which is a <code>O(n**2)</code> time complexity function</p> <pre><code>class Solution:\ndef moveZeroes(self, nums: List[int]) -&gt; None:\nfor i in range(len(nums)):\nfor j in range(len(nums)-i-1):\nif nums[j] == 0:\nnums[j], nums[j+1] = nums[j+1], nums[j]\nreturn nums\n</code></pre> <pre><code>void moveZeroes(int* nums, int numsSize){\nfor (int i = 0; i &lt; numsSize; i++) {\nfor (int j = 0; j &lt; numsSize - i - 1; j++) {\nif (nums[j] == 0) {\nint temp = nums[j];\nnums[j] = nums[j + 1];\nnums[j + 1] = temp;\n}\n}\n}\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/283.%20Move%20Zeroes/#just-sort-it", "title": "Just sort it", "text": "<p>Change all number 0 value to max number, sort it, using temp array to store processing data, update the <code>nums</code> array to match with processed result. </p> <pre><code>class Solution:\ndef moveZeroes(self, nums: List[int]) -&gt; None:\nkey = [len(nums)+1] * len(nums)\nindex = 0\nfor i, v in enumerate(nums):\nif v != 0:\nkey[index] = i\nindex += 1\nkey.sort()\ntmp = [0] * len(nums)\nfor i, k in enumerate(key):\nif k &gt;= len(nums):\nbreak\ntmp[i] = nums[k]\nfor i, v in enumerate(tmp):\nnums[i] = v\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/283.%20Move%20Zeroes/#not-even-sorting", "title": "Not even sorting", "text": "<p>Create a temp table. Loop through all available number and if it not <code>0</code> push to <code>tmp</code> array one by one</p> <pre><code>class Solution:\ndef moveZeroes(self, nums: List[int]) -&gt; None:\ntmp = [0] * len(nums)\nindex = 0\nfor v in nums:\nif v != 0:\ntmp[index] = v\nindex += 1\nfor i, v in enumerate(tmp):\nnums[i] = v\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/326.%20Power%20of%20Three/", "title": "326. Power of Three", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/326.%20Power%20of%20Three/#problem", "title": "Problem", "text": "<p>Given an integer <code>n</code>, return <code>true</code> if it is a power of three. Otherwise, return <code>false</code>.</p> <p>An integer <code>n</code> is a power of three, if there exists an integer <code>x</code> such that <code>n == 3x</code>.</p> <p>Constraints:</p> <ul> <li><code>-231 &lt;= n &lt;= 231 - 1</code></li> </ul> <p>Example 1: <pre><code>**Input:** n = 27\n**Output:** true\n**Explanation:** 27 = 33\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/326.%20Power%20of%20Three/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/326.%20Power%20of%20Three/#actually-using-a-computer-to-compute", "title": "Actually using a computer to compute", "text": "<p>We can use <code>math</code> to do it. Which is trying to check if <code>n = 3**x</code>  =&gt; <code>x = log_3(n)</code></p> <p>Need to consider some off by 1 changing between integer and float using <code>trunc</code> because of floating point error</p> <pre><code>class Solution:\ndef isPowerOfThree(self, n: int) -&gt; bool:\nif n &lt;= 0:\nreturn False\nm = trunc(log(n,3))\nreturn 3**m == n or 3**(m+1) == n\n</code></pre> <p>or equal c code <pre><code>bool isPowerOfThree(int n){\nif (n &lt;= 0) {\nreturn false;\n}\nint m = (int)trunc(log(n) / log(3));\nreturn pow(3, m) == n || pow(3, m + 1) == n;\n}\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/326.%20Power%20of%20Three/#counting-with-loop", "title": "Counting with loop", "text": "<p>Looping until n == 0:</p> <ul> <li>Check <code>n mod 3 == 0</code>, if not return False</li> <li>Update <code>n = n div 3</code></li> </ul> <p>This to make sure we find  <code>n = 3 * 3 * 3 ...</code> (k times), count the process and we can return the final <code>k</code> count number.</p> <pre><code>bool isPowerOfThree(int n){\nif (n == 0)\nreturn false;\nwhile (n != 1)\n{\nif (n % 3 != 0)\nreturn false;\nn = n / 3;\n}\nreturn true;\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/338.%20Counting%20Bits/", "title": "338. Counting Bits", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/338.%20Counting%20Bits/#problem", "title": "Problem", "text": "<p>Given an integer <code>n</code>, return an array <code>ans</code> of length <code>n + 1</code> such that for each <code>i</code> (<code>0 &lt;= i &lt;= n</code>), <code>ans[i]</code> is the number of <code>1</code>\u2019s in the binary representation of <code>i</code>.</p> <p>Example 1:</p> <p>Input: n = 2 Output: [0,1,1] Explanation: 0 \u2013&gt; 0 1 \u2013&gt; 1 2 \u2013&gt; 10</p> <p>Example 2:</p> <p>Input: n = 5 Output: [0,1,1,2,1,2] Explanation: 0 \u2013&gt; 0 1 \u2013&gt; 1 2 \u2013&gt; 10 3 \u2013&gt; 11 4 \u2013&gt; 100 5 \u2013&gt; 101</p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 10**5</code></li> </ul> <p>Follow up:</p> <ul> <li>It is very easy to come up with a solution with a runtime of <code>O(n log n)</code>. Can you do it in linear time <code>O(n)</code> and possibly in a single pass?</li> <li>Can you do it without using any built-in function (i.e., like <code>__builtin_popcount</code> in C++)?</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/338.%20Counting%20Bits/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/338.%20Counting%20Bits/#built-in-bit_count-python", "title": "Built-in <code>bit_count()</code> python", "text": "<p><code>O(n log n)</code></p> <p>Python number have built-in <code>bit_count()</code> that give us total <code>1</code> in bit representation of any number. We assuming this take <code>log n</code> to count it.</p> Time Submitted Status Runtime Memory Language 09/01/2023 17:47 Accepted 65 ms 23.2 MB python3 <pre><code>class Solution:\ndef countBits(self, n: int) -&gt; List[int]:\nreturn [i.bit_count() for i in range(n+1)]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/338.%20Counting%20Bits/#dynamic-programming", "title": "Dynamic programming", "text": "<p><code>O(n)</code></p> <p>We can split any binary number into <code>&lt;right-shift&gt; + &lt;remain 1/0&gt;</code> , for example <code>100110111001</code> can be split into <code>10011011100</code> and <code>1</code>:</p> <pre><code>bit_count(100110111001) = bit_count(10011011100) + bit_count(1)\n                        = bit_count(100110111001 &gt;&gt; 1) + bit_count(1)\n</code></pre> <p>Formula:</p> <pre><code>bit_count(x) = bit_count(x&gt;&gt;1) + (x &amp; 1)\n</code></pre> <p>With this formula, we can create a simple Dynamic programing solution:</p> Time Submitted Status Runtime Memory Language 09/01/2023 19:45 Accepted 70 ms 23 MB python3 <pre><code>class Solution:\ndef countBits(self, n: int) -&gt; List[int]:\ncache = [0]\ncount = 0\nfor i in range(1,n+1):\ncache.append(cache[(i &gt;&gt; 1)] + (i &amp; 1))\nreturn cache\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/344.%20Reverse%20String/", "title": "344. Reverse String", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/344.%20Reverse%20String/#problem", "title": "Problem", "text": "<p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p> <p>You must do this by modifying the input array in-place with <code>O(1)</code> extra memory.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 105</code></li> <li><code>s[i]</code> is a printable ascii character.</li> </ul> <p>Example 1: <pre><code>**Input:** s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n**Output:** [\"o\",\"l\",\"l\",\"e\",\"h\"]\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/344.%20Reverse%20String/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/344.%20Reverse%20String/#create-temporarystored-memory", "title": "Create temporary/stored memory", "text": "<p>Create <code>tmp</code> string, process to reversed it\u2019s order,  and re-update s after</p> <pre><code>class Solution:\ndef reverseString(self, s: List[str]) -&gt; None:\n\"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\ntmp = s[::-1]\nfor i,c in enumerate(tmp):\ns[i] = c\nreturn s\n</code></pre> <p>equal c code <pre><code>void reverseString(char* s, int sSize){\nchar* tmp = (char*)malloc(sSize * sizeof(char));\nfor (int i = 0; i &lt; sSize; i++) {\ntmp[i] = s[sSize - i - 1];\n}\nfor (int i = 0; i &lt; sSize; i++) {\ns[i] = tmp[i];\n}\nfree(tmp);\n}\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/344.%20Reverse%20String/#reverse-in-place", "title": "Reverse in-place", "text": "<p>We can start from both of the start and the end of string. Swap them, go to the next pair and stop at the middle of the string</p> <pre><code>class Solution(object):\ndef reverseString(self, s):\nfor i in range(len(s)//2):\ns[i], s[len(s) -1 - i] = s[len(s) -1 - i], s[i]\n</code></pre> <p>equal c code <pre><code>void reverseString(char* s, int sSize){\nif (sSize == 0){\nreturn;\n}\nfor (int i = 0 ; i &lt; sSize/2 ; i++){\nchar tmp = s[i];\ns[i] = s[sSize-1-i];\ns[sSize-1-i] = tmp;\n}\n}\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/350.%20Intersection%20of%20Two%20Arrays%20II/", "title": "350. Intersection of Two Arrays II", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/350.%20Intersection%20of%20Two%20Arrays%20II/#problem", "title": "Problem", "text": "<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li> </ul> <p>Example 1: <pre><code>**Input:** nums1 = [1,2,2,1], nums2 = [2,2]\n**Output:** [2,2]\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/350.%20Intersection%20of%20Two%20Arrays%20II/#solve", "title": "Solve", "text": "<p>I do exactly this:</p> <ul> <li>Count all number of both array</li> <li>Find intersect number value (don\u2019t care about duplicate)</li> <li>Rebuild result array using needed information: <code>&lt;Total time appear both nums&gt; * [value]</code></li> </ul> <pre><code>class Solution(object):\ndef intersect(self, nums1, nums2):\ninterset = set(nums1).intersection(set(nums2))\ncount = {}\nfor i in nums1:\nif i not in count:\ncount[i] = [0, 0]\ncount[i][0] += 1\nfor i in nums2:\nif i not in count:\ncount[i] = [0, 0]\ncount[i][1] += 1\nresult = []\nfor key in interset:\nresult += min(count[key])* [key]\nreturn result\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/350.%20Intersection%20of%20Two%20Arrays%20II/#counting-using-a-large-predefined-array", "title": "Counting, using a large predefined array", "text": "<p>I need more time to done the same with C, as C not have good hash map for set() available from the language standard library at all, we using fully the provided Constant:</p> <ul> <li>Count all the number appear on <code>nums1</code> and <code>nums2</code>, storing in a predefined array that cover all possible number. Which is  <code>[0..1000]</code>(as <code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code>)</li> <li>Build up the intersection by going through all possible number, by using the same logic:<ul> <li>If our current number <code>i</code> appear on both, adding that <code>i</code> to the  <code>intersectArr</code> for the total <code>occur = min(count1[i], count2[i])</code> times</li> <li>If it not appear <code>occur = 0</code>, go to the next number</li> </ul> </li> </ul> <p>Now to the \u201cslow\u201d part, why it slow? Because I need to check:</p> <ul> <li>The return type is <code>int*</code>, which is a persistence memory in heap, while our <code>intersectArr</code> is allocating inside a C local function scope, which being clear/disappear after going back to main function. So, we need to <code>malloc</code> new memory and transfer <code>intersectArr</code> over one by one. </li> <li>The <code>int* returnSize</code>, this is where we have to return the length or our <code>result</code>. It quite confusion as <code>returnSize</code> is a pointer (which why using <code>printf(\"%d\", returnSize)</code> output some thing like <code>91267892</code>). We need to know syntax to correctly pass the required value to  <code>returnSize</code>, which is <code>*returnSize = intersectArrLen</code>.</li> </ul> <pre><code>/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){\nint* result;\nint count1[1005] = {0};\nint count2[1005] = {0};\nint intersectArr[1005] = {0};\nint intersectArrLen = 0;\nint occur = 0;\nfor (int i = 0; i &lt; nums1Size; i++) count1[nums1[i]] ++;\nfor (int i = 0; i &lt; nums2Size; i++) count2[nums2[i]] ++;\nfor (int i = 0; i &lt; 1001; i++){\noccur = count1[i];\nif (count1[i] &gt; count2[i]) occur = count2[i];\nfor (int _j = 0; _j &lt; occur; _j ++) {\nintersectArr[intersectArrLen] = i;\nintersectArrLen ++;\n}\n}\nresult = (int*)malloc(intersectArrLen * sizeof(int));\nfor (int i = 0; i &lt; intersectArrLen; i++){\nresult[i] = intersectArr[i];\n}\n*returnSize = intersectArrLen;\nreturn result;\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/", "title": "373. Find K Pairs with Smallest Sums", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/#problem", "title": "Problem", "text": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> sorted in ascending order and an integer <code>k</code>.</p> <p>Define a pair <code>(u, v)</code> which consists of one element from the first array and one element from the second array.</p> <p>Return the <code>k</code> pairs <code>(u1, v1), (u2, v2), ..., (uk, vk)</code> with the smallest sums.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 10**5</code></li> <li><code>-10**9 &lt;= nums1[i], nums2[i] &lt;= 10**9</code></li> <li><code>nums1</code> and <code>nums2</code> both are sorted in ascending order.</li> <li><code>1 &lt;= k &lt;= 10**4</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/#first-look", "title": "First look", "text": "<ol> <li>You want to get minimal value: Which could be heap, sorting, min binary tree, </li> <li>We don\u2019t care about the duplicate or position so we could go for: heap, sorting</li> <li>Sorting give overall better performance, as the <code>nums_1</code> and <code>nums_2</code> is already sorted in ascending order. By define, sum of a pair number <code>(x1,y1)</code> will be less than <code>(x2,y2)</code> if <code>x1.index &lt;= x2.index</code> and <code>y1.index &lt;= y2.index</code> (<code>x in nums_1</code>, <code>y in nums_2</code>)</li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/#1-quick-first-thought", "title": "1. Quick first thought", "text": "<ol> <li>Create a pointer <code>p</code> for each <code>num_arr</code> , index from <code>0</code>, we calling their created pair<code>(p1, p2)</code> which start at  <code>(0,0)</code></li> <li>Loop k times, push pair <code>(p1, p2)</code> into result <code>arr</code> and increase either <code>p1</code> or <code>p2</code> (base on value of <code>nums_1[p1]</code> and <code>nums_2[p2]</code>)</li> <li>Return created <code>arr</code></li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/#2-wow-that-wrong", "title": "2. Wow, that wrong", "text": "<ol> <li>The first one don\u2019t reuse index after <code>p1</code> and <code>p2</code> already passing it, so we can\u2019t detect answer that use the <code>index</code> back to back</li> <li>Quick fix is running a max cap of <code>p1</code> and <code>p2</code>, if we reach and break the max cap, we can reuse all element that in the range of either <code>[0..p1]</code> or <code>[0..p2]</code> </li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/#3-heap-attempt-update-the-pointer-case", "title": "3. Heap attempt, update the pointer case", "text": "<p>Seem like heap still coming back, as rerunning and pointer can\u2019t handle all case where we actually need to consider the sum of pair <code>(p1,p2)</code></p> <ol> <li>Quickly add all available pair create by <code>nums1</code> and <code>nums2</code> into each correspond separated heap, every heap element is a pair <code>(p1, p2)</code> with priority value of <code>sum = nums1[p1] + nums2[p2]</code> </li> <li>Update: Every element <code>p1</code> of <code>nums1</code> will be pair with the lowest available <code>p2</code> of <code>nums2</code> ; After append to the result; we will increase <code>p2</code> to make the new pair from <code>p1</code> and push it back to heap  </li> <li>Run in a loop until we get <code>k</code> element in the result <code>arr</code>; We use a <code>set()</code> hash map to handle with the duplication</li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/#implement", "title": "Implement", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/#1-first-implement", "title": "1. First implement", "text": "<p>Quick and easy, follow first thought process <pre><code>class Solution:\ndef kSmallestPairs(self,\nnums1: List[int],\nnums2: List[int],\nk: int) -&gt; List[List[int]]:\np1, p2 = 0, 0\narr = []\nfor _ in range(k):\narr.append([nums1[p1], nums2[p2]])\nif not p1 + 1 &lt; len(nums1) and not p2 + 1 &lt; len(nums2):\nbreak\nif not p1 + 1 &lt; len(nums1):\np2 += 1\ncontinue\nif not p2+1 &lt; len(nums2):\np1 += 1\ncontinue\nif nums1[p1+1] &gt; nums2[p2+1]:\np2 += 1\nelse:\np1 += 1\nreturn arr\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/#2-second-attempt", "title": "2. Second attempt", "text": "<p>After seeing the problem that come with reusing number <pre><code>class Solution:\ndef kSmallestPairs(self,\nnums1: List[int],\nnums2: List[int],\nk: int) -&gt; List[List[int]]:\np1, p2 = 0, 0\nmax_p1, max_p2 = p1, p2\narr = []\nfor _ in range(k):\narr.append([nums1[p1], nums2[p2]])\nif not p1 + 1 &lt; len(nums1) and not p2 + 1 &lt; len(nums2):\nbreak\nif not p1 + 1 &lt; len(nums1):\np2 += 1\nif p2 &gt; max_p2:\nmax_p2 = p2\np1 = 0\ncontinue\nif not p2+1 &lt; len(nums2):\np1 += 1\nif p1 &gt; max_p1:\nmax_p1 = p1\np2 = 0\ncontinue\nif nums1[p1+1] &gt; nums2[p2+1]:\np2 += 1\nif p2 &gt; max_p2:\nmax_p2 = p2\np1 = 0\nelse:\np1 += 1\nif p1 &gt; max_p1:\nmax_p1 = p1\np2 = 0\nreturn arr\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/#3-heap-attempt", "title": "3. Heap attempt", "text": "<ul> <li>Running pointer for every element of both <code>nums1</code> and <code>nums2</code> instead</li> <li>If we add a <code>(pos1, pos2)</code> pair into result <code>arr</code>; Try increase the correspond pointer, and push newly created pair either <code>(pos1 +1, pos2)</code> or <code>(pos1 , pos2+1)</code> to possible answer.</li> <li>Handle the find minimal answer by using <code>heap</code></li> <li>Handle possible duplication by using a <code>set()</code> hash map</li> </ul> <pre><code>class Solution:\ndef kSmallestPairs(self,\nnums1: List[int],\nnums2: List[int],\nk: int) -&gt; List[List[int]]:\ntrace = set()\np1 = [(value + nums2[0], (index, 0))\nfor index, value in enumerate(nums1)]\np2 = [(value + nums1[0], (0, index))\nfor index, value in enumerate(nums2)]\nheapq.heapify(p1)\nheapq.heapify(p2)\narr = []\nfor _ in range(k*len(nums1)*len(nums2)):\nif len(trace) == k:\nbreak\nif len(p1) == len(p2) == 0:\nbreak\nneedPopP1 = False\nif len(p1) == 0:\nneedPopP1 = False\nelif len(p2) == 0:\nneedPopP1 = True\nelse:\nv1, (_, _) = p1[0]\nv2, (_, _) = p2[0]\nneedPopP1 = v1 &lt;= v2\nif needPopP1:\n_, (pos1, pos2) = heapq.heappop(p1)\nif (pos1, pos2) not in trace:\narr.append([nums1[pos1], nums2[pos2]])\ntrace.add((pos1, pos2))\nif pos2+1 &lt; len(nums2):\nheapq.heappush(\np1, (nums1[pos1] + nums2[pos2+1], (pos1, pos2+1)))\nelse:\n_, (pos1, pos2) = heapq.heappop(p2)\nif (pos1, pos2) not in trace:\narr.append([nums1[pos1], nums2[pos2]])\ntrace.add((pos1, pos2))\nif pos1+1 &lt; len(nums1):\nheapq.heappush(\np2, (nums1[pos1+1] + nums2[pos2], (pos1+1, pos2)))\nreturn arr\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/#4-final-refactor", "title": "4. Final refactor", "text": "<ul> <li>The <code>heap</code> for <code>nums2</code> isn\u2019t necessary, we only need allocate pointer for every element of either  <code>nums1</code> or <code>nums2</code> (This implement using <code>nums1</code>)</li> <li>Also, this implementation won\u2019t have duplicate value, so <code>set()</code> hash map isn\u2019t necessary</li> </ul> <pre><code>class Solution:\ndef kSmallestPairs(self,\nnums1: List[int],\nnums2: List[int],\nk: int) -&gt; List[List[int]]:\np1 = [(value + nums2[0], (index, 0))\nfor index, value in enumerate(nums1)]\nheapq.heapify(p1)\narr = []\nfor _ in range(k):\nif len(arr) == k:\nbreak\nif len(p1) == 0:\nbreak\n_, (pos1, pos2) = heapq.heappop(p1)\narr.append([nums1[pos1], nums2[pos2]])\nif pos2+1 &lt; len(nums2):\nheapq.heappush(\np1, (nums1[pos1] + nums2[pos2+1], (pos1, pos2+1)))\nreturn arr\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/373.%20Find%20K%20Pairs%20with%20Smallest%20Sums/#complexity", "title": "Complexity", "text": "<ul> <li>Time <code>O( k * log(len(nums1)) )</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/377.%20Combination%20Sum%20IV/", "title": "377. Combination Sum IV", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/377.%20Combination%20Sum%20IV/#problem", "title": "Problem", "text": "<p>Given an array of distinct integers <code>nums</code> and a target integer <code>target</code>, return the number of possible combinations that add up to <code>target</code>.</p> <p>The test cases are generated so that the answer can fit in a 32-bit integer.</p> <p>Example 1:</p> <p>Input: nums = [1,2,3], target = 4 Output: 7 Explanation: The possible combination ways are: (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) Note that different sequences are counted as different combinations.</p> <p>Example 2:</p> <p>Input: nums = [9], target = 3 Output: 0</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li>All the elements of <code>nums</code> are unique.</li> <li><code>1 &lt;= target &lt;= 1000</code></li> </ul> <p>Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/377.%20Combination%20Sum%20IV/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/377.%20Combination%20Sum%20IV/#dynamic-programing", "title": "Dynamic programing", "text": "<p><code>O(n ** 2)</code></p> <p>It really similar to Coins charge problem (a basic DP problem). Also, it available in Leetcode 518. Coin Change II, do already do a brief explanation on the ordering of for loop can be matter.</p> <p>Recursive formulation: <pre><code>for (n: nums)\n    totalPossible[i] = totalPossible[i-n] \n</code></pre></p> <p>Final implementation</p> Time Submitted Status Runtime Memory Language 09/09/2023 10:50 Accepted 41 ms 16.2 MB python3 <pre><code>class Solution:\ndef combinationSum4(self, nums: List[int], target: int) -&gt; int:\n# Note that different sequences are counted as different combinations \n# :)??\nnums.sort()\ncache = [0] * (target+1)\ncache[0] = 1\nfor i in range(1, target+1):\nfor n in nums:\nif n &gt; i:\nbreak\ncache[i] += cache[i-n]\nreturn cache[-1]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/380.%20Insert%20Delete%20GetRandom%20O%281%29/", "title": "380. Insert Delete GetRandom O(1)", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/380.%20Insert%20Delete%20GetRandom%20O%281%29/#problem", "title": "Problem", "text": "<p>Implement the <code>RandomizedSet</code> class:</p> <ul> <li><code>RandomizedSet()</code> Initializes the <code>RandomizedSet</code> object.</li> <li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li> <li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li> <li><code>int getRandom()</code> Returns a random element from the current set of elements (it\u2019s guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.</li> </ul> <p>You must implement the functions of the class such that each function works in average <code>O(1)</code> time complexity.</p> <p>Example 1: <pre><code>**Input**\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], [|], [1], [2], [2], [], [1], [2], []]\n**Output**\n[null, true, false, true, 2, true, false, 2]\n</code></pre> Explanation <pre><code>RandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n</code></pre> Constraints:</p> <ul> <li><code>-2**31 &lt;= val &lt;= 2**31 - 1</code></li> <li>At most <code>2 *</code> <code>10**5</code> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li> <li>There will be at least one element in the data structure when <code>getRandom</code> is called.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/380.%20Insert%20Delete%20GetRandom%20O%281%29/#solve", "title": "Solve", "text": "<pre><code>class RandomizedSet:\ndef __init__(self):\nself.a = set()\ndef insert(self, val: int) -&gt; bool:\nif val in self.a:\nreturn False\nself.a.add(val)\nreturn True\ndef remove(self, val: int) -&gt; bool:\nif val not in self.a:\nreturn False\nself.a.remove(val)\nreturn True\ndef getRandom(self) -&gt; int:\nreturn list(self.a)[randrange(0,len(self.a))]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/387.%20First%20Unique%20Character%20in%20a%20String/", "title": "387. First Unique Character in a String", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/387.%20First%20Unique%20Character%20in%20a%20String/#problem", "title": "Problem", "text": "<p>Given a string <code>s</code>, find the first non-repeating character in it and return its index. If it does not exist, return <code>-1</code>.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/387.%20First%20Unique%20Character%20in%20a%20String/#solve", "title": "Solve", "text": "<pre><code>class Solution(object):\ndef firstUniqChar(self, s):\ncount = {}\npos = {}\nfor i, c in enumerate(s):\nif c not in count:\ncount[c] = 0\npos[c] = i\ncount[c] += 1\npossible = []\nfor k in count:\nif count[k] == 1:\npossible.append(pos[k])\nif len(possible) == 0:\nreturn -1\nreturn min(possible)``\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/389.%20Find%20the%20Difference/", "title": "389. Find the Difference", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/389.%20Find%20the%20Difference/#problem", "title": "Problem", "text": "<p>You are given two strings <code>s</code> and <code>t</code>.</p> <p>String <code>t</code> is generated by random shuffling string <code>s</code> and then add one more letter at a random position.</p> <p>Return the letter that was added to <code>t</code>.</p> <p>Example 1:</p> <p>Input: s = \u201cabcd\u201d, t = \u201cabcde\u201d Output: \u201ce\u201d Explanation: \u2018e\u2019 is the letter that was added.</p> <p>Example 2:</p> <p>Input: s = \u201c\u201d, t = \u201cy\u201d Output: \u201cy\u201d</p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 1000</code></li> <li><code>t.length == s.length + 1</code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/389.%20Find%20the%20Difference/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/389.%20Find%20the%20Difference/#bit-operator-xor", "title": "Bit operator <code>xor</code>", "text": "<p><code>O(n)</code></p> <p>I just consider string as a full binary array, two same bytes <code>xor</code> each other will return <code>0</code>. Thus, <code>xor</code> every byte in <code>s</code> and <code>t</code> array will equivalent to `0 xor 0 xor \u2026 xor 0 xor  = . <pre><code>func findTheDifference(s string, t string) byte {\nvar res byte = 0\nfor i := 0; i &lt; len(s); i ++ {\nres = res ^ s[i]\n}\nfor i := 0; i &lt; len(t); i ++ {\nres = res ^ t[i]\n}\nreturn res\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/", "title": "392. Is Subsequence", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#problem", "title": "Problem", "text": "<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>s</code> is a subsequence of <code>t</code>, or <code>false</code> otherwise.</p> <p>A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code> while <code>\"aec\"</code> is not).</p> <p>Example 1:</p> <p>Input: s = \u201cabc\u201d, t = \u201cahbgdc\u201d Output: true</p> <p>Example 2:</p> <p>Input: s = \u201caxc\u201d, t = \u201cahbgdc\u201d Output: false</p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 100</code></li> <li><code>0 &lt;= t.length &lt;= 10**4</code></li> <li><code>s</code> and <code>t</code> consist only of lowercase English letters.</li> </ul> <p>Follow up: Suppose there are lots of incoming <code>s</code>, say <code>s1, s2, ..., sk</code> where <code>k &gt;= 10**9</code>, and you want to check one by one to see if <code>t</code> has its subsequence. In this scenario, how would you change your code?</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#find-s-in-t-using-a-straight-line-trie-tree", "title": "Find s in t using a straight line Trie-tree", "text": "<p><code>O(n)</code></p> <p>I like the follow up question, we create a Trie tree using all possible s (s1, s2, \u2026, sk) that need to be check.</p> <p>But we only have one <code>s</code> here, so the Trie tree from all possible s is a single one line tree.</p> <p>Let set some number:</p> <ul> <li>m = t.length</li> <li>n = s.length</li> </ul> <p>With out any follow up, this cost O(m) time in worst case</p> <p>For follow up time complexity, we cost: - O(k * n) to create Trie-tree for all possible S - A query to find all s1,s2 \u2026 sk is in t could cost us a traversal cost O(length t)  + update tree cost O(all tree node) &lt;= O(k * n) - So overall we could reach O(k * n) + O(m) time complexity </p> <p>But k = 10 ** 9 ? So we dealing with a 100_000_000_000 low case English character input ~ 100 GB of input here. <code>O(k * n)</code> isn\u2019t a great solution at all </p> <pre><code>class Solution:\ndef isSubsequence(self, s: str, t: str) -&gt; bool:\nx = 0\ni = 0\nwhile x &lt; len(s) and i &lt; len(t):\nif t[i] == s[x]:\nx += 1\ni += 1\nreturn x == len(s)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#trie-tree-using-t", "title": "Trie-tree using t", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#normal-trie-tree", "title": "Normal Trie-tree", "text": "<p>If we in the case that s is random, we couldn\u2019t create Trie-tree on <code>s</code> at all. This mean, a normal approach is that we preprocess <code>t</code> to a Trie-tree to quickly traversing and finding s.</p> <p>Now look at <code>0 &lt;= t.length &lt;= 10 ** 4</code>. This Trie-tree could support <code>0 &lt;= s.length &lt;= 100</code>, which mean it only need 100 node deep. Also, <code>s</code> and <code>t</code> consist only of lowercase English letters. We could possibility reach \\(27^{100}\\) possible node for our t Trie-tree.</p> <p>So, is there a way for this Trie-tree to happened in a limited memory? We have some calculation here</p> <ul> <li>Assuming we have a maximum input with t = repeat(\u201cqwertyuiopasdfghjklzxcvbnm\u201d, \\(\\frac{10^4}{27} = 370\\)) , which make it possible to have all 100 combination of low case English letter</li> <li>I could try bitmask to contain 27 letter in a 32 bit variable. But we still deal with nested 100 times number here, making it 32 ** 100 bit length variable =  4 ** 100 byte length ~ 1.60693804E60 byte</li> <li>So not that much possible route, unless we have \\(10^{36}\\) 1 Yobibyte hard drive </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#but-wait-we-could-use-a-more-friendly-pre-calculated-search-table", "title": "But wait, we could use a more friendly pre-calculated search table", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#white-board", "title": "White board", "text": "<p>On each position, we could have a jump table that point us to the closest position that have corresponded character in t array.</p> <ul> <li>This way, start from t = 1, we can quickly jump to next position without spending much time in traversal.</li> <li>The memory cost is just O(n) or in real number 27 * n memory, which is a possible number.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#implementation-still-with-a-single-s", "title": "Implementation - Still with a single s", "text": "<p><code>O(n)</code></p> <ul> <li>For easy of mind, I use a <code>dict</code> here (as we use python). For other language it better a array using char byte code or some \u201cmap\u201d implementation for lower memory usage.</li> <li>The jumpTable create process can be push out side and only need to be created once. In fact here is the first implementation</li> </ul> <pre><code>class Solution:\ndef isSubsequence(self, s: str, t: str) -&gt; bool:\njumpTable = [0] * (len(t)+1)\njumpTable[len(t)] = {}\nfor index in range(len(t)-1,-1,-1):\nc = t[index]\njumpTable[index] = jumpTable[index+1].copy()\njumpTable[index][c] = index + 1\nindex = 0\nfor c in s:\nif c in jumpTable[index]:\nindex = jumpTable[index][c]\nelse:\nreturn False\nreturn True\n</code></pre> <p>Here is a cached one, this have a O(m * total test case) space and O(m) time complexity. But if we hit cache, this cost us O(n) to process any <code>s</code> string</p> <pre><code>class Solution:\ndef __init__(self):\nself.cache = {}\ndef isSubsequence(self, s: str, t: str) -&gt; bool:\nif t in self.cache:\njumpTable = self.cache[t]\nelse:\njumpTable = [0] * (len(t)+1)\njumpTable[len(t)] = {}\nfor index in range(len(t)-1,-1,-1):\nc = t[index]\njumpTable[index] = jumpTable[index+1].copy()\njumpTable[index][c] = index + 1\nindex = 0\nfor c in s:\nif c in jumpTable[index]:\nindex = jumpTable[index][c]\nelse:\nreturn False\nreturn True\n</code></pre> <p>For the follow up, if we hit cache every time with t, then this is a O(k * n) time complexity  </p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#is-there-a-possible-under-1s-instance-answer-for-the-follow-up", "title": "Is there a possible under 1s instance answer for the follow up", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#sample-take-on-how-big-our-data-is", "title": "Sample take on how big our data is", "text": "<p>I try to recreating the Follow up problem using random in go</p> <ul> <li>The generation it self take for ever ~ 100GB data. Our program take ~ 1_000_000 <code>isSubsequence</code> on a random <code>s</code> with same <code>t</code> already cost us ~ 2s.</li> <li>This mean it at least take 2 * 100 ~ 200s (without any thing about actual time to real all the data from a hard drive (we are cheating using random here, as every thing happen on RAM, which is way better ?? could be not)</li> </ul> <pre><code>package main\nimport (\n\"fmt\"\n\"math/rand\"\n\"sync\"\n\"time\"\n)\ntype Solution struct {\ncache []([27]int)\nmu    sync.Mutex\n}\nfunc NewSolution() *Solution {\nreturn &amp;Solution{\ncache: nil,\n}\n}\nfunc (sol *Solution) isSubsequence(s, t string) bool {\nsol.mu.Lock()\nsol.mu.Unlock()\nif sol.cache == nil {\nprintln(\"Not hit cache\")\nvar jumpTable []([27]int)\njumpTable = make([]([27]int), len(t)+1)\nfor j := 0; j &lt; 27; j++ {\njumpTable[len(t)][j] = -1\n}\nfor i := len(t) - 1; i &gt;= 0; i-- {\nc := t[i]\nfor j := 0; j &lt; 27; j++ {\njumpTable[i][j] = jumpTable[i+1][j]\n}\njumpTable[i][c-'a'] = i                                 }\nsol.cache = jumpTable\n}                                             jumpTable := sol.cache\nidx := 0\nfor i := 0; i &lt; len(s); i++ {\nc := s[i] - 'a'\nif jumpTable[idx][c] != -1 {\nidx = jumpTable[idx][c]\n} else {\nreturn false\n}\n}\nreturn true\n}\nfunc printTime(totaltime time.Duration) {\nfmt.Printf(\"ArrayList test done in: %s\\n\", totaltime)\n}\nfunc main() {\ntlength := rand.Intn(10000)\nk := rand.Intn(100_000_000)\nt := \"\"\nfor i := 0; i &lt; tlength; i++ {\nt += string(rand.Intn(26) + 'a')\n}\nsol := NewSolution()\ntotaltime := time.Duration(0)\nprintTime(totaltime)\nfor test := 0; test &lt; k; test++ {\nslength := rand.Intn(100)\ns := \"\"\nfor i := 0; i &lt; slength; i++ {\ns += string(rand.Intn(26) + 'a')\n}\nstart := time.Now()\nsol.isSubsequence(s, t)\ntotaltime += time.Now().Sub(start)\nif test%1_000_000 == 0 {\nfmt.Print(test, \" \")\nprintTime(totaltime)\n}\n}\n}\n</code></pre> <pre><code>:!go run main.go\nArrayList test done in: 0s\nNot hit cache\n0 ArrayList test done in: 858.952\u00b5s\n1000000 ArrayList test done in: 1.98513232s\n2000000 ArrayList test done in: 3.967193315s\n3000000 ArrayList test done in: 5.744877559s\n4000000 ArrayList test done in: 7.541250613s\n5000000 ArrayList test done in: 9.292042639s\n6000000 ArrayList test done in: 11.054827099s\n7000000 ArrayList test done in: 12.835661416s\n8000000 ArrayList test done in: 14.608895735s\n9000000 ArrayList test done in: 16.384117858s\n10000000 ArrayList test done in: 18.155957301s\n11000000 ArrayList test done in: 19.921745103s\n12000000 ArrayList test done in: 21.688529897s\n13000000 ArrayList test done in: 23.463260279s\n14000000 ArrayList test done in: 25.181089262s\n15000000 ArrayList test done in: 26.945275018s\n16000000 ArrayList test done in: 28.705861143s\n17000000 ArrayList test done in: 30.470886634s\n18000000 ArrayList test done in: 32.240849648s\n19000000 ArrayList test done in: 34.003729898s\n20000000 ArrayList test done in: 35.767147924s\n21000000 ArrayList test done in: 37.525652805s\n22000000 ArrayList test done in: 39.295043816s\n23000000 ArrayList test done in: 41.069771644s\n24000000 ArrayList test done in: 42.827812319s\n25000000 ArrayList test done in: 44.603073036s\n26000000 ArrayList test done in: 46.363041885s\n27000000 ArrayList test done in: 48.130955398s\n28000000 ArrayList test done in: 49.887741317s\n29000000 ArrayList test done in: 51.69819038s\n30000000 ArrayList test done in: 53.627217453s\n31000000 ArrayList test done in: 55.414755583s\n32000000 ArrayList test done in: 57.195232059s\n33000000 ArrayList test done in: 58.982188626s\n34000000 ArrayList test done in: 1m0.743219154s\n35000000 ArrayList test done in: 1m2.662217948s\n36000000 ArrayList test done in: 1m4.53088834s\n37000000 ArrayList test done in: 1m6.302977071s\n38000000 ArrayList test done in: 1m8.034657804s\n39000000 ArrayList test done in: 1m9.859265521s\n...\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#optimizing-1-threadgoroutinemulti-core-distributed-computing", "title": "Optimizing 1 - Thread/Goroutine/Multi-core distributed computing", "text": "<p>I think we isn\u2019t find an possible solution here, but, at least we can make it faster using parallels thread on multi core CPU (I have 8 core in my VM).</p> <ul> <li>We only need to create one jumpTable</li> <li>jumpTable remain unchanged, we only need to read jumpTable in each input <code>s</code></li> <li>This make it possible for multi thread accessing <code>jumpTable</code> as a constant read memory.</li> </ul> <pre><code># To do\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#optimizing-2-ologn-for-finding-s", "title": "Optimizing 2 - O(Log(n)) for finding S", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/392.%20Is%20Subsequence/#optimizing-3-o1-for-finding-s", "title": "Optimizing 3 - O(1) for finding S ???", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/412.%20Fizz%20Buzz/", "title": "412. Fizz Buzz", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/412.%20Fizz%20Buzz/#problem", "title": "Problem", "text": "<p>Given an integer <code>n</code>, return a string array <code>answer</code> (1-indexed) where:</p> <ul> <li><code>answer[i] == \"FizzBuzz\"</code> if <code>i</code> is divisible by <code>3</code> and <code>5</code>.</li> <li><code>answer[i] == \"Fizz\"</code> if <code>i</code> is divisible by <code>3</code>.</li> <li><code>answer[i] == \"Buzz\"</code> if <code>i</code> is divisible by <code>5</code>.</li> <li><code>answer[i] == i</code> (as a string) if none of the above conditions are true.</li> </ul> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 104</code></li> </ul> <p>Example 1:</p> <pre><code>**Input:** n = 3\n**Output:** [\"1\",\"2\",\"Fizz\"]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/412.%20Fizz%20Buzz/#solve", "title": "Solve", "text": "<pre><code>class Solution(object):\ndef fizzBuzz(self, n):\nans = []\nfor i in range(1,n+1):\nif i % 3 == i % 5 == 0:\nans += [\"FizzBuzz\"]\nelif i % 3 == 0:\nans += [\"Fizz\"]\nelif i % 5 == 0:\nans += [\"Buzz\"]\nelse:\nans += [str(i)]\nreturn ans\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/435.%20Non-overlapping%20Intervals/", "title": "435. Non overlapping Intervals", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/435.%20Non-overlapping%20Intervals/#problem", "title": "Problem", "text": "<p>Given an array of intervals <code>intervals</code> where <code>intervals[i] = [starti, endi]</code>, return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= intervals.length &lt;= 105</code></li> <li><code>intervals[i].length == 2</code></li> <li><code>-5 * 104 &lt;= starti &lt; endi &lt;= 5 * 104</code></li> </ul> <p>Example 1: <pre><code>**Input:** intervals = [[1,2],[2,3],[3,4],[1,3|1,2],[2,3],[3,4],[1,3]]\n**Output:** 1\n**Explanation:** [1,3] can be removed and the rest of the intervals are non-overlapping.\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/435.%20Non-overlapping%20Intervals/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/435.%20Non-overlapping%20Intervals/#bottom-up-dynamic-programming", "title": "Bottom-up dynamic programming", "text": "<p>Dynamic problem, which is a lot similar to 2008. Maximum Earnings From Taxi, 1751. Maximum Number of Events That Can Be Attended II, we try to minimize the value of total element you want to remove.</p> <p>This is bottom-up approach, where we focus on solve and building necessary all lower information first :</p> <ul> <li>Sort all intervals by end value, this to ensure when we calculate result of a interval <code>[s_i, e_i]</code>, we can already get the best result from range <code>[...e_i-1]</code>.</li> <li>Try to find the best result <code>cacheResult[i]</code> on each step <code>[s_i, e_i]</code>, either:<ul> <li>Case 1: Remove our current interval, meaning <code>cacheResult[e_i] = cacheResult[e_i-1] +1</code></li> <li>Case 2: Use our current interval, meaning <code>cacheResult[e_i] = cacheResult[s_i-1] + &lt;total_of_interval_between_s_i_and_e_i&gt;</code></li> </ul> </li> <li>To do this, I keeping track of already processed <code>interval</code> in <code>cacheKey</code> array, while <code>cacheResult</code> keeping the best result of our current set interval of <code>cacheKey</code>, adding them key by key.<ul> <li>The expression of above Case 1, and Case 2 replace by calculating using <code>index</code> of current processed interval and <code>key</code> value in  <code>cacheKey</code> array.</li> <li><code>bisect_right</code> here is a perform a literal binary searching on already sorted array <code>cacheKey</code> (by default, as we already sort the <code>intervals</code> by end value), which get the <code>closest</code> index where <code>key[closest-1] &lt;= value &lt; key[closest]</code>. Here I need to check some Off by one error to find the exact equivalence.</li> </ul> </li> </ul> <pre><code>class Solution:\ndef eraseOverlapIntervals(self, intervals: List[List[int]]) -&gt; int:\ndef getEnds(interval):\nreturn interval[1]\nintervals.sort(key = getEnds)\ncacheResult = []\ncacheKey = []\nfor i, (s, e) in enumerate(intervals):\ncacheKey.append(e)\nif i == 0:\ncacheResult[0] = 0\ncontinue\nclosest = bisect_right(cacheKey, s) - 1\ncacheResult.append(cacheResult[i-1] + 1)\nif closest &gt;= 0:\ncacheResult[i] = min(cacheResult[i], cacheResult[closest] + i - closest -1)\nreturn cacheResult[len(intervals) -1]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/435.%20Non-overlapping%20Intervals/#greedy", "title": "Greedy", "text": "<p>There isn\u2019t a need of caching the result, as all value with the interval with start <code>s_i</code> come before last end <code>e_(i-1)</code> is an overlap and need to be remove. These isn\u2019t any better case at all. So we can remove them, directly increase our result by  <code>1</code></p> <ul> <li>Still sort every intervals by end value</li> <li>If start <code>s_i</code> overlap last <code>[...last_end]</code>, consider we remove this interval, <code>ans = ans + 1</code>, <code>last_end</code> is un-change as we not adding this interval in to result.  </li> <li>If start <code>s_i</code> not overlap, consider adding this current interval into our result and update the <code>last_end</code> value</li> </ul> <p>Here is provided Answer from Leetcode <pre><code>class Solution:\ndef eraseOverlapIntervals(self, intervals: List[List[int]]) -&gt; int:\nintervals.sort(key = lambda x: x[1])\nans = 0\nk = -inf\nfor x, y in intervals:\nif x &gt;= k:\n# Case 1\nk = y\nelse:\n# Case 2\nans += 1\nreturn ans\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/445.%20Add%20Two%20Numbers%20II/", "title": "445. Add Two Numbers II", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/445.%20Add%20Two%20Numbers%20II/#problem", "title": "Problem", "text": "<p>You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p> <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p> <p>Constraints:</p> <ul> <li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li>It is guaranteed that the list represents a number that does not have leading zeros.</li> </ul> <p>Follow up: Could you solve it without reversing the input lists?</p> <p>Example 1:</p> <p></p> <pre><code>**Input:** l1 = [7,2,4,3], l2 = [5,6,4]\n**Output:** [7,8,0,7]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/445.%20Add%20Two%20Numbers%20II/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/445.%20Add%20Two%20Numbers%20II/#remove-link-list", "title": "Remove link-list", "text": "<p>Quick and fast solution is removing list link, as python handle the big integer by default (standard library) and way faster than loop through the linked list</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/445.%20Add%20Two%20Numbers%20II/#definition-for-singly-linked-list-class-listnode-def-__init__self-val0-nextnone-selfval-val-selfnext-next-class-solution-def-addtwonumbersself-l1-optionallistnode-l2-optionallistnode-optionallistnode-n-0-p-l1-while-p-n-10-n-pval-p-pnext-m-0-q-l2-while-q-m-10-m-qval-q-qnext-result-n-m-if-result-0-return-listnode0-head-none-while-result-0-head-listnoderesult10-head-result-10-return-head", "title": "<pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -&gt; Optional[ListNode]:\n        n = 0\n        p = l1\n        while p:\n            n *= 10\n            n += p.val\n            p = p.next\n        m = 0\n\n        q = l2\n        while q:\n            m *= 10\n            m += q.val\n            q = q.next\n\n        result = n + m\n        if result == 0:\n            return ListNode(0)\n\n        head = None\n        while result &gt; 0:\n            head = ListNode(result%10, head)\n            result //= 10\n        return head\n</code></pre>", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/445.%20Add%20Two%20Numbers%20II/#forcing-to-use-the-linked-list", "title": "Forcing to use the linked list?", "text": "<p>While there is no reason to do so (in Python). We can still do it for some challenge, using linked list as a big number handling. </p> <p>Still, the provided input isn\u2019t the best way to implement big number, here should be an ideal one: <pre><code>class BigNumber:\ndef __init__(self):\nself.head = None\nself.end = None\ndef toListNode(self):\nresult = ListNode()\np = self \nwhile p:\nresult = ListNode(p.val, result)\np = p.next\nreturn self.end\ndef add_number(self, val):\nif self.head is None:\nself.head = self.end = ListNode(val)\nreturn\nself.end.next = ListNode(val)\nself.end = self.end.next\ndef add(self, otherBigNumber):\nresult = BigNumber()\np, q = self.end, otherBigNumber.end\ncarry = 0\nwhile p or q:\nval_1, val_2 = 0, 0\nif p:\nval_1 = p.val\np = p.next\nif q:\nval_2 = q.val\nq = q.next\nresult.add_number((val_1 + val_2 + carry) % 10)\ncarry = (val_1 + val_2 + carry) // 10\nif carry:\nresult.add_number(carry)\n</code></pre></p> <p>Class <code>BigNumber</code> is the implementation for O(1) insert, O(n) adding time complexity, where: </p> <ul> <li>The number representation in revert order: Number <code>123459</code> will be storing as <code>9 -&gt; 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1</code> . Which helping <code>add</code> function which also done in revert order.</li> <li>To change the input to our crafted class, I create a <code>Helper</code> function to revert the order of Linked List <code>ListNode</code> and return correspond <code>BigNumber</code> </li> </ul> <p>Here is final implementation <pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass BigNumber:\ndef __init__(self):\nself.head = None\nself.end = None\ndef add_number(self, val):\nif self.head is None:\nself.head = self.end = ListNode(val)\nreturn\nself.end.next = ListNode(val)\nself.end = self.end.next\ndef toListNode(self):\nresult = None\np = self.head\nwhile p:\nresult = ListNode(p.val, result)\np = p.next\nreturn result\ndef add(self, otherBigNumber):\nresult = BigNumber()\np, q = self.head, otherBigNumber.head\ncarry = 0\nwhile p or q:\nval_1, val_2 = 0, 0\nif p:\nval_1 = p.val\np = p.next\nif q:\nval_2 = q.val\nq = q.next\nresult.add_number((val_1 + val_2 + carry) % 10)\ncarry = (val_1 + val_2 + carry) // 10\nif carry:\nresult.add_number(carry)\nreturn result\nclass Solution:\ndef addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -&gt; Optional[ListNode]:\ndef helper(p):\nresult = None\nif p is None:\nresult = BigNumber()\nelse:\nresult = helper(p.next)\nresult.add_number(p.val)\nreturn result\nreturn helper(l1).add(helper(l2)).toListNode()\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/445.%20Add%20Two%20Numbers%20II/#comparing", "title": "Comparing", "text": "<p>Just don\u2019t. It a basic to handle number operation in most of non support language. Most of the time you will want to use close to minimalism library or OS/Hardware standard (example https://gmplib.org/).</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/456.%20132%20Pattern/", "title": "456. 132 Pattern", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/456.%20132%20Pattern/#problem", "title": "Problem", "text": "<p>Given an array of <code>n</code> integers <code>nums</code>, a 132 pattern is a subsequence of three integers <code>nums[i]</code>, <code>nums[j]</code> and <code>nums[k]</code> such that <code>i &lt; j &lt; k</code> and <code>nums[i] &lt; nums[k] &lt; nums[j]</code>.</p> <p>Return <code>true</code> if there is a 132 pattern in <code>nums</code>, otherwise, return <code>false</code>.</p> <p>Example 1:</p> <p>Input: nums = [1,2,3,4] Output: false Explanation: There is no 132 pattern in the sequence.</p> <p>Example 2:</p> <p>Input: nums = [3,1,4,2] Output: true Explanation: There is a 132 pattern in the sequence: [1, 4, 2].</p> <p>Example 3:</p> <p>Input: nums = [-1,3,2,0] Output: true Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].</p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 10**5</code></li> <li><code>-10**9 &lt;= nums[i] &lt;= 10**9</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/456.%20132%20Pattern/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/456.%20132%20Pattern/#normal-keep-go-forward", "title": "Normal - Keep go forward", "text": "<p>We keep track of found range, and try to find n that in the middle</p> <ul> <li>To make the code faster, we can merge found range with each other</li> <li>A better data structure can be use like Binary Search Tree (?), but it quite hard to do so. Here I just done a minimal merge</li> </ul> <pre><code>class Solution:\ndef find132pattern(self, nums: List[int]) -&gt; bool:\nvector = []\ndef combine(vector):\nmin1, max1 = vector[0]\nmin2, max2 = vector[-1]\nwhile min2 &lt; min1 &lt;= max1 &lt;= max2:\nvector.pop(0)\nmin1, max1 = vector[0]\nreturn vector\nmin1 = max1 = None\nfor n in nums:\nif min1 is not None and min1 &lt; n &lt; max1:\nreturn True\nif len(vector) &gt; 0:\nvector = combine(vector)\nfor min2, max2 in vector:\nif min2 &lt; n &lt; max2:\nreturn True\nif min1 is None:\nmin1 = n\nmax1 = n\ncontinue\nif n &gt;= max1:\nmax1 = n\ncontinue\nvector.append((min1, max1))\nmin1 = max1 = n\nif min1 is not None:\nvector.append((min1, max1))\n# print(vector)\nreturn False\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/456.%20132%20Pattern/#sane-backward", "title": "Sane - Backward", "text": "<p>We going from backward, so the problem become find a minimum value in the 132 Pattern</p> <ul> <li>We want to keep track of possible min, current min and current max.</li> <li>If we found any number lower than current min then we found 132 pattern</li> <li>If we found a better current max, we update min in possible min to the best possible min value.</li> </ul> <p>The possible min can be stored using a queue, which strictly increasing</p> <pre><code>class Solution:\ndef find132pattern(self, nums: List[int]) -&gt; bool:\nstack, third = [], float('-inf')\nfor num in reversed(nums):\nif num &lt; third:\nreturn True\nwhile stack and stack[-1] &lt; num:\nthird = stack.pop()\nstack.append(num)\nreturn False\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/459.%20Repeated%20Substring%20Pattern/", "title": "459. Repeated Substring Pattern", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "rust"]}, {"location": "notes/Leetcode%20100-1000/459.%20Repeated%20Substring%20Pattern/#problem", "title": "Problem", "text": "<p>Given a string <code>s</code>, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.</p> <p>Example 1:</p> <p>Input: s = \u201cabab\u201d Output: true Explanation: It is the substring \u201cab\u201d twice.</p> <p>Example 2:</p> <p>Input: s = \u201caba\u201d Output: false</p> <p>Example 3:</p> <p>Input: s = \u201cabcabcabcabc\u201d Output: true Explanation: It is the substring \u201cabc\u201d four times or the substring \u201cabcabc\u201d twice.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10**4</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "rust"]}, {"location": "notes/Leetcode%20100-1000/459.%20Repeated%20Substring%20Pattern/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "rust"]}, {"location": "notes/Leetcode%20100-1000/459.%20Repeated%20Substring%20Pattern/#brute-force", "title": "Brute force", "text": "<p><code>python</code></p> <p>The easiest way to do any problem, is that we check all possible solution, we already have a conclusion that from the problem given </p> <p>we can create <code>s</code> by appending multiple copies of <code>sub</code> substring of <code>s</code></p> <p>Which mean, <code>len(s) % len(sub) == 0</code></p> <p>After that, we just check one by one if our <code>sub</code> string is on repeat or not by split <code>s</code> into multiple substring with length equal to the length of <code>sub</code> string.</p> <p>While this generally a bad way to solve this question, but in python:</p> <ul> <li>String comparing always a hash compare, which cost less than a full string comparing one by one character</li> <li>We doing way less than <code>10**4</code> on the first loop, as we have to enforce <code>len(s) % len(sub) == 0</code> before doing the second loop</li> </ul> Time Submitted Status Runtime Memory Language 08/21/2023 16:58 Accepted 69 ms 16.3 MB python3 <pre><code>class Solution:\ndef repeatedSubstringPattern(self, s: str) -&gt; bool:\nn = len(s)\nfor i in range(1, n):\nif n % i != 0:\ncontinue\nsub = s[:i]\nres = True\nfor step in range(n//i):\nif sub != s[step*i: (step+1) * i]:\nres = False\nbreak\nif res:\nreturn True\nreturn False\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "rust"]}, {"location": "notes/Leetcode%20100-1000/459.%20Repeated%20Substring%20Pattern/#rust-brute-force", "title": "Rust brute force", "text": "<p><code>rust</code></p> <p>While thinking about it, I too, checking how rust implement the string comparing. As there isn\u2019t much different when I try to implement the same code line by line in rust</p> Time Submitted Status Runtime Memory Language 08/21/2023 17:15 Accepted 0 ms 2.2 MB rust <pre><code>struct Solution;\nimpl Solution {\npub fn repeated_substring_pattern(s: String) -&gt; bool {\nlet n = s.len();\nfor i in 1..n {\nif n % i != 0 {\ncontinue;\n}\nlet sub = &amp;s[..i];\nlet mut res = true;\nfor step in 0..(n / i) {\nif sub != &amp;s[step * i..(step + 1) * i] {\nres = false;\nbreak;\n}\n}\nif res {\nreturn true;\n}\n}\nfalse\n}\n}\nfn main() {\nlet s = String::from(\"abbabb\");\nlet result = Solution::repeated_substring_pattern(s);\nprintln!(\"Result: {}\", result);\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "rust"]}, {"location": "notes/Leetcode%20100-1000/518.%20Coin%20Change%20II/", "title": "518. Coin Change II", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "java", "c", "python", "rust", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/518.%20Coin%20Change%20II/#problem", "title": "Problem", "text": "<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p> <p>Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>0</code>.</p> <p>You may assume that you have an infinite number of each kind of coin.</p> <p>The answer is guaranteed to fit into a signed 32-bit integer.</p> <p>Example 1:</p> <p>Input: amount = 5, coins = [1,2,5] Output: 4 Explanation: there are four ways to make up the amount: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1</p> <p>Example 2:</p> <p>Input: amount = 3, coins = [2] Output: 0 Explanation: the amount of 3 cannot be made up just with coins of 2.</p> <p>Example 3:</p> <p>Input: amount = 10, coins = [10] Output: 1</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= coins.length &lt;= 300</code></li> <li><code>1 &lt;= coins[i] &lt;= 5000</code></li> <li>All the values of <code>coins</code> are unique.</li> <li><code>0 &lt;= amount &lt;= 5000</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "java", "c", "python", "rust", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/518.%20Coin%20Change%20II/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "java", "c", "python", "rust", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/518.%20Coin%20Change%20II/#dynamic-programming", "title": "Dynamic programming", "text": "<p><code>O(n ** 2)</code></p> <p>The ideal start with a update function: <pre><code>stage_a + coin_value -&gt; stage_b = stage_&lt;a+ coin_value&gt;\n</code></pre></p> <p>Which lead to: <pre><code>total_way_of_stage_b = total_way_of_stage_a (with coin_value) + &lt;other_way&gt;\n</code></pre></p> <p>With every coins, we loop and adding up the total way to reach each amount. <pre><code>class Solution {\npublic int change(int amount, int[] coins) {\nint[] count = new int[amount + 1];\ncount[0] = 1;\nfor (int i : coins) {\nfor (int c = i; c &lt;= amount; c++) {\ncount[c] += count[c-i];\n}\n}\nreturn count[amount];\n}\n}\n</code></pre></p> <p>The for loop order have an impact on how the Calculation run:</p> <p>If you instead doing this: <pre><code>for (int c = 0; c &lt;= amount; c++) {\nfor (int i : coins) {\nif (c-i &gt; 0) count[c] += count[c-i];\n}\n}\n</code></pre></p> <ul> <li>We have total of way adding coin (that count with all possible different position <code>1 2 1 != 1 1 2</code>) to reach that amount</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "java", "c", "python", "rust", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/518.%20Coin%20Change%20II/#comparing", "title": "Comparing", "text": "<p>I also try some more language to help me familiar with other language array too, it quite surprise to see rust and java beat c in runtime.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "java", "c", "python", "rust", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/518.%20Coin%20Change%20II/#java", "title": "<code>java</code>:", "text": "<p>We have <code>int</code> array automate initiation as 0</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "java", "c", "python", "rust", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/518.%20Coin%20Change%20II/#c", "title": "<code>c</code>:", "text": "<p>It keep yelling me about how I can\u2019t using <code>int count[amount+1] = {0}</code>; This just mean I have to use a hard code value to use this feature of the language. <pre><code>#define MAX_AMOUNT 5001\nint count[MAX_AMOUNT] = {0};\n</code></pre></p> <p>To initiation use a variable size, we instead use <code>memset</code>. Also, C not have <code>for each</code> built-in the language syntax, so I use a normal iterator loop <pre><code>int change(int amount, int* coins, int coinsSize){\nint count[amount + 1];\nmemset(count, 0, sizeof(count));  count[0] = 1;\nfor (int i = 0; i &lt; coinsSize; i++) {\nfor (int c = coins[i]; c &lt;= amount; c++) {\ncount[c] += count[c-coins[i]];\n}\n}\nreturn count[amount];\n}\n</code></pre></p> <p>For an un-know reason, but it c quite slow some time when I try to submit result.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "java", "c", "python", "rust", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/518.%20Coin%20Change%20II/#python", "title": "<code>python</code>:", "text": "<p>I can\u2019t seem to know better way to initiation a array in python. Also, I use python to make my first implementation, planning process.</p> <pre><code>class Solution:\ndef change(self, amount: int, coins: List[int]) -&gt; int:\ncount = [0] * (amount + 1)\ncount[0] = 1\nfor i in coins:\nfor c in range(amount+1):\nif c-i &lt; 0:\ncontinue\ncount[c] += count[c-i]\nreturn count[amount]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "java", "c", "python", "rust", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/518.%20Coin%20Change%20II/#rust", "title": "<code>rust</code>:", "text": "<p>While rust have some more similar way to create array like <code>c</code>, it require the variable to be constant example.  <pre><code>const MAX_AMOUNT: usize = 5000;\nlet mut count = [0; MAX_AMOUNT];\n</code></pre></p> <ul> <li>To create and allocation array, using dynamic size variable, we have to use <code>vec!</code> </li> </ul> <pre><code>impl Solution {\npub fn change(amount: i32, coins: Vec&lt;i32&gt;) -&gt; i32 {\nlet mut count = vec![0; (amount + 1) as usize];\ncount[0] = 1;\nfor coin in coins {\nfor c in coin..=amount {\ncount[c as usize] += count[(c - coin) as usize];\n}\n}\ncount[amount as usize]\n}\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "java", "c", "python", "rust", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/518.%20Coin%20Change%20II/#time-and-memory-for-comparation", "title": "Time and memory for comparation:", "text": "Time Submitted Status Runtime Memory Language 08/11/2023 17:30 Accepted 3 ms 5.6 MB c 08/11/2023 15:39 Accepted 2 ms 2.1 MB rust 08/11/2023 15:17 Accepted 2 ms 40.1 MB java 08/11/2023 15:09 Accepted 5 ms 5.7 MB c 08/11/2023 09:49 Accepted 194 ms 16.6 MB python3", "tags": ["leetcode", "computer_sience", "coding_chalenge", "java", "c", "python", "rust", "O(n ** 2)"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/", "title": "530. Minimum Absolute Difference in BST", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#problem", "title": "Problem", "text": "<p>Given the <code>root</code> of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.</p> <p>Example 1:</p> <p></p> <p>Input: root = [4,2,6,1,3] Output: 1</p> <p>Example 2:</p> <p></p> <p>Input: root = [1,0,48,null,null,12,49] Output: 1</p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 104]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 105</code></li> </ul> <p>Note: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#solution", "title": "Solution", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#my-sane-approach", "title": "My sane approach", "text": "<p>BTS is a searching Tree, and it cost O(log n) time to find any target value I using a try and error, where with each node, I make an assumption that:</p> <ul> <li><code>root</code> node is one of the two different nodes that we need to find to <code>getMinimumDifference</code></li> <li>To get the minimum different node pair knowing <code>(root, &lt;unknow&gt;)</code> , </li> <li>I will loop trough every node in the tree, find  <pre><code>class Solution: \ndef getLargest(self, root):\np = root\nwhile p.right:\np = p.right\nreturn p\ndef getSmallest(self, root):\np = root\nwhile p.left:\np = p.left\nreturn p\ndef getValueDiff(self, x, y):\nreturn abs(x.val - y.val)\ndef getMin(self, array):\nminValue = None\nfor val in array:\nif val == None:\ncontinue    \nif minValue == None:\nminValue = val\nif minValue &gt; val:\nminValue = val\nreturn minValue\ndef getMinimumDifference(self, root: Optional[TreeNode]) -&gt; int:\nminDiff = None\np = root\nif p.left:\nminLeftDiff = self.getValueDiff(p, self.getLargest(p.left))\nminLeftChild = self.getMinimumDifference(p.left)\nminDiff = self.getMin([minDiff, minLeftDiff, minLeftChild])\nif p.right:\nminRightDiff = self.getValueDiff(p, self.getSmallest(p.right))\nminRightChild = self.getMinimumDifference(p.right)\nminDiff = self.getMin([minDiff, minRightDiff, minRightChild])\nreturn minDiff \n</code></pre></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#overview", "title": "Overview", "text": "<p>Given the <code>root</code> of a Binary Search Tree (BST).</p> <p>Our task is to return the minimum absolute difference between the values of any two different nodes in the tree.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#approach-1-depth-first-search", "title": "Approach 1: Depth First Search", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#intuition", "title": "Intuition", "text": "<p>Let\u2019s try to solve a simpler problem first. Given a sorted array of integers, find the minimum difference between any two integers in the array. To solve this problem, we don\u2019t need to check every pair of integers. Instead, checking the difference between every two consecutive integers would work. This is because the array is sorted. We will make use of this to solve our original problem.</p> <p>In the original problem, we have some integer values (i.e. node values), and we need to find the minimum difference between any two values. Thus, the original problem is similar to the problem we discussed above if we keep those values in the sorted order.</p> <p>To get all the node values we can use a graph traversal algorithm like depth-first search (DFS).</p> <p>In DFS, we use a recursive function to explore nodes as far as possible along each branch. Upon reaching the end of a branch, we backtrack to the next branch and continue exploring.</p> <p>Once we encounter an unvisited node, we will take one of its neighbor nodes (if exists) as the next node on this branch. Recursively call the function to take the next node as the \u2018starting node\u2019 and solve the subproblem.</p> <p>If you are new to Depth First Search, please see our Leetcode Explore Card for more information on it!</p> <p>After gathering all of the node values into a list of integers, we sort the list and compare the difference between every two consecutive integers to determine the minimum difference between the values.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#algorithm", "title": "Algorithm", "text": "<ol> <li>Create a list of integers <code>nodeValues</code> to store the node values.</li> <li>Perform the DFS traversal over the given binary search tree. We call <code>dfs(root)</code> where <code>dfs</code> is a recursive method that takes <code>TreeNode node</code> as a parameter. We perform the following in this method:<ul> <li>If <code>node</code> is <code>null</code>, return.</li> <li>Add the current node\u2019s value, <code>node.val</code>, in the <code>nodeValues</code> list.</li> <li>Recursively perform DFS from <code>node.left</code>.</li> <li>Recursively perform DFS from <code>node.right</code>.</li> </ul> </li> <li>Sort the <code>nodeValues</code> list.</li> <li>Create an integer variable <code>minDifference</code> and initialize it to infinity.</li> <li>Iterate over <code>inorderNodes</code> starting from index <code>1</code>, and for each element at index <code>i</code>, find the difference with the element at index <code>i - 1</code> and update the variable <code>minDifference</code> accordingly.</li> <li>Return <code>minDifference</code>.</li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#implementation", "title": "Implementation", "text": "<pre><code>class Solution:\ndef getMinimumDifference(self, root: Optional[TreeNode]) -&gt; int:\nnodeValues = []\ndef dfs(node):\nif node is None:\nreturn\nnodeValues.append(node.val)\ndfs(node.left)\ndfs(node.right)\ndfs(root)\nnodeValues.sort()\nminDifference = 1e9\nfor i in range(1, len(nodeValues)):\nminDifference = min(minDifference, nodeValues[i] - nodeValues[i-1])\nreturn minDifference\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#complexity-analysis", "title": "Complexity Analysis", "text": "<p>Here, \ufffdn is the number of nodes in the given binary search tree.</p> <ul> <li> <p>Time complexity: O(n\u22c5logn)</p> <ul> <li>We traverse once over each node of the BST using DFS traversal which takes O(n) time.</li> <li>We take O(n\u22c5logn) time to sort a list of n elements.</li> <li>We iterate over the list of size n elements to find the minimum difference which also takes O(n) time.</li> <li> <p>Space complexity: O(n)</p> </li> <li> <p>The DFS traversal is recursive and would take some space to store the stack calls. The maximum number of active stack calls at a time would be the tree\u2019s height, which in the worst case would be O(n) when the tree is a straight line.</p> </li> <li>We also need a list of size O(n) to store the values of all the nodes.</li> </ul> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#approach-2-in-order-traversal-using-list", "title": "Approach 2: In-order Traversal Using List", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#intuition_1", "title": "Intuition", "text": "<p>In the previous approach, we found all the values and then sorted them. This would work for any binary tree. However, we are given a binary search tree, which we didn\u2019t take advantage of. A unique property of a binary search tree is that an inorder traversal handles the nodes in sorted order. This allows us to skip the sorting at the end.</p> <p>The in-order traversal works by visiting the left subtree of a node first, then handling the node itself and finally visiting the right subtree. Since all the nodes in the left subtree are lesser than the current node\u2019s value and all nodes in the right subtree are greater than the current node\u2019s value, it generates a sorted list of values.</p> <p>Here\u2019s a visual representation of how inorder traversal works in a BST:</p> <p></p> <p>As you can see, we continue to move towards the left node until we no longer can, then handle the current node and repeat the process with the right node as the new starting node.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#algorithm_1", "title": "Algorithm", "text": "<ol> <li>Create a list of integers <code>inorderNodes</code> to store the node values.</li> <li>Perform the inorder traversal of the binary search tree (BST). Call <code>inorderTraversal(root)</code> where <code>inorderTraversal</code> is a recursive method that takes <code>TreeNode node</code> as a parameter. We perform the following in this method:<ul> <li>If <code>node</code> is <code>null</code>, return.</li> <li>Recursively perform the in-order traversal for <code>node.left</code>.</li> <li>Add the current node\u2019s value, <code>node.val</code>, in the <code>inorderNodes</code> list.</li> <li>Recursively perform the in-order traversal for <code>node.right</code>.</li> </ul> </li> <li>Create an integer variable <code>minDifference</code> and initialize it to infinity.</li> <li>Iterate over <code>inorderNodes</code> starting from index <code>1</code>, and for each element at index <code>i</code>, find the difference with the element at index <code>i - 1</code> and update the variable <code>minDifference</code> accordingly.</li> <li>Return <code>minDifference</code>.</li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#implementation_1", "title": "Implementation", "text": "<pre><code>class Solution:\ndef getMinimumDifference(self, root: Optional[TreeNode]) -&gt; int:\ninorderNodes = []\ndef inorder(node):\nif node is None:\nreturn\ninorder(node.left)\ninorderNodes.append(node.val)\ninorder(node.right)\ninorder(root)\nminDifference = 1e9\nfor i in range(1, len(inorderNodes)):\nminDifference = min(minDifference, inorderNodes[i] - inorderNodes[i-1])\nreturn minDifference\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#complexity-analysis_1", "title": "Complexity Analysis", "text": "<p>Here, n is the number of nodes in the given binary search tree.</p> <ul> <li> <p>Time complexity: O(n)</p> <ul> <li>We traverse once over each node of the BST using in-order traversal which takes O(n) time.</li> <li>We iterate over the list of size n elements to find the minimum difference which also takes O(n) time.</li> <li> <p>Space complexity: O(n)</p> </li> <li> <p>The in-order traversal is recursive and would take some space to store the stack calls. The maximum number of active stack calls at a time would be the tree\u2019s height, which in the worst case would be O(n) when the tree is a straight line.</p> </li> <li>We also need a list of size O(n) to store the values of all the nodes.</li> </ul> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#approach-3-in-order-traversal-without-list", "title": "Approach 3: In-order Traversal Without List", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#intuition_2", "title": "Intuition", "text": "<p>As we can notice in the previous approach, we only need the immediate in-order predecessor of any node to calculate the minimum difference. The rest of the nodes will not be needed and are stored unnecessarily in the list.</p> <p>Thus, we can avoid storing elements in a list if we can find the difference between consecutive nodes on the fly during in-order traversal. For each node in the tree, we need the previous node we have handled, and then we can find the difference. This can be done using another variable <code>prevNode</code> that will store the value of the node we handled previously in the in-order traversal. This way, we don\u2019t have to store the elements in an array and at the same time, don\u2019t have to re-iterate over the nodes again.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#algorithm_2", "title": "Algorithm", "text": "<ol> <li>Create an answer variable <code>minDifference</code> and initialize it to infinity.</li> <li>Create a <code>TreeNode</code> variable <code>prevNode</code> to keep track of the previous node we have traversed. Initialize it to <code>null</code>.</li> <li>Perform the inorder traversal of the binary search tree (BST). Call <code>inorderTraversal(root)</code> where <code>inorderTraversal</code> is a recursive method that takes <code>TreeNode node</code> as a parameter. We perform the following in this method:<ul> <li>If <code>node</code> is <code>null</code>, return.</li> <li>Recursively perform the in-order traversal for <code>node.left</code>.</li> <li>We handle <code>node</code> now. We check its difference with the previously visited node <code>prevNode</code>. If <code>prevNode != null</code>, it means we have visited a node previously and hence, we try to update <code>minDifference</code> using <code>minDifference = min(minDifference, node.val - prevNode.val)</code>.</li> <li>Recursively perform the in-order traversal for <code>node.right</code>.</li> </ul> </li> <li>Return <code>minDifference</code>.</li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#implementation_2", "title": "Implementation", "text": "<pre><code>class Solution:\ndef getMinimumDifference(self, root: Optional[TreeNode]) -&gt; int:\nself.minDistance = 1e9\n# Initially, it will be null.\nself.prevNode = None\ndef inorder(node):\nif node is None:\nreturn\ninorder(node.left)\n# Find the difference with the previous value if it is there.\nif self.prevNode is not None:\nself.minDistance = min(self.minDistance, node.val - self.prevNode)\nself.prevNode = node.val\ninorder(node.right)\ninorder(root)\nreturn self.minDistance\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/530.%20Minimum%20Absolute%20Difference%20in%20BST/#complexity-analysis_2", "title": "Complexity Analysis", "text": "<p>Here, n is the number of nodes in the given binary search tree.</p> <ul> <li> <p>Time complexity: O(n)</p> <ul> <li>We traverse once over each node of the BST using in-order traversal which takes O(n) time.</li> <li> <p>Space complexity: O(n)</p> </li> <li> <p>The in-order traversal is recursive and would take some space to store the stack calls. The maximum number of active stack calls at a time would be the tree\u2019s height, which in the worst case would be O(n) when the tree is a straight line.</p> </li> <li>Note that this space complexity is only for the worst-case scenario, and in the average case we have greatly improved our space complexity since we don\u2019t need to create a list to store all the nodes.</li> </ul> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/542.%2001%20Matrix/", "title": "542. 01 Matrix", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "BFS", "python"]}, {"location": "notes/Leetcode%20100-1000/542.%2001%20Matrix/#problem", "title": "Problem", "text": "<p>Given an <code>m x n</code> binary matrix <code>mat</code>, return the distance of the nearest <code>0</code> for each cell.</p> <p>The distance between two adjacent cells is <code>1</code>.</p> <p>Example 1:</p> <p></p> <p>Input: <code>mat = [[0,0,0],[0,1,0],[0,0,0|0,0,0],[0,1,0],[0,0,0]]</code> Output: <code>[[0,0,0],[0,1,0],[0,0,0|0,0,0],[0,1,0],[0,0,0]]</code></p> <p>Example 2:</p> <p></p> <p>Input: <code>mat = [[0,0,0],[0,1,0],[1,1,1|0,0,0],[0,1,0],[1,1,1]]</code> Output: <code>[[0,0,0],[0,1,0],[1,2,1|0,0,0],[0,1,0],[1,2,1]]</code></p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10**4</code></li> <li><code>1 &lt;= m * n &lt;= 10**4</code></li> <li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li> <li>There is at least one <code>0</code> in <code>mat</code>.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "BFS", "python"]}, {"location": "notes/Leetcode%20100-1000/542.%2001%20Matrix/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "BFS", "python"]}, {"location": "notes/Leetcode%20100-1000/542.%2001%20Matrix/#bfs-on-matrix", "title": "BFS on matrix", "text": "<p><code>python</code></p> <p>We consider the matrix as a graph, where a cell of the matrix is <code>&lt;node&gt;</code> in graph</p> <p>There are a lot of graph problem like this on matrix (or any other form), my general approach is build a helper <code>getAdj(&lt;node&gt;)</code> function that return all adj-nodes of current node <code>(x, y)</code>.</p> <p>We then adding all the cell <code>&lt;node&gt; = (x,y)</code> that have value <code>mat[x][y] == 0</code> to our queue <code>queue</code>, adding <code>step = 0</code> to each and start BFS from there.</p> <p>Still, In bellow implementation when adding the first loop, I also process to have BFS <code>queue</code> start at step <code>1</code>, all the result is store in <code>cache</code> matrix array (where <code>mat[x][y] == 0</code> =&gt; <code>cache[x][y] == 0</code>)</p> Time Submitted Status Runtime Memory Language 08/17/2023 21:29 Accepted 630 ms 20.2 MB python3 <pre><code>class Solution:\ndef getAdj(x, y, m,n):\nt = [(x-1, y), (x, y - 1), (x+1, y) , (x, y + 1)]\nres = []\nfor i, j in t:\nif 0 &lt;= i &lt; m and 0 &lt;= j &lt; n:\nres.append((i,j))\nreturn res\ndef updateMatrix(self, mat: List[List[int]]) -&gt; List[List[int]]:\nm = len(mat)\nn = len(mat[0])\ncache = [[-1] * n for _ in range(m)]\nqueue = []\nvisited = [[False] * n for _ in range(m)]\nfor i in range(m):\nfor j in range(n):\nif mat[i][j] != 0:\ncontinue\ncache[i][j] = 0\nvisited[i][j] = True\nadj = Solution.getAdj(i,j, m,n)\nfor ai, aj in adj:\nif mat[ai][aj] != 0 and not visited[ai][aj]:\nqueue.append((ai, aj, 1))\nvisited[ai][aj] = True\nwhile len(queue) &gt; 0:\ni, j, step = queue.pop(0)\ncache[i][j] = step\nadj = Solution.getAdj(i,j, m,n)\nfor ai, aj in adj:\nif not visited[ai][aj]:\nqueue.append((ai, aj, step + 1))\nvisited[ai][aj] = True\nreturn cache\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "BFS", "python"]}, {"location": "notes/Leetcode%20100-1000/688.%20Knight%20Probability%20in%20Chessboard/", "title": "688. Knight Probability in Chessboard", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/688.%20Knight%20Probability%20in%20Chessboard/#problem", "title": "Problem", "text": "<p>On an <code>n x n</code> chessboard, a knight starts at the cell <code>(row, column)</code> and attempts to make exactly <code>k</code> moves. The rows and columns are 0-indexed, so the top-left cell is <code>(0, 0)</code>, and the bottom-right cell is <code>(n - 1, n - 1)</code>.</p> <p>A chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.</p> <p></p> <p>Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.</p> <p>The knight continues moving until it has made exactly <code>k</code> moves or has moved off the chessboard.</p> <p>Return the probability that the knight remains on the board after it has stopped moving.</p> <p>Example 1:</p> <p>Input: n = 3, k = 2, row = 0, column = 0 Output: 0.06250 Explanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board. From each of those positions, there are also two moves that will keep the knight on the board. The total probability the knight stays on the board is 0.0625.</p> <p>Example 2:</p> <p>Input: n = 1, k = 0, row = 0, column = 0 Output: 1.00000</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 25</code></li> <li><code>0 &lt;= k &lt;= 100</code></li> <li><code>0 &lt;= row, column &lt;= n - 1</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/688.%20Knight%20Probability%20in%20Chessboard/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/688.%20Knight%20Probability%20in%20Chessboard/#simulation", "title": "Simulation", "text": "<p>Based on the problem description, we are trying to find the probability that a knight remains on the chessboard after making exactly <code>k</code> moves, starting from a given cell <code>(row, column)</code> on an <code>n x n</code> chessboard. The knight has eight possible moves it can make, as illustrated in the image provided in the problem.</p> <p>To solve this problem, we can use a simulation approach to calculate the probability. We can implement a recursive function <code>move</code> that simulates the knight\u2019s movement. At each step, the knight chooses one of the eight possible moves uniformly at random, and then recursively makes the next move until <code>k</code> moves are reached.</p> <p>To improve efficiency, we can use memorization to store the results of subproblems in a <code>cache</code> dictionary. This way, we can avoid redundant calculations and speed up the computation.</p> <p>Here\u2019s how the simulation-based approach works:</p> <p>The <code>knightProbability</code> function initializes the memorization cache and calls <code>move</code> with the starting position and zero steps taken so far.</p> <ol> <li> <p>Define a function <code>isValid</code> to check if a given position <code>(x, y)</code> is within the chessboard bounds.</p> </li> <li> <p>Implement the recursive function <code>move</code> that calculates the probability of the knight staying on the board after <code>k</code> moves starting from position <code>(x, y)</code>.</p> </li> <li> <p>In the <code>move</code> function, check if <code>k</code> moves have been reached; if yes, return 1 (representing the knight stays on the board).</p> </li> <li> <p>Check if the current state <code>(x, y, step)</code> exists in the cache dictionary; if yes, return the cached probability.</p> </li> <li> <p>For each of the eight possible moves the knight can make, calculate the next position <code>(nX, nY)</code>.</p> </li> <li> <p>If the next position is valid (within the chessboard bounds), recursively call <code>move</code> for the next position and increment the probability with the result.</p> </li> <li> <p>Divide the accumulated probability by 8 (since there are eight possible moves) and store it in the cache.</p> </li> <li> <p>Finally, call the <code>move</code> function with the initial position <code>(row, column, 0)</code> and return the result.</p> </li> </ol> <p>This simulation-based approach accurately calculates the probability of the knight staying on the board after <code>k</code> moves starting from a given cell <code>(row, column)</code> on the chessboard. The use of memorization ensures that the function runs efficiently and avoids redundant computations.</p> <pre><code>class Solution:\ndef isValid(self, x, y):\nreturn 0 &lt;= x &lt; self.n and 0 &lt;= y &lt; self.n\ndef move(self, x, y, step):\nif step &gt;= self.k:\nreturn 1\nif (x, y, step) in self.cache:\nreturn self.cache[(x,y, step)]\nmovementDown = [(2,-1), (2,+1), (1,+2), (1,-2)]\nmovementUp = [(-2,-1), (-2,+1), (-1,+2), (-1,-2)]\nnextPosition = [(x+dx, y+dy) for dx, dy in movementDown]\nnextPosition += [(x+dx, y+dy) for dx, dy in movementUp]\nprobability = 0\nfor nX, nY in nextPosition:\nif self.isValid(nX, nY):\nnextMove = self.move(nX, nY, step + 1)\nprobability += nextMove/8\nself.cache[(x,y,step)] = probability\nreturn probability\ndef knightProbability(self, n: int, k: int, row: int, column: int) -&gt; float:\nself.n = n\nself.k = k\nself.cache = {}\nreturn self.move(row, column, 0)\n</code></pre> <p>I also working on C implementation using same concept, and to my surprise, it throw a Time Limit Exceeded. (Which then later I found out the reason is because I forgot to update cache value) </p> <pre><code>typedef struct {\nint x;\nint y;\n} Pair;\ndouble cache[26][26][101];\nbool isValid(int x,int y,int n) { return 0 &lt;= x &amp;&amp; x &lt; n &amp;&amp; 0 &lt;= y &amp;&amp; y &lt; n;}\ndouble move(int x, int y, int step, int n, int k) {\nif (step &gt;= k) return 1;\n// printf(\"Log point 2\\n\");\nif (cache[x][y][step] &gt;= 0.) return cache[x][y][step];\n// printf(\"Log point 3\\n\");\nPair nextPosition[] = {\n{x+2, y-1}, {x+2, y+1}, {x+1, y+2}, {x+1, y-2},\n{x-2, y-1}, {x-2, y+1}, {x-1, y+2}, {x-1, y-2}\n};\n// printf(\"Log point 4\\n\");\ndouble probability = 0.;\ndouble nextMove = 0.;\nfor (int i=0; i&lt;8; i++){\nint nX = nextPosition[i].x;\nint nY = nextPosition[i].y; nextMove = 0.; // &lt;- I forgot this\nif (isValid(nX, nY, n)) {\n// printf(\"Log point 5: nX = %d, nY = %d, step = %d,\\n\", nX, nY, step + 1);\nnextMove = move(nX, nY, step + 1, n, k);\n}\nprobability += nextMove/8;\n}\ncache[x][y][step] = probability; // &lt;- I forgot this\nreturn probability;\n}\ndouble knightProbability(int n, int k, int row, int column){\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = 0; j &lt; n; j++) {\nfor (int step = 0; step &lt; k; step++) {\ncache[i][j][step] = -1.0;\n}\n}\n}\n// printf(\"Log point\\n\");\nreturn move(row, column, 0, n, k);\n}\n</code></pre> <p>This instead, work out, which is the same one again but with way less code. <pre><code>int dx[] = {1, 2, 2, 1, -1, -2, -2, -1};\nint dy[] = {2, 1, -1, -2, -2, -1, 1, 2};\ndouble dp[26][26][101];\nint isValid(int x, int y, int n) {\nreturn x &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; n;\n}\ndouble move(int x, int y, int step, int n, int k) {\nif (step &gt;= k) {\nreturn 1.0;\n}\nif (dp[x][y][step] != -1.0) {\nreturn dp[x][y][step];\n}\ndouble probability = 0.0;\nfor (int i = 0; i &lt; 8; i++) {\nint nx = x + dx[i];\nint ny = y + dy[i];\nif (isValid(nx, ny, n)) {\nprobability += move(nx, ny, step+1, n, k);\n}\n}\nprobability /= 8.0;\ndp[x][y][step] = probability;\nreturn probability;\n}\ndouble knightProbability(int n, int k, int row, int column) {\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = 0; j &lt; n; j++) {\nfor (int s = 0; s &lt;= k; s++) {\ndp[i][j][s] = -1.0;\n}\n}\n}\nreturn move(row,column,0,n,k);\n}\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/688.%20Knight%20Probability%20in%20Chessboard/#possible-improvements", "title": "Possible Improvements", "text": "<ol> <li> <p>Dynamic Programming (Bottom-up Approach): Instead of using recursion and memorization, we can utilize a dynamic programming approach to avoid excessive function calls and improve performance. We can build the solution iteratively, starting from the base case (when <code>k = 0</code>) and progressively calculate the probabilities for increasing <code>k</code> values until we reach the target value. This way, we can avoid stack overflow and reduce redundant computations.</p> </li> <li> <p>Optimized Data Structure: The current implementation uses a 3D array to store the memorized values, which can be memory-intensive and slower. We can consider using a 1D array or a hash table with a suitable hashing function to store the computed probabilities.</p> </li> <li> <p>Optimize Data Access: The current implementation uses a 3D array to store the probabilities for each <code>(x, y, step)</code> combination. However, in each step, we only need the probabilities from the previous step. Therefore, we can optimize data access by using two arrays, one for the current step\u2019s probabilities and another for the previous step\u2019s probabilities, and keep swapping them as we progress through the steps.</p> </li> </ol> <p>Based on the above improvements, here\u2019s a refactored C implementation using dynamic programming:</p> <pre><code>typedef struct {\nint x;\nint y;\n} Pair;\ndouble cache[2][26][26];\nint curStep = 0;\nint prevStep = 1;\nbool isValid(int x,int y,int n) { return 0 &lt;= x &amp;&amp; x &lt; n &amp;&amp; 0 &lt;= y &amp;&amp; y &lt; n;}\ndouble move(int x, int y, int n, int k) {\nPair nextPosition[] = {\n{x+2, y-1}, {x+2, y+1}, {x+1, y+2}, {x+1, y-2},\n{x-2, y-1}, {x-2, y+1}, {x-1, y+2}, {x-1, y-2}\n};\ndouble probability = 0.;\nfor (int i=0; i&lt;8; i++){\nint nX = nextPosition[i].x;\nint nY = nextPosition[i].y; if (isValid(nX, nY, n)) {\nprobability += cache[prevStep][nX][nY] /8;\n}\n}\nreturn probability;\n}\ndouble knightProbability(int n, int k, int row, int column) {\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = 0; j &lt; n; j++) {\ncache[curStep][i][j] = 0.;\ncache[prevStep][i][j] = 0.;\n}\n}\ncache[prevStep][row][column] = 1.;\ndouble currentTotal = 1.;\nfor (int step = 1; step &lt;= k; step++) {\ncurrentTotal = 0.;\nfor (int x = 0; x &lt; n; x++) {\nfor (int y = 0; y &lt; n; y++) {\ncache[curStep][x][y] = move(x, y, n, k);\ncurrentTotal += cache[curStep][x][y];\n}\n}\nint temp = prevStep;\nprevStep = curStep;\ncurStep = temp;\n}\nreturn currentTotal;\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/712.%20Minimum%20ASCII%20Delete%20Sum%20for%20Two%20Strings/", "title": "712. Minimum ASCII Delete Sum for Two Strings", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/712.%20Minimum%20ASCII%20Delete%20Sum%20for%20Two%20Strings/#problem", "title": "Problem", "text": "<p>Given two strings <code>s1</code> and <code>s2</code>, return the lowest ASCII sum of deleted characters to make two strings equal.</p> <p>Example 1:</p> <p>Input: s1 = \u201csea\u201d, s2 = \u201ceat\u201d Output: 231 Explanation: Deleting \u201cs\u201d from \u201csea\u201d adds the ASCII value of \u201cs\u201d (115) to the sum. Deleting \u201ct\u201d from \u201ceat\u201d adds 116 to the sum. At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.</p> <p>Example 2:</p> <p>Input: s1 = \u201cdelete\u201d, s2 = \u201cleet\u201d Output: 403 Explanation: Deleting \u201cdee\u201d from \u201cdelete\u201d to turn the string into \u201clet\u201d, adds 100[d] + 101[e] + 101[e] to the sum. Deleting \u201ce\u201d from \u201cleet\u201d adds 101[e] to the sum. At the end, both strings are equal to \u201clet\u201d, and the answer is 100+101+101+101 = 403. If instead we turned both strings into \u201clee\u201d or \u201ceet\u201d, we would get answers of 433 or 417, which are higher.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length, s2.length &lt;= 1000</code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/712.%20Minimum%20ASCII%20Delete%20Sum%20for%20Two%20Strings/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/712.%20Minimum%20ASCII%20Delete%20Sum%20for%20Two%20Strings/#recursion-with-cache", "title": "Recursion with cache", "text": "<p>This is a good tactic to do any code challenger:</p> <ul> <li>To solve any problem with some form of Dynamic programming, we should start finding pattern.</li> <li>By using Recursion, we can try: Reuse the same function, using cache to have some form of reuse result from our last calculation</li> </ul> <p>Here, I found a pattern that, with provided <code>s1</code> and <code>s2</code>, we can try:</p> <ul> <li>Delete one char from <code>s1</code></li> <li>Delete one char from <code>s2</code></li> <li>Keep same char both on <code>s1</code> and <code>s2</code> </li> </ul> <p>To make the problem repeatable, by forcing the character we care about is last char of each string: <pre><code>class Solution:\ndef minimumDeleteSum(self, s1: str, s2: str, cache = None) -&gt; int:\nif cache is None:\ncache = {}\nif (s1, s2) in cache:\nreturn cache[(s1, s2)]\nif s1 == s2 == \"\":\nreturn 0\npossible = []\nif len(s2) &gt; 0:\npossible.append(self.minimumDeleteSum(s1, s2[:len(s2) - 1], cache) + ord(s2[-1]))\nif len(s1) &gt; 0:\npossible.append(self.minimumDeleteSum(s1[:len(s1) - 1], s2, cache) + ord(s1[-1]))\nif len(s2) &gt; 0 and len(s1) &gt; 0 and s2[-1] == s1[-1]:\npossible.append(self.minimumDeleteSum(s1[:len(s1) - 1], s2[:len(s2) - 1], cache))\ncache[(s1, s2)] = min(possible)\nreturn cache[(s1, s2)] \n</code></pre></p> <p>(or first char) <pre><code>class Solution:\ndef minimumDeleteSum(self, s1: str, s2: str, cache = None) -&gt; int:\nif cache is None:\ncache = {}\nif (s1, s2) in cache:\nreturn cache[(s1, s2)]\nif s1 == s2 == \"\":\nreturn 0\npossible = []\nif len(s2) &gt; 0:\npossible.append(self.minimumDeleteSum(s1, s2[1:], cache) + ord(s2[0]))\nif len(s1) &gt; 0:\npossible.append(self.minimumDeleteSum(s1[1:], s2, cache) + ord(s1[0]))\nif len(s2) &gt; 0 and len(s1) &gt; 0 and s2[0] == s1[0]:\npossible.append(self.minimumDeleteSum(s1[1:], s2[1:], cache))\ncache[(s1, s2)] = min(possible)\nreturn cache[(s1, s2)] \n</code></pre></p> <p>We can then calculating any possible combination of delete (and keep) character with provided <code>(s1, s2)</code> pair.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/712.%20Minimum%20ASCII%20Delete%20Sum%20for%20Two%20Strings/#dynamic-programming", "title": "Dynamic programming", "text": "<p>By using the same logic, but instead of using string and dictionary, I represent the string by its index <code>i -&gt; s[:i]</code> , which mean when <code>i == 0 -&gt; s[:i] = \"\"</code> . We need <code>cache</code> array covering <code>[0..=n]</code> (inclusive) range</p> <pre><code>class Solution:\ndef minimumDeleteSum(self, s1: str, s2: str, cache = None) -&gt; int:\ncache = [[0]* (len(s2)+1) for i in range(len(s1)+1)]\nfor i in range(0, len(s1)+1):\nfor j in range(0, len(s2)+1):\npossible = []\nif j &gt; 0:\npossible.append(cache[i][j-1] + ord(s2[j-1]))\nif i &gt; 0:\npossible.append(cache[i-1][j] + ord(s1[i-1]))\nif i &gt; 0 and j &gt; 0 and s1[i-1] == s2[j-1]:\npossible.append(cache[i-1][j-1])\nif possible:\ncache[i][j] = min(possible)\nreturn cache[-1][-1] \n</code></pre> <p>This C code technically do the same thing: <pre><code>int min(int x, int y){\nif (x == -1)\nreturn y;\nif (x &gt; y)\nreturn y;\nreturn x;\n}\nint minimumDeleteSum(char * s1, char * s2){\nint len1 = strlen(s1);\nint len2 = strlen(s2);\nint cache[1001][1001] = {0};\nfor (int i = 0; i &lt;= len1; i++) {\nfor (int j = 0; j &lt;= len2; j++) {\nint possible = -1;\nif (j &gt; 0) possible = min(possible, cache[i][j - 1] + s2[j - 1]);\nif (i &gt; 0) possible = min(possible, cache[i - 1][j] + s1[i - 1]);\nif (i &gt; 0 &amp;&amp; j &gt; 0 &amp;&amp; s1[i - 1] == s2[j - 1]) possible = min(possible, cache[i - 1][j - 1]);\nif (possible &gt; 0) cache[i][j] = possible;\n}\n}\nreturn cache[len1][len2];\n}\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/714.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20with%20Transaction%20Fee/", "title": "714. Best Time to Buy and Sell Stock with Transaction Fee", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/714.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20with%20Transaction%20Fee/#problem", "title": "Problem", "text": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day, and an integer <code>fee</code> representing a transaction fee.</p> <p>Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.</p> <p>Note:</p> <ul> <li>You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</li> <li>The transaction fee is only charged once for each stock purchase and sale.</li> </ul> <p>Example 1:</p> <p>Input: prices = [1,3,2,8,4,9], fee = 2 Output: 8 Explanation: The maximum profit can be achieved by:</p> <ul> <li>Buying at prices[0] = 1</li> <li>Selling at prices[3] = 8</li> <li>Buying at prices[4] = 4</li> <li>Selling at prices[5] = 9 The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/714.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock%20with%20Transaction%20Fee/#solve", "title": "Solve", "text": "<p>I track the profit I can make the most of when I:</p> <ul> <li>Not holding any stock <code>bestProfit[0]</code></li> <li>Holding a stock <code>bestProfit[1]</code></li> </ul> <p>With each step of prices change:</p> <ul> <li> <p>If I don\u2019t want to holding stock in this step, my <code>bestProfit[0]</code> is affect by two case:</p> <ul> <li>I could try to sell my currently holding stock <code>last_bestProfit[1]</code> and get <code>last_bestProfit[1] + price - fee</code> asset value </li> <li>or I could do not thing and keep <code>last_bestProfit[0]</code> asset value</li> </ul> </li> <li> <p>If I want to holding a stock now, my <code>bestProfit[1]</code> is also affect by two case: </p> <ul> <li>I could try to buy a stock, which make my asset value down to  <code>last_bestProfit[0] - price</code> </li> <li>or I could doing any thing and keep <code>last_bestProfit[1]</code></li> </ul> </li> </ul> <pre><code>class Solution:\ndef maxProfit(self, prices: List[int], fee: int) -&gt; int:\nbestProfit = [0, 0]\nfor step, price in enumerate(prices):\nif step == 0:\nbestProfit[1] = -price\ncontinue\ntmp = bestProfit[0]\nbestProfit[0] = max(bestProfit[0], bestProfit[1] + price - fee)\nbestProfit[1] = max(bestProfit[1], tmp - price)\nreturn bestProfit[0]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/735.%20Asteroid%20Collision/", "title": "735. Asteroid Collision", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/735.%20Asteroid%20Collision/#problem", "title": "Problem", "text": "<p>We are given an array <code>asteroids</code> of integers representing asteroids in a row.</p> <p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p> <p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p> <p>Constraints:</p> <ul> <li><code>2 &lt;= asteroids.length &lt;= 104</code></li> <li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li> <li><code>asteroids[i] != 0</code></li> </ul> <p>Example 1: <pre><code>**Input:** asteroids = [5,10,-5]\n**Output:** [5,10]\n**Explanation:** The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/735.%20Asteroid%20Collision/#solve", "title": "Solve", "text": "<p>Just imagine it not left right, but up and down. We used a stack to handle asteroids simulation:</p> <ul> <li>Every asteroid adding to the stack, we check for collision, which meaning checking the sign of asteroid on then stack top, vs newly added one.<ul> <li>added asteroid (+) with <code>value&gt;0</code>:The asteroids (-) and (+) in the stack have nothing to do with newly added asteroid (+)</li> <li>added asteroid (-) with <code>value&lt;0</code>: collision happen, simulation the collapsing until either:<ul> <li>All asteroid going up (+) explode, the stack remain the added asteroid (-).</li> <li>Or added asteroid (-) being stop.</li> </ul> </li> </ul> </li> </ul> <p>This should do the same in C: <pre><code>/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* asteroidCollision(int* asteroids, int asteroidsSize, int* returnSize){\nint* stack = (int*)malloc(asteroidsSize * sizeof(int));\nint size = 0;\nint asteroid;\nfor (int i = 0; i &lt; asteroidsSize; i++){\nasteroid = asteroids[i];\nif (size == 0) {\nstack[size] = asteroid;\nsize ++;\n}\nelse if (stack[size-1] &lt; 0 || asteroid &gt; 0) {\nstack[size] = asteroid;\nsize ++;\n}\nelse {\nstack[size] = asteroid;\nwhile (size &gt; 0 &amp;&amp; stack[size-1] &gt; 0 &amp;&amp; stack[size] &lt; 0) {\nif (stack[size-1] &lt; -stack[size])\nstack[size-1] = stack[size];\nelse if (stack[size-1] == -stack[size])\nstack[size-1] = 0;\nsize--;\n}\nif (stack[size] != 0) size++;\n}\n}\n*returnSize = size;\nreturn stack;\n}\n</code></pre></p> <p>minimal C code: <pre><code>int* asteroidCollision(int* asteroids, int asteroidsSize, int* returnSize){\nint *stack = (int *) malloc (asteroidsSize * sizeof(int));\nint k = -1; // no elements\nfor(int i = 0; i&lt;asteroidsSize; i++){\nk++;\nstack[k] = asteroids[i];\nwhile(k &gt; 0 &amp;&amp; stack[k] &lt; 0 &amp;&amp; stack[k-1] &gt; 0){\nif(abs(stack[k]) &gt; abs(stack[k-1])){\nstack[k-1] = stack[k];\nk--;\n} else if(abs(stack[k]) == abs(stack[k-1])){\nk = k - 2;\n} else {\nk--;\n}\n}\n}\n*returnSize = k + 1;\nreturn stack;\n}\n</code></pre></p> <p>While this, is python implementation <pre><code>class Solution(object):\ndef asteroidCollision(self, asteroids):\nstack = []\nfor asteroid in asteroids:\nwhile stack and asteroid &lt; 0 &lt; stack[-1]:\nif stack[-1] &lt; -asteroid:\nstack.pop()\nelif stack[-1] == -asteroid:\nstack.pop()\nbreak\nelse:\nbreak\nelse:\nstack.append(asteroid)\nreturn stack\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/746.%20Min%20Cost%20Climbing%20Stairs/", "title": "746. Min Cost Climbing Stairs", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/746.%20Min%20Cost%20Climbing%20Stairs/#problem", "title": "Problem", "text": "<p>You are given an integer array <code>cost</code> where <code>cost[i]</code> is the cost of <code>ith</code> step on a staircase. Once you pay the cost, you can either climb one or two steps.</p> <p>You can either start from the step with index <code>0</code>, or the step with index <code>1</code>.</p> <p>Return the minimum cost to reach the top of the floor.</p> <p>Example 1:</p> <p>Input: cost = [10,15,20] Output: 15 Explanation: You will start at index 1.</p> <ul> <li>Pay 15 and climb two steps to reach the top. The total cost is 15.</li> </ul> <p>Example 2:</p> <p>Input: cost = [1,100,1,1,1,100,1,1,100,1] Output: 6 Explanation: You will start at index 0.</p> <ul> <li>Pay 1 and climb two steps to reach index 2.</li> <li>Pay 1 and climb two steps to reach index 4.</li> <li>Pay 1 and climb two steps to reach index 6.</li> <li>Pay 1 and climb one step to reach index 7.</li> <li>Pay 1 and climb two steps to reach index 9.</li> <li>Pay 1 and climb one step to reach the top. The total cost is 6.</li> </ul> <p>Constraints:</p> <ul> <li><code>2 &lt;= cost.length &lt;= 1000</code></li> <li><code>0 &lt;= cost[i] &lt;= 999</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/746.%20Min%20Cost%20Climbing%20Stairs/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/746.%20Min%20Cost%20Climbing%20Stairs/#white-board", "title": "White board", "text": "<p>Quick glance on the problem give me a fell of \u201cthis is a Dynamic programming\u201d</p> <p>Now I need to find a Recursive formulation:</p> <ul> <li>I first thought on that we storing the answer of all child problem in the memory</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/746.%20Min%20Cost%20Climbing%20Stairs/#first-approach-storing-the-answer-directly", "title": "First approach: Storing the answer directly", "text": "<pre><code>cost = [10,15,20]\n\nAnd we try to create\nres  = [10,10,15]\n</code></pre> <p>When reading the problem description, and needed answer, I set up the baseline answer with</p> <pre><code>res[0] := cost[0]\nres[1] := min(cost[1], cost[0])\n</code></pre> <p>Now how to get 15 in <code>res[2]</code>, I try</p> <pre><code>res[2] = min(res[1], c + res[0])\n</code></pre> <p>This is base on observation that:</p> <ul> <li>To go to index 2 i first need to go to index 0 or 1</li> <li>If i get to index 2, \u2026 &lt; This is where I found out a really trouble some of my first approarch &gt;</li> </ul> <p>By some quick analyse, I found out a big hole in my first attempt:</p> <ul> <li>When we get to res[0] or res[1], it unsure we needed to buy index 0 or index 1 or not, making it not possible to know if we need to buy either of them to get to res[2]</li> <li>This mean I need more stage value on how can I get to res[0] or res[1]</li> </ul> <p>By more deeply thought, I believe I got it wrong on my res value which need to be <code>res = [0,0,15]</code> and not <code>res = [10,10,15]</code>.</p> <p>This could still be a possible approach. </p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/746.%20Min%20Cost%20Climbing%20Stairs/#second-approach-storing-staged-value-only", "title": "Second approach: Storing staged value only.", "text": "<p>Using the first approach end analysis, I quick change to a staged result only. I attempt on storing value that is smallest total that I can jump to and buy the current index spot.</p> <pre><code>cost  = [10, 15, 20]\n\ntotal = [10, 15, 30]\n</code></pre> <p>Base value</p> <pre><code>total[0] = cost[0]\ntotal[1] = cost[1]\n</code></pre> <p>Formula</p> <pre><code>total[2] = cost[2] + min(total[0], total[1])\n</code></pre> <ul> <li>We always buy the current spot, so cost[2] need to be added</li> <li>To jump to index 2, we at least need to stand at index 0 or index 1 step. So <code>min(total[0], total[1])</code> will set us up at the right position to jump to step 2 at minimal total price.</li> </ul> <p>Our answer, will either be at the last step or previous of last step of the staircase.</p> <pre><code>res = min(total[last_step], total[last_step-1])\n</code></pre> <p>Quick implementation in <code>python</code></p> <pre><code>class Solution:\ndef minCostClimbingStairs(self, cost: List[int]) -&gt; int:\ntotal = []\nfor c in cost:\nif len(total) == 0:\ntotal.append(c)\ncontinue\nif len(total) == 1:\ntotal.append(c)\ncontinue\ntotal.append(c + min(total[-2], total[-1]))\nprint(total)\nreturn min(total[-1], total[-2])\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/746.%20Min%20Cost%20Climbing%20Stairs/#testing-the-code", "title": "Testing the code", "text": "<p>Trying this code on some input result:</p> <p>Example 1:</p> <pre><code>cost  = [10, 15, 20]\ntotal = [10, 15, 30]\nres   = 15\n</code></pre> <p>Example 2:</p> <pre><code>cost  = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\ntotal = [1, 100, 2, 3, 3, 103, 4, 5, 104, 6]\nres   = 6\n</code></pre> <p>Hand create test case:</p> <pre><code>cost = [10,15,20,5 , 2, 2, 3, 7, 8, 9, 7, 8, 9,21, 3,574, 9, 2,321, 8, 9]\ntotal= [10,15,30,20,22,22,25,29,33,38,40,46,49,67,52,626,61,63,382,71,80]\nres  = 71\n</code></pre> <p>It seem that it do exactly what I describing approach.</p> <p>I submit it directly into Leetcode which return </p> <p>Runtime: 57 ms Beats: 79.52% Memory: 16.4 MB Beats: 78.37%</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/746.%20Min%20Cost%20Climbing%20Stairs/#implementation-dp-storing-staged-value", "title": "Implementation: DP - Storing staged value", "text": "<p><code>go</code> <code>O(n)</code></p> <ul> <li>Knowing the answer, i implementing it in go language for better performance, also using only 2 variable as  we only need two most recently used value of the <code>total</code> array in our quick draft <code>python</code> code</li> </ul> <pre><code>func min(a int,b int) int {\nif a &lt; b {\nreturn a\n}\nreturn b\n}\nfunc minCostClimbingStairs(cost []int) int {\na := cost[0]\nb := cost[1]\nfor i := 2; i &lt; len(cost); i ++ {\nif i%2 == 0 {\na = cost[i] + min(a,b)\n} else {\nb = cost[i] + min(a,b)\n}\n}\nreturn min(a,b)\n}\n</code></pre> <p>The final result is:</p> <ul> <li>Runtime 6ms (Beats 14.00% of users with Go)</li> <li>Memory 2.84MB (Beats 79.74%of users with Go)</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/767.%20Reorganize%20String/", "title": "767. Reorganize String", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "javascript"]}, {"location": "notes/Leetcode%20100-1000/767.%20Reorganize%20String/#problem", "title": "Problem", "text": "<p>Given a string <code>s</code>, rearrange the characters of <code>s</code> so that any two adjacent characters are not the same.</p> <p>Return any possible rearrangement of <code>s</code> or return <code>\"\"</code> if not possible.</p> <p>Example 1:</p> <p>Input: s = \u201caab\u201d Output: \u201caba\u201d</p> <p>Example 2:</p> <p>Input: s = \u201caaab\u201d Output: \u201c\u201d</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "javascript"]}, {"location": "notes/Leetcode%20100-1000/767.%20Reorganize%20String/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "javascript"]}, {"location": "notes/Leetcode%20100-1000/767.%20Reorganize%20String/#recursion", "title": "Recursion", "text": "<p><code>python</code></p> <p>I try no simulating the process of try and error. Where start from total array of character <code>s</code>. I put the char in a current <code>curr</code> array one by one, while maintain any two adjacent characters  in <code>curr</code> are not the same.</p> <p>A TLE solution</p> Time Submitted Status Runtime Memory Language 08/23/2023 21:38 Time Limit Exceeded N/A N/A python3 <pre><code>class Solution:\ndef helper(self, curr, remain):\nif len(remain) == 0:\nself.result = curr\nreturn True\nfor i, c in enumerate(remain):\nif len(curr) &gt; 0 and curr[-1] == c:\ncontinue\nif self.helper(curr+c, remain[:i] + remain[i+1:]):\nreturn True\nreturn False\ndef reorganizeString(self, s: str) -&gt; str:\nself.result = \"\"\nself.helper(\"\", s)\nreturn self.result\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "javascript"]}, {"location": "notes/Leetcode%20100-1000/767.%20Reorganize%20String/#greedy", "title": "Greedy", "text": "<p><code>python</code></p> <p>When analyzing the result more, I trying to chose the best way to put character <code>c</code> form remain character of <code>s</code> into <code>curr</code> array. </p> <p>So I come up with a greedy way to choose each element with this rule:</p> <ul> <li>Sort all element by total count</li> <li>Because all two adjacent element isn\u2019t the same. We start with highest total count element <code>x</code>, put it all into <code>curr</code> array</li> <li>The next loop, we push all other number one by one (from highest total count to lowest), separating all already pushed <code>x</code>. </li> <li>If we success separating all <code>x</code> element, any remain character can be freely push into the array from by define.</li> </ul> <p>I try some type of way to allocating memory, but it not that much affect the time complexity.</p> Time Submitted Status Runtime Memory Language 08/23/2023 21:57 Accepted 42 ms 16.2 MB python3 08/23/2023 21:55 Accepted 49 ms 16.2 MB python3 08/23/2023 21:49 Accepted 37 ms 16.4 MB python3 <pre><code>class Solution:\ndef reorganizeString(self, s: str) -&gt; str:\ncount = [0]*27\nfor i in s:\ncount[ord(i) - ord(\"a\")] += 1\nkeys = list(range(27))\ndef sortKey(x):\nreturn -count[x]\nkeys.sort(key = sortKey)\natleast = 0\nres = \"\"\nfor i, nc in enumerate(keys):\nc = chr(nc + ord(\"a\"))\nif i == 0:\nres = c* count[nc]\natleast = count[nc]\ncontinue\nfor j in range(count[nc]):\nif atleast == 0:\natleast = len(res)\natleast = atleast -1\nres = res[:atleast] + c + res[atleast:]\nif len(res) &gt; 1 and res[0] == res[1]:\nreturn \"\"\nreturn res\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "javascript"]}, {"location": "notes/Leetcode%20100-1000/767.%20Reorganize%20String/#javascript-implementation", "title": "JavaScript implementation", "text": "<p><code>javascript</code> </p> <p>Normally, I won\u2019t use JavaScript in any calculation, algorithm and mostly to interact with html dom, html element, handle web data, JSON, .... So this is quite a new experience</p> <ul> <li>Array in JavaScript is similar to python, which is just a holder to any sequence of element (with no type enforce)</li> <li>We can pushing element into array by using <code>Array.splice</code></li> <li>The equivalence JavaScript  <code>chr</code>, <code>ord</code>  function is <code>String.fromCodePoint()</code>  and <code>String.charCodeAt(0)</code></li> <li>You can\u2019t forEach on string.</li> <li>We have <code>Array.sort()</code> which accept key function as two element as input. (python in the other hand only take one element)</li> </ul> Time Submitted Status Runtime Memory Language 08/23/2023 23:40 Accepted 57 ms 43.4 MB javascript <pre><code>/**\n * @param {string} s\n * @return {string}\n */\nvar reorganizeString = function(s) {\nconst ordA = 'a'.charCodeAt(0);\nlet count = Array(27)\nlet keys = Array(27)\nfor (let i = 0; i &lt; 27; i++) {\ncount[i] = 0\nkeys[i] = i\n}\nArray.from(s).forEach ( (i) =&gt; {\ncount[i.charCodeAt(0) - ordA] += 1\n})\nkeys.sort( (a,b) =&gt; {\nreturn count[b]-count[a]\n}) let result = Array(0)\nlet currindex = 0\nfor (let i = 0; i &lt; 27; i ++) {\nc = String.fromCodePoint(keys[i] + ordA)\nif (i == 0) {\nresult = Array(count[keys[0]])\nresult.fill(c)\ncurrindex = count[keys[0]]\ncontinue\n}\nfor (let j = 0; j &lt; count[keys[i]]; j ++) {\ncurrindex -= 1\nif (currindex == 0)\ncurrindex = result.length\nresult.splice(currindex, 0, c);\n}\n}\nif (result.length &gt;= 2) if (result[0] == result[1]) {\nreturn \"\"\n} return result.join('')\n};\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "javascript"]}, {"location": "notes/Leetcode%20100-1000/799.%20Champagne%20Tower/", "title": "799. Champagne Tower", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go"]}, {"location": "notes/Leetcode%20100-1000/799.%20Champagne%20Tower/#problem", "title": "Problem", "text": "<p>We stack glasses in a pyramid, where the first row has <code>1</code> glass, the second row has <code>2</code> glasses, and so on until the 100th row.  Each glass holds one cup of champagne.</p> <p>Then, some champagne is poured into the first glass at the top.  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has its excess champagne fall on the floor.)</p> <p>For example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.</p> <p></p> <p>Now after pouring some non-negative integer cups of champagne, return how full the <code>jth</code> glass in the <code>ith</code> row is (both <code>i</code> and <code>j</code> are 0-indexed.)</p> <p>Example 1:</p> <p>Input: poured = 1, query_row = 1, query_glass = 1 Output: 0.00000 Explanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.</p> <p>Example 2:</p> <p>Input: poured = 2, query_row = 1, query_glass = 1 Output: 0.50000 Explanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.</p> <p>Example 3:</p> <p>Input: poured = 100000009, query_row = 33, query_glass = 17 Output: 1.00000</p> <p>Constraints:</p> <ul> <li><code>0 &lt;= poured &lt;= 109</code></li> <li><code>0 &lt;= query_glass &lt;= query_row &lt; 100</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go"]}, {"location": "notes/Leetcode%20100-1000/799.%20Champagne%20Tower/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go"]}, {"location": "notes/Leetcode%20100-1000/799.%20Champagne%20Tower/#white-board", "title": "White board", "text": "<p>The problem doesn\u2019t explain it self that thoroughly</p> <ul> <li><code>poured</code> can be easily explaining, the total amount of champagne (measure by cup) </li> <li> <p>The <code>query_row, query_glass</code>:</p> <ul> <li>We have the top glass (started glass) is index at <code>(0, 0)</code>, which the information is provided in Example 1</li> <li>This mean row of glass have index as <code>0</code></li> <li>A specific row <code>idx</code> with <code>n</code> glass, being index from <code>0 .. n-1</code></li> </ul> </li> <li> <p>The first thing in my mind is that we simulating the process of pouring champagne (We using code directly here)</p> <ul> <li>I think it is quite trouble some with <code>0</code> index or <code>0</code> poured champagne amount, so, I just skip this by some edge case handling before going to main solve function <pre><code>    if poured == 0:\nreturn 0.\nif poured == 1:\nif query_row == 0:\nassert query_glass == 0\nreturn 1.\nelse:\nreturn 0.\n</code></pre></li> <li>Start at row 1, pouring into top glass, we have a <code>simulation_row</code> having only one glass, I assuming the cup have <code>inf</code> capacity, this make it easier to storing stage of each glass and simulating overflow champagne drop to bellow glass: <pre><code>    simulation_row = [poured * 1.]\nlength = 1\n</code></pre></li> <li>We then simulating the process on each row until reach the <code>query_row</code> <pre><code>for row in range(query_row):\nlength += 1\nnew_row = [0. for _ in range(length)]\nfor i in range(length):\nif i &gt; 0:\nnew_row[i] += (max(simulation_row[i-1] - 1, 0.))/2\nif i &lt; length-1:\nnew_row[i] += (max(simulation_row[i] - 1, 0.))/2\nsimulation_row = new_row\nif verbose: print(simulation_row)\n</code></pre><ul> <li>What we have is that new glass row have length equal to previous row length + 1 (1 more glass), the <code>length += 1</code> and <code>new_row = [0. for _ in range(length)]</code> simulating the new added glass row</li> <li>Now each new glass is being poured into by the overflow champagne of top row:<ul> <li></li> <li>We can see that, a glass on top row can poured into two glass in the bellow row. Or in reverse, a bellow row glass can be poured by two top row glass (except those in the edge, only being poured by one top glass) so here is the simulation code of the process:<ul> <li>We need to make sure we leave at least <code>1.</code> amount of the champagne if we get a overflow case. The overflow amount is dividend into two even amount to two glass bellow, thus we have <code>/ 2</code> in the formula. </li> <li>Or not giving champagne to the below row if the top row champagne amount is less than <code>1.</code></li> <li>All of that leave we this simulation code <pre><code>for i in range(length):\nif i &gt; 0:\nnew_row[i] += (max(simulation_row[i-1] - 1, 0.))/2\nif i &lt; length-1:\nnew_row[i] += (max(simulation_row[i] - 1, 0.))/2\n</code></pre></li> </ul> </li> </ul> </li> <li>The final thing we do is that carry on the <code>new_row</code> as our <code>current_row</code> and keep processing until we reach <code>query_row</code> and <code>query_glass</code></li> </ul> </li> </ul> </li> </ul> <p>The drafted white board code is here: With a time complexity of ~ O(query_row * query_row)</p> Time Submitted Status Runtime Memory Language 09/24/2023 10:52 Accepted 152 ms 16.4 MB python3 <pre><code>class Solution:\ndef champagneTower(self, poured: int, query_row: int, query_glass: int) -&gt; float:\nverbose : bool = False\nif poured == 0:\nreturn 0.\nif poured == 1:\nif query_row == 0:\nassert query_glass == 0\nreturn 1.\nelse:\nreturn 0.\nsimulation_row = [poured * 1.]\nlength = 1\nif verbose: print(simulation_row)\nfor row in range(query_row):\nlength += 1\nnew_row = [0. for _ in range(length)]\nfor i in range(length):\nif i &gt; 0:\nnew_row[i] += (max(simulation_row[i-1] - 1, 0.))/2\nif i &lt; length-1:\nnew_row[i] += (max(simulation_row[i] - 1, 0.))/2\nsimulation_row = new_row\nif verbose: print(simulation_row)\nreturn min(simulation_row[query_glass], 1.)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go"]}, {"location": "notes/Leetcode%20100-1000/799.%20Champagne%20Tower/#optimized-simulation-only-needed-path", "title": "Optimized - Simulation only needed path", "text": "<p><code>go</code></p> <p>So I have a good reasonable solution, it will be better to go for a compile language, which I choosing go here. We aren\u2019t try to be too fancy, so I\u2019m not use go test and just setup simple test using main function before doing anything just yet </p> <pre><code>package main\nfunc champagneTower(poured int, query_row int, query_glass int) float64 {\nreturn 1.\n}\nfunc isEqual(a, b float64) bool {\nif a &lt; b {\nreturn isEqual(b, a)\n}\nreturn (a - b) &lt;= 1e-5\n}\nfunc main() {\ninput := []int{1, 1, 1, 2, 1, 1, 100000009, 33, 17, 25, 6, 1}\noutput := []float64{0.00000, 0.50000, 1.00000, 0.18750}\nidx := -1\nfor i := 0; i &lt; len(input); i += 3 {\nidx += 1\nres := champagneTower(input[i], input[i+1], input[i+2])\nprintln(\"test\", idx, \"is\", isEqual(res, output[idx]))\n}\n}\n</code></pre> <p>We seeing that, a glass can only affected (or poured) by specific amount of top glass, this mean we can calculating only on those glass to have the final answer.</p> <ul> <li>A simple recursion could work, if we don\u2019t want to spending too much time on math to calculating exactly what we want.</li> <li>I have a map data structure <code>cache</code> to store all calculated value, that have a query <code>(query_row, query_glass)</code> as the map index.</li> </ul> <p>Final implementation</p> Time Submitted Status Runtime Memory Language 09/25/2023 07:40 Accepted 6 ms 7.2 MB golang <pre><code>type Pair struct {\nrow   int\nindex int\n}\n// Leetcode go not have min and max function built-in, so we have to implement this\nfunc max(a float64, b float64) float64 {\nif a &gt; b {\nreturn a\n} else {\nreturn b        }\n}\nfunc min(a float64, b float64) float64 {\nif a &gt; b {\nreturn b\n} else {\nreturn a       }\n}\nfunc NewPair(row int, index int) Pair {\nreturn Pair{row, index}\n}\nfunc recusion_champagneTower(poured int, query_row int, query_glass int, cache map[Pair]float64) float64 {\n// println(poured, query_row, query_glass)\npair := NewPair(query_row, query_glass)\nval, ok := cache[pair]\nif ok {\nreturn val\n}\nif poured == 0 {\nreturn 0.\n} else if query_row == 0 {\nreturn float64(poured)\n}\nres := 0.\nif query_glass &gt; 0 {\nres += max(recusion_champagneTower(poured, query_row-1, query_glass-1, cache)-1, 0.) / 2\n}\nif query_glass &lt; query_row {\nres += max(recusion_champagneTower(poured, query_row-1, query_glass, cache)-1, 0.) / 2\n}\ncache[pair] = res\nreturn res\n}\nfunc champagneTower(poured int, query_row int, query_glass int) float64 {\ncache := make(map[Pair]float64)\nres := recusion_champagneTower(poured, query_row, query_glass, cache)\nreturn min(res, 1.)\n}\nfunc isEqual(a, b float64) bool {\nif a &lt; b {\nreturn isEqual(b, a)\n}\nreturn (a - b) &lt;= 1e-5\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "go"]}, {"location": "notes/Leetcode%20100-1000/802.%20Find%20Eventual%20Safe%20States/", "title": "802. Find Eventual Safe States", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/802.%20Find%20Eventual%20Safe%20States/#problem", "title": "Problem", "text": "<p>There is a directed graph of <code>n</code> nodes with each node labeled from <code>0</code> to <code>n - 1</code>. The graph is represented by a 0-indexed 2D integer array <code>graph</code> where <code>graph[i]</code> is an integer array of nodes adjacent to node <code>i</code>, meaning there is an edge from node <code>i</code> to each node in <code>graph[i]</code>.</p> <p>A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).</p> <p>Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.</p> <p>Constraints:</p> <ul> <li><code>n == graph.length</code></li> <li><code>1 &lt;= n &lt;= 10**4</code></li> <li><code>0 &lt;= graph[i].length &lt;= n</code></li> <li><code>0 &lt;= graph[i][j] &lt;= n - 1</code></li> <li><code>graph[i]</code> is sorted in a strictly increasing order.</li> <li>The graph may contain self-loops.</li> <li>The number of edges in the graph will be in the range <code>[1, 4 * 10**4]</code>.</li> </ul> <p>Example 1:</p> <p> <pre><code>**Input:** graph = [[1,2],[2,3],[5],[0],[5],[],[|1,2],[2,3],[5],[0],[5],[],[]]\n**Output:** [2,4,5,6]\n**Explanation:** The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/802.%20Find%20Eventual%20Safe%20States/#solve", "title": "Solve", "text": "<p>A hard to understand problem.</p> <ul> <li>You have terminated node, which have no outgoing edges . A terminated node is also a safe node : <code>if len(graph[i]) == 0 then i is \"terminated node\" and i is \"safe node\"</code></li> <li>A safe node is node that run into a terminated node or other safe node</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/802.%20Find%20Eventual%20Safe%20States/#first-approach", "title": "First approach", "text": "<p>A quick <code>O(n**3)</code> which could be close to <code>O(n**2)</code> which utilize hash map do exactly that</p> <ul> <li>Find all terminated node on first loop, put it into <code>safe_node</code> array</li> <li>Find all node that only point to <code>safe_node</code> array, which we call <code>found_safe_node</code>, putting them into result</li> <li>Repeat until there is no longer node to put in to <code>safe_node</code> array</li> <li>Return <code>safe_node</code> array <pre><code>class Solution:\ndef eventualSafeNodes(self, graph: List[List[int]]) -&gt; List[int]:\ngraph = [set(i) for i in graph]\nsafe_node = set()\nfor loop_round in range(len(graph)):\nfound_safe_node = set()\nfor node_id, adjNodes in enumerate(graph):\nif node_id in safe_node:\ncontinue\nif len(adjNodes) == 0:\nfound_safe_node.add(node_id)\nsafe_node.add(node_id)\nif len(found_safe_node) == 0:\nbreak\nfor adjNodes in graph:\nadjNodes -= found_safe_node\nsafe_node = list(safe_node)\nsafe_node.sort()\nreturn safe_node\n</code></pre></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/802.%20Find%20Eventual%20Safe%20States/#second-approach", "title": "Second approach", "text": "<p>Further optimize, a more better approach, where after found a safe node, we recheck other node pointed to them only.</p> <ul> <li>From input graph, create a <code>ref_table</code>. Where <code>ref_table[i]</code> storing all node that could point/go to <code>i</code> </li> <li>Still slow as we use too much hash map and memory though <pre><code>class Solution:\ndef eventualSafeNodes(self, graph: List[List[int]]) -&gt; List[int]:\ngraph = [set(i) for i in graph]\nsafe_node = set()\nref_table = [set() for _ in graph]\nfound_safe_node = set()\nfor node_id, adjNodes in enumerate(graph):\nif len(adjNodes) == 0:\nfound_safe_node.add(node_id)\nsafe_node.add(node_id)\nfor adjNode in adjNodes:\nref_table[adjNode].add(node_id)\nfor loop_round in range(len(graph)):\nneed_to_check_node = set()\nnew_found_safe_node = set()\nfor node_id in found_safe_node:\nneed_to_check_node = need_to_check_node.union(ref_table[node_id])\nfor node_id in need_to_check_node:\ngraph[node_id] = graph[node_id] - found_safe_node\nif len(graph[node_id]) == 0:\nnew_found_safe_node.add(node_id)\nsafe_node.add(node_id)\nif len(new_found_safe_node) == 0:\nbreak\nfound_safe_node = new_found_safe_node\nsafe_node = list(safe_node)\nsafe_node.sort()\nreturn safe_node\n</code></pre></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/802.%20Find%20Eventual%20Safe%20States/#third-approach", "title": "Third approach", "text": "<p>We will try to minimize the need of memory allocation</p> <ul> <li>Stop try to solved and find safe node on each round of loop. Instead, checking each found safe node one by one. With simple queue/stack <code>found_safe_node</code>, we check each <code>curr_safe_node_id</code> and reducing a lot of logic in our inner loop (the code implementation using simple name <code>node_id</code>, changing the inner for loop interrater variable to <code>ref_node</code>)<ul> <li>We can skip our need to use <code>set()</code> in <code>ref_table</code> for as we no longer need <code>set.union</code> function to find <code>need_to_check_node</code> (since <code>need_to_check_node = ref_table[curr_safe_node_id]</code>)</li> <li><code>new_found_safe_node</code> can be append directly into <code>found_safe_node</code> and will be process later</li> <li>On each loop, we do the same <code>graph[node_id] = graph[node_id] - set([curr_safe_node_id])</code> and check if our <code>len(graph[node_id]) == 0</code> to find if it a new found safe node</li> <li>The loop round can be change to a proper <code>while loop</code> that run until all <code>found_safe_node</code> is processed </li> </ul> </li> <li>Another optimization is our <code>safe_node</code> result array, we can use a Boolean array to keep track which node is safe node instead of using set, and later loop through for an <code>O(n)</code> time tracking and sorting solution <pre><code>class Solution:\ndef eventualSafeNodes(self, graph: List[List[int]]) -&gt; List[int]:\ngraph = [set(i) for i in graph]\nis_safe_node = [False] * len(graph)\nref_table = [[] for _ in graph]\nfound_safe_node = []\nfor node_id, adjNodes in enumerate(graph):\nif len(adjNodes) == 0:\nfound_safe_node.append(node_id)\nis_safe_node[node_id] = True\nfor adjNode in adjNodes:\nref_table[adjNode].append(node_id)\nwhile len(found_safe_node) &gt; 0:\nnode_id = found_safe_node.pop(0)\nfor ref_node in ref_table[node_id]:\nif is_safe_node[ref_node]:\ncontinue\ngraph[ref_node] = graph[ref_node] - set([node_id])\nif len(graph[ref_node]) == 0:\nfound_safe_node.append(ref_node)\nis_safe_node[ref_node] = True\nsafe_node = []\nfor node_id, is_safe in enumerate(is_safe_node):\nif is_safe:\nsafe_node.append(node_id)\nreturn safe_node\n</code></pre></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/802.%20Find%20Eventual%20Safe%20States/#fun-fact", "title": "Fun fact:", "text": "<p>With out using <code>ref_node</code> that we have at our second attempt, we will  get <code>Time limit Exceeded</code>. Which mean the crafted input is quite generous on us and not have many edges case with lager input.</p> <p>This also mean, I not even have to optimize using set <code>ref_node</code>, where every update will remove the found safe node to make <code>ref_table[node_id]</code> loop even lower</p> <p>Here is implement we we not using  <code>ref_node</code> <pre><code>class Solution:\ndef eventualSafeNodes(self, graph: List[List[int]]) -&gt; List[int]:\ngraph = [set(i) for i in graph]\nis_safe_node = [False] * len(graph)\nfound_safe_node = []\nfor node_id, adjNodes in enumerate(graph):\nif len(adjNodes) == 0:\nfound_safe_node.append(node_id)\nis_safe_node[node_id] = True\nwhile len(found_safe_node) &gt; 0:\nfound_safe_node_id = found_safe_node.pop()\nfor node_id, adjNodes in enumerate(graph):\nif is_safe_node[node_id]:\ncontinue\nadjNodes -= set([found_safe_node_id])\nif len(adjNodes) == 0:\nfound_safe_node.append(node_id)\nis_safe_node[node_id] = True\nsafe_node = []\nfor node_id, is_safe in enumerate(is_safe_node):\nif is_safe:\nsafe_node.append(node_id)\nreturn safe_node\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/802.%20Find%20Eventual%20Safe%20States/#read-the-solution-and-realization", "title": "Read the solution and realization", "text": "<p>We can still further optimization</p> <p>We treat graph as literal hash map set() and tracking all node with no edge go out from it to find safe node. This could be improved by only keep track off total node can go to our current <code>node_id</code> instead, we call it  <code>indegree</code> of node, where <code>indegree[node_id] = len(graph[node_id]).</code></p> <ul> <li>Every terminated node and safe node only need to be visited once and we delete/reduction all edges related to that node</li> <li>This happened one time only and not overlap, so we could just keep track off total node can go to our current <code>node_id</code> instead, we call it  <code>indegree</code> array where <code>indegree[i] = len(graph[i])</code>.</li> <li>Every update, <code>graph[node_id] = graph[node_id] - found_safe_node</code> can be replacing with <code>indegree[node_id] -= len(found_safe_node)</code></li> <li>We can even further simplify this process by calculating one  <code>found_safe_node</code> each looped time, and <code>indegree[node_id] -= 1</code> with each loop</li> </ul> <p>While I\u2019m at it, I try to minimize the loop on <code>ref_table</code> too anyway <pre><code>class Solution:\ndef eventualSafeNodes(self, graph: List[List[int]]) -&gt; List[int]:\nindegree = [0] * len(graph)\nis_safe_node = [False] * len(graph)\nref_table = [set() for _ in graph]\nfound_safe_node = []\nfor node_id, adjNodes in enumerate(graph):\nif len(adjNodes) == 0:\nfound_safe_node.append(node_id)\nis_safe_node[node_id] = True\nindegree[node_id] = len(adjNodes)\nfor adjNode in adjNodes:\nref_table[adjNode].add(node_id)\nwhile len(found_safe_node) &gt; 0:\nnode_id = found_safe_node.pop(0)\nfor ref_node in ref_table[node_id]:\nif is_safe_node[ref_node]:\nref_table[ref_node] -= set([node_id])\ncontinue\nindegree[ref_node] -= 1\nif indegree[ref_node] == 0:\nfound_safe_node.append(ref_node)\nis_safe_node[ref_node] = True\nsafe_node = []\nfor node_id, is_safe in enumerate(is_safe_node):\nif is_safe:\nsafe_node.append(node_id)\nreturn safe_node\n</code></pre></p> <p>^Simulation</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/802.%20Find%20Eventual%20Safe%20States/#just-getting-it", "title": "Just getting it", "text": "<p>Here is some of the best <code>Crtl + C</code> solution</p> <ul> <li>We create a mark array for caching result of <code>Helper</code> function <ul> <li>It start at <code>-1</code> for not doing any calculation yet</li> </ul> </li> <li><code>Helper</code> check if a node is <code>safe</code> or not: <ul> <li>Where with each <code>node</code>, we actually try to do a DFS <code>Helper</code> function and find if our DFS search function through graph ran in to a visited <code>node</code> . </li> <li>The function keep track of visited node by marking them as <code>0</code></li> <li>If any of <code>Helper</code> DFS search that have <code>adjNode</code> connected to our current node <code>idx</code> in <code>graph[idx]</code> return <code>0</code> (Which mean it have been visited by the  <code>Helper</code> DFS function or run into a know not safe node), return <code>0</code> which mean our current node <code>idx</code> is not safe</li> <li>Otherwise, our current node <code>idx</code> is a safe node, cache the result into our <code>mark</code> cache array and return <code>1</code> <pre><code>class Solution:\ndef eventualSafeNodes(self, graph: List[List[int]]) -&gt; List[int]:\nmask = [-1] * len(graph)\ndef helper(idx):\nif mask[idx] != -1:\nreturn mask[idx]\nmask[idx] = 0\nfor i in graph[idx]:\nif helper(i) == 0:\nreturn 0\nmask[idx] = 1\nreturn 1\nreturn [i for i in range(len(graph)) if helper(i)]\n</code></pre></li> </ul> </li> </ul> <p>I try to be more clear changing all function and variable name, but this have some quite elegant, and quite challenging to break it down into smaller component:</p> <ul> <li>Keeping track of visited node into <code>is_safe_node</code> array by using 3 stage <code>[None, False, True]</code> </li> <li>Pre-set our current node <code>current_node_id</code> into unsafe node (<code>is_safe_node[current_node_id] = false</code> stage phase) until proven a safe node (<code>is_safe_node[current_node_id] = True</code> stage). Each connection/edge of our <code>current_node_id -&gt; adj_node_id</code> will be check to see if:<ul> <li>when we have a <code>adj_node_id</code> with a <code>False</code> node stage: <ul> <li><code>adj_node_id</code> either is a Visited node in current call stack BFS path that and currently being Pre-set as unsafe node (which mean it haven\u2019t been proven a safe node). This mean our BFS function found a cycle path (or can\u2019t be terminated path) from our current call stack BFS path.</li> <li>or <code>adj_node_id</code> is an already know unsafe node that have been process. We can start a cycle path from this <code>adj_node_id</code> node</li> </ul> </li> <li>We have a <code>adj_node_id</code> with <code>True</code> node stage: <ul> <li>Which mean it pass it the pre-set phase, no cycle path can be from start from this <code>adj_node_id</code> node</li> <li>And <code>adj_node_id</code> become a know safe node that have been process</li> </ul> </li> </ul> </li> <li>Immediately return a <code>DFS</code> as <code>False</code> will break out of all our current call stack, which make all node trace down preset as unsafe node is now become a know a unsafe node.</li> </ul> <pre><code>class Solution:\ndef eventualSafeNodes(self, graph: List[List[int]]) -&gt; List[int]:\nis_safe_node = [None] * len(graph)\ndef DFS(current_node_id):\nif not is_safe_node[current_node_id] is None:\nreturn is_safe_node[current_node_id]\nis_safe_node[current_node_id] = False\nfor adj_node_id in graph[current_node_id]:\nif DFS(adj_node_id) == False:\nreturn False\nis_safe_node[current_node_id] = True\nreturn True\nreturn [node_id for node_id in range(len(graph)) if DFS(node_id)]\n</code></pre> <p>^DFS</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/802.%20Find%20Eventual%20Safe%20States/#comparation", "title": "Comparation", "text": "<p>Overall, a too intelligent DFS code for sure, that reduce about ~100 ms ~ 1/7 time complexity (Here is comparation of DFS (Bellow row) and Simulation (Above row) code implementation)</p> Agro Time Submitted Status Runtime Memory Language Simulation 07/13/2023 11:05 Accepted 716 ms 25 MB python3 DFS 07/13/2023 11:04 Accepted 634 ms 24.2 MB python3", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/847.%20Shortest%20Path%20Visiting%20All%20Nodes/", "title": "847. Shortest Path Visiting All Nodes", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 3 * 2 ** n)", "O(n ** 2 * 2 ** n)", "O(n * 2 ** n)", "heap", "dynamic_programing", "queue", "BFS"]}, {"location": "notes/Leetcode%20100-1000/847.%20Shortest%20Path%20Visiting%20All%20Nodes/#problem", "title": "Problem", "text": "<p>You have an undirected, connected graph of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given an array <code>graph</code> where <code>graph[i]</code> is a list of all the nodes connected with node <code>i</code> by an edge.</p> <p>Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.</p> <p>Example 1:</p> <p></p> <p>Input: graph = <code>[[1,2,3],[0],[0],[0|1,2,3],[0],[0],[0]]</code> Output: 4 Explanation: One possible path is [1,0,2,0,3]</p> <p>Example 2:</p> <p></p> <p>Input: graph = <code>[[1],[0,2,4],[1,3,4],[2],[1,2|1],[0,2,4],[1,3,4],[2],[1,2]]</code> Output: 4 Explanation: One possible path is [0,1,4,2,3]</p> <p>Constraints:</p> <ul> <li><code>n == graph.length</code></li> <li><code>1 &lt;= n &lt;= 12</code></li> <li><code>0 &lt;= graph[i].length &lt; n</code></li> <li><code>graph[i]</code> does not contain <code>i</code>.</li> <li>If <code>graph[a]</code> contains <code>b</code>, then <code>graph[b]</code> contains <code>a</code>.</li> <li>The input graph is always connected.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 3 * 2 ** n)", "O(n ** 2 * 2 ** n)", "O(n * 2 ** n)", "heap", "dynamic_programing", "queue", "BFS"]}, {"location": "notes/Leetcode%20100-1000/847.%20Shortest%20Path%20Visiting%20All%20Nodes/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 3 * 2 ** n)", "O(n ** 2 * 2 ** n)", "O(n * 2 ** n)", "heap", "dynamic_programing", "queue", "BFS"]}, {"location": "notes/Leetcode%20100-1000/847.%20Shortest%20Path%20Visiting%20All%20Nodes/#white-board", "title": "White board", "text": "<p>My white board be like</p> <p> </p> <p>Need to work more before start coding</p> <ul> <li>Frist I try to use a cache, to find anything that we can store into memory, that needed to solve the problem<ul> <li>I quickly thought about storing the stage of current problem, we are given:<ul> <li>Current <code>curr</code> start point (I assuming it need to be node <code>0</code> for started node, the problem said we can chose any for start node, RTFM moments)</li> <li>A list of Node in graph that need to be visited</li> </ul> </li> <li>For the purpose<ul> <li>I try saving a <code>target</code> next point that we are try to go to next</li> <li>This is base on that, a stage can be un-change, we need to go to the next point so that we can go to the next point (huh?) that can update the stage.</li> <li>Example, when we start at <code>[0] -&gt; [1]</code>, we need to go back to <code>[0]</code> before getting back to <code>[2]</code> (result path <code>[0] -&gt; [1] -&gt; [0] -&gt; [2]</code>) </li> <li>This make me think that I want to save the stage of this kind of updated interaction (so I not repeating it again)</li> <li>So, we have 3 parameters, cache contain the value of the total step that get to that stage:  <code>stage = [0], start = 0, target = 1 -&gt; step = 1</code> <code>stage = [0, 1], start = 1, target = 0 -&gt; step = 2</code> <code>stage = [0, 1], start = 0, target = 2 -&gt; step = 3</code></li> </ul> </li> <li>This is good enough:<ul> <li>A cache that storing all possible finite update</li> <li>The value that cache store being update every step that telling us how much step needed to reach that stage</li> <li>We can stop the updating if stage contain all the node</li> </ul> </li> </ul> </li> <li>By roughly though of the Algorithm, I think of this:<ul> <li>A Dijkstra -like:<ul> <li>Chose the lowest step in cache</li> <li>Update all possible next stage it can reach to</li> <li>This require us to keep trach an not repeat processing old stage </li> </ul> </li> <li>Data structure - Heap:<ul> <li>So we can easily find the min value in O(1) </li> </ul> </li> </ul> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 3 * 2 ** n)", "O(n ** 2 * 2 ** n)", "O(n * 2 ** n)", "heap", "dynamic_programing", "queue", "BFS"]}, {"location": "notes/Leetcode%20100-1000/847.%20Shortest%20Path%20Visiting%20All%20Nodes/#dijkstra-heap-cache-on-every-update", "title": "Dijkstra + Heap, cache on every update", "text": "<p><code>dynamic_programing</code></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 3 * 2 ** n)", "O(n ** 2 * 2 ** n)", "O(n * 2 ** n)", "heap", "dynamic_programing", "queue", "BFS"]}, {"location": "notes/Leetcode%20100-1000/847.%20Shortest%20Path%20Visiting%20All%20Nodes/#first-implement-separated-start-node-run", "title": "First implement - Separated start node run", "text": "<p>My first implement </p> <ul> <li>I try every started node in a separated run</li> <li>This result into a nested n loop, updating a possible <code>cache</code> size of <code>(n ** 2 * 2 ** n)</code>. Making it a worst possible <code>O(n ** 3 * 2 ** n)</code> time complexity (n just too small so I just skip <code>log n</code> time to push and pop heap, maybe it wrong though)</li> </ul> <pre><code>class Solution:\ndef shortestPathLength(self, graph: List[List[int]]) -&gt; int:\nn = len(graph)\nMAXSTAGE = (1&lt;&lt;(n))-1\ndef tryStartAt(index):\ncache = [[[-1] * n for i in range(n)] for _ in range(MAXSTAGE+1)]\nshortest = -1\nheap = []\ndef setbit(mask, pos):\nreturn mask | (1 &lt;&lt; (pos))\nheap.append((0,(setbit(0, index),index)))\nwhile len(heap) &gt; 0: \nacumulated, (stage, start) = heappop(heap)\nif stage == MAXSTAGE:\nshortest = acumulated\nbreak\nfor target in graph[start]:\nif cache[setbit(stage, target)][start][target] == -1: \nnextStage = setbit(stage, target)\ncache[nextStage][start][target] = acumulated + 1\nheappush(heap, (acumulated + 1, (nextStage, target)))\nreturn shortest\nminimum = -1\nfor i in range(n):\ncurr = tryStartAt(i)\nif minimum == -1 or minimum &gt; curr:\nminimum = curr\nreturn minimum\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 3 * 2 ** n)", "O(n ** 2 * 2 ** n)", "O(n * 2 ** n)", "heap", "dynamic_programing", "queue", "BFS"]}, {"location": "notes/Leetcode%20100-1000/847.%20Shortest%20Path%20Visiting%20All%20Nodes/#optimizing-1-all-node-at-started", "title": "Optimizing 1 - All node at started", "text": "<p><code>O(n ** 2 * 2 ** n)</code></p> <p>Instead of using a separated run, we can adding all started node directly into the <code>cache</code>, this mean we can use any other started stage to optimize the <code>cache</code> matrix</p> <ul> <li>This thus reduce the nested loop, we only need to update <code>cache</code> table with possible size <code>n ** 2 * 2 ** n</code></li> <li>Worst case will be <code>O(n ** 2 * 2 ** n)</code> (again, I skip <code>log n</code> time using on heap push, pop as n is very small)</li> </ul> <pre><code>class Solution:\ndef shortestPathLength(self, graph: List[List[int]]) -&gt; int:\nn = len(graph)\nMAXSTAGE = (1&lt;&lt;(n))-1\ncache = [[[-1] * n for i in range(n)] for _ in range(MAXSTAGE+1)]\nshortest = -1\nheap = []\ndef setbit(mask, pos):\nreturn mask | (1 &lt;&lt; (pos))\nfor index in range(n):\nheap.append((0,(setbit(0, index),index)))\nwhile len(heap) &gt; 0: \nacumulated, (stage, start) = heappop(heap)\nif stage == MAXSTAGE:\nshortest = acumulated\nbreak\nfor target in graph[start]:\nif cache[setbit(stage, target)][start][target] == -1: \nnextStage = setbit(stage, target)\ncache[nextStage][start][target] = acumulated + 1\nheappush(heap, (acumulated + 1, (nextStage, target)))\nreturn shortest\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 3 * 2 ** n)", "O(n ** 2 * 2 ** n)", "O(n * 2 ** n)", "heap", "dynamic_programing", "queue", "BFS"]}, {"location": "notes/Leetcode%20100-1000/847.%20Shortest%20Path%20Visiting%20All%20Nodes/#optimizing-2-less-cache-stage", "title": "Optimizing 2 - Less cache stage", "text": "<p><code>O(n * 2 ** n)</code></p> <p>A <code>Visited Stage, start -&gt; target</code> stage making us repeat processing to get to a same (Visited Stage, Current node).</p> <p>We not need to save <code>start</code> node in cache at all, this is because that we always have the minimum possible step using heap, making every update is the best possible total path step to reach <code>(Visited Stage, Current node)</code>.</p> <p>This mean we can drop <code>[start]</code> from <code>cache</code>, reducing possible cache size to <code>n * 2 ** n</code>. Reduce possible worst time complexity to <code>O(n * 2 ** n)</code> (again, I skip <code>log n</code> time using on heap push, pop)</p> <pre><code>class Solution:\ndef shortestPathLength(self, graph: List[List[int]]) -&gt; int:\nn = len(graph)\nMAXSTAGE = (1&lt;&lt;(n))-1\nvisited = set()\nshortest = -1\nqueue = deque()\ndef setbit(mask, pos):\nreturn mask | (1 &lt;&lt; (pos))\nfor index in range(n):\nqueue.append((0,(setbit(0, index),index)))\nwhile len(queue) &gt; 0: \nacumulated, (stage, start) = queue.popleft()\nif stage == MAXSTAGE:\nshortest = acumulated\nbreak\nfor target in graph[start]:\nif (setbit(stage, target), target) not in visited: \nnextStage = setbit(stage, target)\nvisited.add((setbit(stage, target), target))\nqueue.append((acumulated + 1, (nextStage, target)))\nreturn shortest\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 3 * 2 ** n)", "O(n ** 2 * 2 ** n)", "O(n * 2 ** n)", "heap", "dynamic_programing", "queue", "BFS"]}, {"location": "notes/Leetcode%20100-1000/847.%20Shortest%20Path%20Visiting%20All%20Nodes/#biggest-realization-bfs-queue", "title": "Biggest realization - BFS + Queue", "text": "<p><code>BFS</code></p> <ul> <li>As we always have the best accumulated on every step. This make heap isn\u2019t necessary, and can be transfer into a First in, First out Queue data structure</li> <li>Also, the Dijkstra not necessary to contain the accumulated, every visited have the best possible value (a BFS traversal on possible stage graph)</li> </ul> <p>Now this, make it a true <code>O(n * 2 ** n)</code> solution</p> <pre><code>class Solution:\ndef shortestPathLength(self, graph: List[List[int]]) -&gt; int:\nn = len(graph)\nMAXSTAGE = (1&lt;&lt;(n))-1\nvisited = set()\nshortest = -1\nqueue = deque()\ndef setbit(mask, pos):\nreturn mask | (1 &lt;&lt; (pos))\nfor index in range(n):\nqueue.append((0,(setbit(0, index),index)))\nwhile len(queue) &gt; 0: \nacumulated, (stage, start) = queue.popleft()\nif stage == MAXSTAGE:\nshortest = acumulated\nbreak\nfor target in graph[start]:\nif (setbit(stage, target), target) not in visited: \nnextStage = setbit(stage, target)\nvisited.add((setbit(stage, target), target))\nqueue.append((acumulated + 1, (nextStage, target)))\nreturn shortest\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n ** 3 * 2 ** n)", "O(n ** 2 * 2 ** n)", "O(n * 2 ** n)", "heap", "dynamic_programing", "queue", "BFS"]}, {"location": "notes/Leetcode%20100-1000/852.%20Peak%20Index%20in%20a%20Mountain%20Array/", "title": "852. Peak Index in a Mountain Array", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/852.%20Peak%20Index%20in%20a%20Mountain%20Array/#problem", "title": "Problem", "text": "<p>An array <code>arr</code> a mountain if the following properties hold:</p> <ul> <li><code>arr.length &gt;= 3</code></li> <li>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:<ul> <li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li> <li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li> </ul> </li> </ul> <p>Given a mountain array <code>arr</code>, return the index <code>i</code> such that <code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code>.</p> <p>You must solve it in <code>O(log(arr.length))</code> time complexity.</p> <p>Example 1:</p> <pre><code>**Input:** arr = [0,1,0]\n**Output:** 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>3 &lt;= arr.length &lt;= 105</code></li> <li><code>0 &lt;= arr[i] &lt;= 106</code></li> <li><code>arr</code> is guaranteed to be a mountain array.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/852.%20Peak%20Index%20in%20a%20Mountain%20Array/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/852.%20Peak%20Index%20in%20a%20Mountain%20Array/#linear", "title": "Linear", "text": "<p>Create a pointer <code>left</code> at the start and a pointer <code>right</code> at the end of the array. Loop using there:</p> <ul> <li>If <code>arr[left] &lt;= arr[right]</code>: increase Left</li> <li>else: <code>arr[left] &gt; arr[right]</code>: increase Right</li> <li>Stop when <code>left == right</code> Because we always can found <code>arr[left] &lt; arr[i] &gt; arr[right]</code>, so the function stop at <code>left == right == i</code></li> </ul> <pre><code>class Solution:\ndef peakIndexInMountainArray(self, arr: List[int]) -&gt; int:\nl, r = 0, len(arr) - 1\nwhile l != r:\nif arr[l] &lt;= arr[r]:\nl += 1\nelse:\nr -= 1\nreturn l\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/852.%20Peak%20Index%20in%20a%20Mountain%20Array/#using-binary-search-to-find-the-maximum-value-in-a-discrete-parabolic-like-array-gave-up", "title": "Using Binary Search to Find the Maximum Value in a Discrete Parabolic-Like Array (Gave up)", "text": "<p>This could possibly use in all discrete Parabolic search</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/852.%20Peak%20Index%20in%20a%20Mountain%20Array/#intuition", "title": "Intuition", "text": "<p>In a mountain array with peak index <code>i</code>, any element at <code>index</code> with <code>index</code> less than <code>i</code> would obey <code>arr[index] &lt; arr[index + 1]</code>. Furthermore, any <code>index</code> greater than or equal to <code>i</code> would follow the rule <code>arr[index] &gt; arr[index + 1]</code> (and not obey <code>arr[index] &lt; arr[index + 1]</code>).</p> <p>A scenario like this where our task is to search for an element <code>i</code> from a given range <code>(l, r)</code> where all values smaller than <code>i</code> satisfy a certain condition and all values greater than or equal to <code>i</code> do not satisfy it (or vice-versa) can be solved optimally with a binary search algorithm. In binary search, we repeatedly divide the solution space where the answer could be in half until the range contains just one element.</p> <p>Following the above discussion, we use binary search to solve this problem. We create an integer <code>l</code> and initialize it to the starting index <code>0</code>. We also create another integer variable <code>r</code> and set it to the last index of <code>arr</code>, i.e., <code>arr.length - 1</code>.</p> <p>We get the middle of the range <code>mid = (l + r) / 2</code> and compare <code>arr[mid]</code> with the next element. If <code>arr[mid] &lt; arr[mid + 1]</code>, we move to the upper half of the range by setting <code>l = mid + 1</code> as our peak index is definitely greater than <code>mid</code>. Otherwise, if <code>arr[mid] &gt; arr[mid + 1]</code>, we move to the lower half of the range by setting <code>r = mid</code> as the peak index is either <code>mid</code> or some index smaller than <code>mid</code>.</p> <p>The answer would be within the range <code>(l, r)</code> at any point. All the indices smaller than <code>l</code> are indices smaller than the peak index and all indices greater than <code>r</code> are indices greater than the peak index. We continue the search as long as <code>l &lt; r</code>.</p> <p>When <code>l == r</code>, <code>l</code> (or <code>r</code>) denotes the required peak index.</p> <p>Here is a visual representation of an example to illustrate how it works:</p> <p></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/852.%20Peak%20Index%20in%20a%20Mountain%20Array/#algorithm", "title": "Algorithm", "text": "<ol> <li>Create two integer variables <code>l</code> and <code>r</code> to store the solution space of the problem. We initialize <code>l</code> with <code>0</code> and <code>r</code> to <code>arr.length - 1</code>.</li> <li>While <code>l &lt; r</code>:<ul> <li>Get the index of the middle element using <code>mid = (l + r) / 2</code>.</li> <li>If <code>arr[mid] &lt; arr[mid + 1]</code>, it indicates peak index is greather than <code>mid</code>. As a result, we move to upper half of the range by setting <code>left = mid + 1</code>.</li> <li>Else, if <code>arr[mid] &gt;= arr[mid + 1]</code>, it indicates that the peak index is either <code>mid</code> or some index smaller than <code>mid</code>. As a result, we move to the lower half of the range by setting <code>r = mid</code>.</li> </ul> </li> <li>Return <code>l</code> (or <code>r</code> as both are equal now).</li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/852.%20Peak%20Index%20in%20a%20Mountain%20Array/#implementation", "title": "Implementation", "text": "<pre><code>class Solution:\ndef peakIndexInMountainArray(self, arr: List[int]) -&gt; int:\nl = 0\nr = len(arr)\nwhile l &lt; r:\nmid = (l + r) // 2\nif arr[mid] &lt; arr[mid + 1]:\nl = mid + 1\nelse:\nr = mid\nreturn l\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/859.%20Buddy%20Strings/", "title": "859. Buddy Strings", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/859.%20Buddy%20Strings/#problem", "title": "Problem", "text": "<p>Given two strings <code>s</code> and <code>goal</code>, return <code>true</code> if you can swap two letters in <code>s</code> so the result is equal to <code>goal</code>, otherwise, return <code>false</code>.</p> <p>Swapping letters is defined as taking two indices <code>i</code> and <code>j</code> (0-indexed) such that <code>i != j</code> and swapping the characters at <code>s[i]</code> and <code>s[j]</code>.</p> <ul> <li>For example, swapping at indices <code>0</code> and <code>2</code> in <code>\"abcd\"</code> results in <code>\"cbad\"</code>.</li> </ul> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, goal.length &lt;= 2 * 10**4</code></li> <li><code>s</code> and <code>goal</code> consist of lowercase letters.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/859.%20Buddy%20Strings/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/859.%20Buddy%20Strings/#read-the-problem", "title": "Read the problem", "text": "<ul> <li>Only one swap is allow, and we get two identical string</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/859.%20Buddy%20Strings/#analysis", "title": "Analysis", "text": "<ul> <li>The constrain is really low</li> <li>There should be two case that return <code>True</code>, which is: 1. String <code>s</code> and <code>goal</code> have no different, we swap an identical character so the string remain unchanged; 2. String <code>s</code> and <code>goal</code> have a pair <code>(x,y)</code> being swap</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/859.%20Buddy%20Strings/#code-it", "title": "Code it", "text": "<ul> <li>Just a regular loop through all character of <code>pair(s, goal)</code> check to find if there is any different character. Storing their position in <code>diff</code> array</li> <li>If <code>len(s) &gt; len(goal)</code> or <code>len(diff) != 0 and len(diff) != 2</code> then we can just return <code>False</code></li> <li>For case 1. <code>len(diff) == 0</code> we can loop through string <code>s</code> and find if any character is repeat (using <code>set()</code> to keep track which char have show up). Return <code>True</code> if found or <code>False</code> if not</li> <li>For case 2. <code>len(diff) == 2</code> we can quick check if swapping 2 character with position <code>diff[0], diff[1]</code> of either <code>s</code> or <code>goal</code> is equal to the other one or not: Using <code>s[diff[1]] == goal[diff[0]] and s[diff[0]] == goal[diff[1]]</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/859.%20Buddy%20Strings/#implement", "title": "Implement", "text": "<pre><code>class Solution:\ndef buddyStrings(self, s: str, goal: str) -&gt; bool:\n# Find different of s and goal\nif len(s) != len(goal):\nreturn False\ndiff = []\nfor i, (x, y) in enumerate(zip(s, goal)):\nif x != y:\ndiff.append(i)\nif len(diff) != 0 and len(diff) != 2:\nreturn False\nif len(diff) == 2:\nreturn s[diff[1]] == goal[diff[0]] and s[diff[0]] == goal[diff[1]]\ncheck = set()\nfor c in s:\nif c not in check:\ncheck.add(c)\nelse:\nreturn True\nreturn False\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/894.%20All%20Possible%20Full%20Binary%20Trees/", "title": "894. All Possible Full Binary Trees", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/894.%20All%20Possible%20Full%20Binary%20Trees/#problem", "title": "Problem", "text": "<p>Given an integer <code>n</code>, return a list of all possible full binary trees with <code>n</code> nodes. Each node of each tree in the answer must have <code>Node.val == 0</code>.</p> <p>Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.</p> <p>A full binary tree is a binary tree where each node has exactly <code>0</code> or <code>2</code> children.</p> <p>Example 1:</p> <p></p> <pre><code>**Input:** n = 7\n**Output:** [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0|0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 20</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/894.%20All%20Possible%20Full%20Binary%20Trees/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/894.%20All%20Possible%20Full%20Binary%20Trees/#over-complicating-simulation-approach", "title": "Over complicating simulation approach", "text": "<p>hash </p> <p>There isn\u2019t any thing said we could reused the tree node, which I mean all <code>TreeNode</code> object from Root A should be different from Root B . We assuming that this No reused rule is required.</p> <p>We try to build up all solution from bottom:</p> <ul> <li>If <code>n</code> is even (<code>n % 2 == 0</code>), there are no possible full binary trees since we always need to have an odd number of nodes to form a full binary tree.</li> <li>If <code>n</code> is 1, there is only one possible full binary tree with a single node having a value of 0.</li> </ul> <p>For any odd <code>n = 2x + 1</code>, where <code>x</code> is an integer, we can generate the full binary trees from the previous <code>n - 2 = 2x - 1</code> trees. We use the following building blocks:</p> <ul> <li><code>self.roots</code>: We keep track of an array of roots math have previous <code>n-2</code> nodes, which starting with a tree containing a single node with value 0 when <code>n = 1</code>.</li> <li><code>self.leafs</code>: We also keep track of all leaf nodes in each tree of <code>self.roots</code> array. The purpose of this is to quickly add new nodes directly to the leaf nodes instead of looping through all the nodes to find the leaf nodes.</li> </ul> <p>In the implementation, I using <code>tuple</code> to store both of <code>self.roots</code> and <code>self.leafs</code> in one array <code>self.roots</code> </p> <p>We then follow these steps to build the trees:</p> <ol> <li>We start with <code>n = 1</code>, and initialize <code>self.roots</code> with a tree containing a single node with value 0. Also, we initialize <code>self.leafs[root] = [&lt;all leaf nodes of the root tree&gt;]</code>.</li> <li>For any <code>n = 2x + 1</code> (where <code>n = 3, 5, 7, ...</code>), we try to generate new trees from the previous <code>n - 2</code> trees. To do this efficiently:<ol> <li>We loop through each <code>curr_root</code> root tree in <code>self.roots</code> and their corresponded <code>self.leafs</code></li> <li>(Step 2) Add two leaf nodes to any of this root leaf.</li> <li>Use the <code>copyTree</code> function to create a copy of the all tree and then revert the change from step 2. </li> <li>We then hash the new tree using the <code>hashNode</code> function to check for any collision with previously generated trees.</li> <li>If there is no collision (the hash is not in <code>visited</code>), we add the new tree to the <code>result</code> list along with its leaf nodes.</li> <li>Update our <code>self.roots</code> to new <code>result</code></li> </ol> </li> <li>We continue this process until we reach <code>n</code>. Finally, we return the generated trees in <code>self.roots</code></li> </ol> <p>The simulation-based approach works, but it is unnecessarily complex and slow due to the copying of trees and hash computations.</p> <pre><code>class Solution:\ndef hashNode(self, root, index = 1):\nif root is None:\nreturn 0\nresult = index &lt;&lt; 5 + index\nif root.left:\nresult += self.hashNode(root.left, 2*index)\nif root.right:\nresult += self.hashNode(root.right, 2*index + 1)\nreturn result\ndef copyTree(self, source):\nresult = None\nleafs = []\nresult = TreeNode(source.val)\nif source.left:\nresult.left, leafsLeft = self.copyTree(source.left)\nleafs += leafsLeft\nif source.right:\nresult.right, leafsRight = self.copyTree(source.right)\nleafs += leafsRight\nif source.left is None and source.right is None:\nleafs.append(result)\nreturn result, leafs\ndef addLeaf(self):\nresult = []\nvisited = set()\nfor root, leafs in self.roots:\nfor leaf in leafs[::-1]:\nleaf.left = TreeNode(0)\nleaf.right = TreeNode(0)\nnew_root, new_leafs = self.copyTree(root)\nhashN = self.hashNode(new_root)\nif hashN not in visited:\nresult.append((new_root, new_leafs))\nvisited.add(hashN)\nleaf.left = None\nleaf.right = None\nreturn result\ndef allPossibleFBT(self, n: int) -&gt; List[Optional[TreeNode]]:\nif n%2 == 0:\nreturn []\nself.roots = []\nfor i in range(1, n+1, 2):\ntmp = []\nif i == 1:\nroot = TreeNode(0)\ntmp = [(root, [root])]\nself.roots = tmp\ncontinue\ntmp = self.addLeaf()\nself.roots = tmp\nreturn [root for root, _ in self.roots]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/894.%20All%20Possible%20Full%20Binary%20Trees/#minimal", "title": "Minimal", "text": "<p>The simulation approach can be greatly simplified using dynamic programming and memorization to avoid redundant computations.</p> <p>We use the following steps to find all possible full binary trees with <code>n</code> nodes:</p> <ol> <li>If <code>n</code> is even (<code>n % 2 == 0</code>), there are no possible full binary trees, so we return an empty list.</li> <li>If <code>n</code> is 1, there is only one possible full binary tree with a single node having a value of 0. We return this tree as a list containing a single node.</li> <li>For any odd <code>n = 2x + 1</code> (where <code>x</code> is an integer), we recursively find all possible full binary trees for each possible left subtree with nodes <code>i</code> (where <code>i</code> ranges from 1 to <code>n - 1</code> with a step of 2), and the right subtree with nodes <code>n - i - 1</code>. We then combine these left and right subtrees with a root having a value of 0, and add them to the result list.</li> <li>We use memorization to store the results of subproblems in the <code>cache</code> dictionary to avoid redundant computations.</li> </ol> <p>The minimal approach is much more efficient and straightforward, and it accurately finds all possible full binary trees with <code>n</code> nodes, each having a root node with a value of 0. It returns the final list of trees in any order.</p> <pre><code>class Solution:\ndef allPossibleFBT(self, n: int, cache = None) -&gt; List[TreeNode]:\nif cache is None:\ncache = {}\nif n in cache:\nreturn cache[n]\nif n % 2 == 0:\nreturn []\nif n == 1:\ncache[n] = [TreeNode()]\nreturn [TreeNode()]\nres = []\nfor i in range(1, n, 2):\nleft = self.allPossibleFBT(i, cache)\nright = self.allPossibleFBT(n - i - 1, cache)\nfor l in left:\nfor r in right:\nroot = TreeNode(0, l, r)\nres.append(root)\ncache[n] = res\nreturn res\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%20100-1000/905.%20Sort%20Array%20By%20Parity/", "title": "905. Sort Array By Parity", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/905.%20Sort%20Array%20By%20Parity/#problem", "title": "Problem", "text": "<p>Given an integer array <code>nums</code>, move all the even integers at the beginning of the array followed by all the odd integers.</p> <p>Return any array that satisfies this condition.</p> <p>Example 1:</p> <p>Input: nums = [3,1,2,4] Output: [2,4,3,1] Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.</p> <p>Example 2:</p> <p>Input: nums = [0] Output: [0]</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>0 &lt;= nums[i] &lt;= 5000</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/905.%20Sort%20Array%20By%20Parity/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "go", "O(n)"]}, {"location": "notes/Leetcode%20100-1000/905.%20Sort%20Array%20By%20Parity/#quick-sort-like-partitioning-oddeven-or-two-pointer", "title": "Quick sort like partitioning odd/even - Or Two pointer", "text": "<p><code>O(n)</code></p> <p>Start left and right, swap every odd/ even found until left &gt; right Implement in both Python and Go.</p> Time Submitted Status Runtime Memory Language 09/28/2023 18:24 Accepted 9 ms 4.8 MB golang 09/28/2023 18:21 Accepted 81 ms 17 MB python3 <pre><code>class Solution:\ndef sortArrayByParity(self, nums: List[int]) -&gt; List[int]:\nl = 0\nr = len(nums)-1\nwhile l &lt; r:\nwhile nums[l] % 2 == 0 and l &lt; r:\nl = l + 1\nwhile nums[r] % 2 == 1 and l &lt; r:\nr = r - 1\nif l &lt; r:\nnums[l], nums[r] = nums[r], nums[l]\nl = l + 1\nr = r - 1\nreturn nums\n</code></pre> <pre><code>func sortArrayByParity(nums []int) []int {\nl := 0\nr := len(nums)-1\nfor l &lt; r {\nfor nums[l] % 2 == 0 &amp;&amp; l &lt; r {\nl = l + 1\n}\nfor nums[r] % 2 == 1 &amp;&amp; l &lt; r {\nr = r - 1\n}\nif l &lt; r {\nnums[l], nums[r] = nums[r], nums[l]\n}\nl = l + 1\nr = r - 1\n}\nreturn nums\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "go", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1125.%20Smallest%20Sufficient%20Team/", "title": "1125. Smallest Sufficient Team", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1125.%20Smallest%20Sufficient%20Team/#problem", "title": "Problem", "text": "<p>In a project, you have a list of required skills <code>req_skills</code>, and a list of people. The <code>ith</code> person <code>people[i]</code> contains a list of skills that the person has.</p> <p>Consider a sufficient team: a set of people such that for every required skill in <code>req_skills</code>, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.</p> <ul> <li>For example, <code>team = [0, 1, 3]</code> represents the people with skills <code>people[0]</code>, <code>people[1]</code>, and <code>people[3]</code>.</li> </ul> <p>Return any sufficient team of the smallest possible size, represented by the index of each person. You may return the answer in any order.</p> <p>It is guaranteed an answer exists.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= req_skills.length &lt;= 16</code></li> <li><code>1 &lt;= req_skills[i].length &lt;= 16</code></li> <li><code>req_skills[i]</code> consists of lowercase English letters.</li> <li>All the strings of <code>req_skills</code> are unique.</li> <li><code>1 &lt;= people.length &lt;= 60</code></li> <li><code>0 &lt;= people[i].length &lt;= 16</code></li> <li><code>1 &lt;= people[i][j].length &lt;= 16</code></li> <li><code>people[i][j]</code> consists of lowercase English letters.</li> <li>All the strings of <code>people[i]</code> are unique.</li> <li>Every skill in <code>people[i]</code> is a skill in <code>req_skills</code>.</li> <li>It is guaranteed a sufficient team exists.</li> </ul> <p>Example 1:</p> <pre><code>**Input:** req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"|\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]\n**Output:** [0,2]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1125.%20Smallest%20Sufficient%20Team/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1125.%20Smallest%20Sufficient%20Team/#input-handling", "title": "Input handling", "text": "<p>With the provided constrain for input, we can turn input to it\u2019s bit representation. <pre><code>class Solution:\ndef smallestSufficientTeam(self, req_skills: List[str], people: List[List[str]]) -&gt; List[int]:\nwords_dictinary = req_skills.copy()\nwords_dictinary.sort()\nnumber_representation = []\nfor p in people:\ncraft_number = 0\nfor skill in p:\nwords_index = bisect_right(words_dictinary, skill) - 1\ncraft_number += 1 &lt;&lt; words_index\nnumber_representation.append(craft_number)\n</code></pre></p> <p>I debug above code using these to make sure it done right: <pre><code>print (words_dictinary)\nfor i in number_representation:\nprint (bin(i + (1 &lt;&lt; len(words_dictinary)))[3:] )\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1125.%20Smallest%20Sufficient%20Team/#first-commit-brute-force", "title": "First commit: Brute force", "text": "<p>We try all possible combination way of choosing people. Which start from <code>000..00 -&gt; 1111..11</code> (bit length equal total people)</p> <ul> <li>Every <code>1</code> bit mean we choosing the people in that bit index to the team (which we create a helper function to loop through  <code>bit_1_pos</code>)</li> <li>To check our choosing team is sufficient, We can use or operator <code>|</code> on all skill of chosen people <code>number_representation[index]</code>. If final result return <code>111..11</code> on all <code>req_skills</code> skill (bit length equal total required skill).</li> </ul> <p>Why? Because we only need one people in the team have the correspond <code>req_skills</code>, which equivalent to <code>or operation</code>,</p> <ul> <li>Using utility function <code>bit_count</code> to keep track of how many <code>1</code> bit in the number to help checking/ backtracking worse solution (any total team with is have higher people). Final code:</li> </ul> <p>Here is where I realize read the question wrong, my first thought is that <code>len(people) &lt; 2**16</code>, which make me thing for loop <code>2**16</code> is a good ideal. This code bellow is trash with possible <code>2**60</code> case</p> <pre><code>class Solution:\ndef bit_1_pos(self, number):\nfor pos, c in enumerate`-1]`:\nif c == '1':\nyield pos\ndef smallestSufficientTeam(self, req_skills: List[str], people: List[List[str]]) -&gt; List[int]:\nwords_dictinary = req_skills.copy()\nwords_dictinary.sort()\nnumber_representation = []\nfor p in people:\ncraft_number = 0\nfor skill in p:\nwords_index = bisect_right(words_dictinary, skill) - 1\ncraft_number += 1 &lt;&lt; words_index\nnumber_representation.append(craft_number)\nstart = 0\nlast = (1&lt;&lt;len(people)) -1\nbest = last\nfor possible_combination in range(start, last):\nis_sufficient = 0\nif possible_combination.bit_count() &gt; best.bit_count():\ncontinue\nfor index in self.bit_1_pos(possible_combination):\nis_sufficient = is_sufficient | number_representation[index] # or operation\nif is_sufficient.bit_count() == len(words_dictinary):\nbest = possible_combination\nreturn [i for i in self.bit_1_pos(best)]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1125.%20Smallest%20Sufficient%20Team/#update-the-backtracking", "title": "Update the backtracking", "text": "<ul> <li><code>possible_combination &lt;= 2**60</code> , which is too large. So I implement a queue to keep the track going on the right direction. Where at least a new skill in push into team with each people added. </li> </ul> Time Submitted Status Runtime Memory Language 07/16/2023 21:02 Time Limit Exceeded N/A N/A python3 <pre><code>class Solution:\ndef bit_1_pos(self, number):\nfor pos, c in enumerate`-1]`:\nif c == '1':\nyield pos\ndef smallestSufficientTeam(self, req_skills: List[str], people: List[List[str]]) -&gt; List[int]:\nwords_dictinary = req_skills.copy()\nwords_dictinary.sort()\nnumber_representation = []\nfor p in people:\ncraft_number = 0\nfor skill in p:\nwords_index = bisect_right(words_dictinary, skill) - 1\ncraft_number += 1 &lt;&lt; words_index\nnumber_representation.append(craft_number)\nstart = 0\nlast = (1 &lt;&lt; len(people)) - 1\nbest = last\nqueue = [(start, 0)]\nvisited = set()\nwhile len(queue) &gt; 0:\npossible_combination, is_sufficient = queue.pop(0)\nvisited.add(possible_combination)\nif possible_combination.bit_count() &gt; best.bit_count():\ncontinue\nif is_sufficient.bit_count() == len(words_dictinary):\nbest = possible_combination\nbreak\nfor index in range(len(people)):\nteam_skill = is_sufficient | number_representation[index]\nif team_skill == is_sufficient:\ncontinue\nteam_member = possible_combination | (1 &lt;&lt; index)\nif team_member in visited:\ncontinue\nvisited.add(team_member)\nqueue.append((team_member, team_skill))\nreturn [i for i in self.bit_1_pos(best)]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1125.%20Smallest%20Sufficient%20Team/#yank-dynamic-programing", "title": "(Yank) Dynamic programing", "text": "<pre><code>class Solution:\ndef smallestSufficientTeam(self, req_skills: List[str],\npeople: List[List[str]]) -&gt; List[int]:\nn = len(people)\nm = len(req_skills)\nskill_id = dict()\nfor i, skill in enumerate(req_skills):\nskill_id[skill] = i\nskills_mask_of_person = [0] * n\nfor i in range(n):\nfor skill in people[i]:\nskills_mask_of_person[i] |= 1 &lt;&lt; skill_id[skill]\ndp = [(1 &lt;&lt; n) - 1] * (1 &lt;&lt; m)\ndp[0] = 0\nfor skills_mask in range(1, 1 &lt;&lt; m):\nfor i in range(n):\nsmaller_skills_mask = skills_mask &amp; ~skills_mask_of_person[i]\nif smaller_skills_mask != skills_mask:\npeople_mask = dp[smaller_skills_mask] | (1 &lt;&lt; i)\nif people_mask.bit_count() &lt; dp[skills_mask].bit_count():\ndp[skills_mask] = people_mask\nanswer_mask = dp[(1 &lt;&lt; m) - 1]\nans = []\nfor i in range(n):\nif (answer_mask &gt;&gt; i) &amp; 1:\nans.append(i)\nreturn ans\n</code></pre> <p>Bit mark, understandable, <code>skills_mask_of_person</code> is the same as <code>number_representation</code> representation of my previous approach. While to use Dynamic programing, here should be the explanation:</p> <ul> <li>start an array <code>dp</code> with a length of <code>2**len(req_skill)</code> and default value <code>2**len(people) - 1</code>. Which answer question given a needed set <code>req_skill</code> in binary representation, how to chose the minimal teem people possible, also in in binary representation. The worst default oblivious that choosing all people. </li> <li><code>dp[0]</code> = 0, so no one needed to if there is no <code>req_skill</code>.</li> <li>With every possible combination require <code>skills_mask</code> set of skill start from <code>000..00</code> to <code>111..11</code> (length of require skill with the maximum of <code>2**16</code>), update current <code>skills_mask</code> set <code>dp</code> by trying with each person (range from <code>[0..n]</code>):<ul> <li>find a <code>previous_skills_mask</code> that when adding <code>person[i]</code> skill set (which mean adding <code>skills_mask_of_person[i]</code> to  <code>previous_skills_mask</code> we can qualify all skill in <code>skill_masks</code>)</li> <li>after that, try update <code>dp[skill_masks] = dp[previous_skills_mask] add person[i]</code> if it a better team (with lower people) <pre><code>        dp = [(1 &lt;&lt; n) - 1] * (1 &lt;&lt; m)\ndp[0] = 0\nfor skills_mask in range(1, 1 &lt;&lt; m):\nfor i in range(n):\nsmaller_skills_mask = skills_mask &amp; ~skills_mask_of_person[i]\nif smaller_skills_mask != skills_mask:\npeople_mask = dp[smaller_skills_mask] | (1 &lt;&lt; i)\nif people_mask.bit_count() &lt; dp[skills_mask].bit_count():\ndp[skills_mask] = people_mask\nanswer_mask = dp[(1 &lt;&lt; m) - 1]\nans = []\nfor i in range(n):\nif (answer_mask &gt;&gt; i) &amp; 1:\nans.append(i)\n</code></pre></li> </ul> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1125.%20Smallest%20Sufficient%20Team/#update-to-dynamic-programing", "title": "Update to Dynamic programing", "text": "<p>Knowing the ideal, here is my re implementation using similar <code>dp</code> approach. Which on my first try isn\u2019t that fast, because of the commended for loop shown here </p> <pre><code>        for needed_skills, curr_best in enumerate(best_team):\nfor index, skill_set in enumerate(number_representation):\n# team_knowed_skill_set = needed_skills\n# for pos in self.bit_1_pos(skill_set):\n#    team_knowed_skill_set = team_knowed_skill_set &amp; ~(1 &lt;&lt; pos)\nteam_knowed_skill_set = needed_skills &amp; ~skill_set\n</code></pre> Time Submitted Status Runtime Memory Language Agro 07/16/2023 12:50 Accepted 8519 ms 18.8 MB python3 Unoptimal 07/16/2023 21:37 Accepted 1650 ms 18.9 MB python3 Remove the for loop <pre><code>class Solution:\ndef bit_1_pos(self, number):\nfor pos, c in enumerate`-1]`:\nif c == '1':\nyield pos\ndef smallestSufficientTeam(self, req_skills: List[str], people: List[List[str]]) -&gt; List[int]:\nwords_dictinary = req_skills.copy()\nwords_dictinary.sort()\nnumber_representation = []\nfor p in people:\ncraft_number = 0\nfor skill in p:\nwords_index = bisect_right(words_dictinary, skill) - 1\ncraft_number += 1 &lt;&lt; words_index\nnumber_representation.append(craft_number)\nall_people = (1&lt;&lt;len(people)) -1\nbest_team = [all_people] * (1 &lt;&lt; len(req_skills))\nbest_team[0] = 0\nfor needed_skills, curr_best in enumerate(best_team):\nfor index, skill_set in enumerate(number_representation):\nteam_knowed_skill_set = needed_skills &amp; ~skill_set\nknowed_best_team = best_team[team_knowed_skill_set]\nif best_team[needed_skills].bit_count() &gt; knowed_best_team.bit_count() +1:\nbest_team[needed_skills] = knowed_best_team | (1 &lt;&lt; index)\nreturn [i for i in self.bit_1_pos(best_team[-1])]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1125.%20Smallest%20Sufficient%20Team/#best-greedy-all-the-way-from-top", "title": "Best. Greedy all the way from top", "text": "<p>This is a very clear code with showing exactly the intention from code alone.</p> <ul> <li>Each time you want to choosing a people. Choose all have the most rare skill and push them in to <code>queue</code>, keeping track of <code>remaining skill</code> and <code>curr_group</code></li> <li>Overall a nice implementation of a BFS with a set of wise define rule.</li> </ul> <pre><code>class Solution:\ndef smallestSufficientTeam(self, req_skills: List[str], people: List[List[str]]) -&gt; List[int]:\nskill_possessor_lookup = [set() for _ in req_skills]\nskill_ID_lookup = {skill: pos for pos, skill in enumerate(req_skills)}\nfor person_id, person in enumerate(people):\nfor skill in person:\nskill_ID = skill_ID_lookup[skill]\nskill_possessor_lookup[skill_ID].add(person_id)\nqueue = deque([(skill_possessor_lookup, [])])\nwhile queue:\ntop_skills, curr_group = queue.popleft()\nrarest_skill_possessors = min(top_skills, key=len)\nfor person_id in rarest_skill_possessors:\nremaining_skills = [possessor for possessor in top_skills if person_id not in possessor]\nif not remaining_skills:\nreturn curr_group + [person_id]\nqueue.append((remaining_skills, curr_group + [person_id]))\n</code></pre> <p>Here is my implementation it again. Here is some take away:</p> <ul> <li>In our first try of burst force backtracking, we only find person that provide some thing to the team (adding at least one more skill). This isn\u2019t enough as we still need to go through many cases.</li> <li>This is where the rarest skill is introduce, adding another this layer of backtrack/greedy. Minimizing the multiple of branch that we need to check on each loop. </li> <li>This implementation showing that a powerful backtracking give a lot of credit on performance of the code.</li> </ul> <pre><code>class Solution:\ndef find_rarest_skill(self, candidates, skill_set, not_needed_skill):\nskill_talent = {}\nfor candidate in candidates:\nfor skill in skill_set[candidate]:\nif skill not in skill_talent:\nskill_talent[skill] = set()\nskill_talent[skill].add(candidate)\nrarest_skill = None\nfor skill in skill_talent:\nif skill in not_needed_skill:\ncontinue\nif rarest_skill is None:\nrarest_skill = skill\nelif len(skill_talent[rarest_skill]) &gt; len(skill_talent[skill]):\nrarest_skill = skill\nreturn rarest_skill, skill_talent[rarest_skill]\ndef smallestSufficientTeam(self, req_skills: List[str],\npeople: List[List[str]]) -&gt; List[int]:\nqueue = [(set(range(len(people))), set())]\nwhile queue:\navailable_people, current_team_skill = queue.pop(0)\nif available_people is None:\nreturn [i for i in len(people)]\nif len(current_team_skill) == len(req_skills):\nreturn list(set(range(len(people))).difference(available_people))\n_, talented_peoples = self.find_rarest_skill(\navailable_people, people, current_team_skill)\nfor candidate in talented_peoples:\nteam_skill = current_team_skill.union(set(people[candidate]))\nremain_people = available_people.copy().remove(candidate)\nqueue.append((remain_people, team_skill))\nif len(team_skill) == len(req_skills):\nqueue = [queue[-1]]\nbreak\nreturn [i for i in len(people)]\n</code></pre> <p>Reimplement my Backtracking code again. Here I not try to find a rarest skill, just chose a not found skill (sub optimal). The final result is way greater nonetheless even comparing to Dynamic programming option </p> Time Submitted Status Runtime Memory Language Argo 07/16/2023 23:06 Accepted 200 ms 23.3 MB python3 Rewirte Backtrack 07/16/2023 20:38 Accepted 61 ms 16.6 MB python3 Rewrite queue <pre><code>class Solution:\ndef bit_1_pos(self, number):\nfor pos, c in enumerate`-1]`:\nif c == '1':\nyield pos\ndef needed_skill(self, number):\ntmp = number\npos = 0\nwhile tmp != 0:\nif tmp % 2 == 1:\ntmp = tmp // 2\npos += 1\nelse:\nbreak\nreturn pos\ndef smallestSufficientTeam(self, req_skills: List[str],\npeople: List[List[str]]) -&gt; List[int]:\nwords_dictinary = req_skills.copy()\nwords_dictinary.sort()\nnumber_representation = []\nfor p in people:\ncraft_number = 0\nfor skill in p:\nwords_index = bisect_right(words_dictinary, skill) - 1\ncraft_number += 1 &lt;&lt; words_index\nnumber_representation.append(craft_number)\nstart = 0\nlast = (1 &lt;&lt; len(people)) - 1\nbest = last\nqueue = [(start, 0)]\nvisited = set()\nwhile len(queue) &gt; 0:\npossible_combination, is_sufficient = queue.pop(0)\nvisited.add(possible_combination)\nif possible_combination.bit_count() &gt; best.bit_count():\ncontinue\nif is_sufficient.bit_count() == len(words_dictinary):\nbest = possible_combination\nbreak\nneeded_skill = self.needed_skill(is_sufficient)\nfor index in range(len(people)):\nif (number_representation[index] &gt;&gt; needed_skill) % 2 == 0:\ncontinue\nteam_skill = is_sufficient | number_representation[index]\nif team_skill == is_sufficient:\ncontinue\nteam_member = possible_combination | (1 &lt;&lt; index)\nif team_member in visited:\ncontinue\nvisited.add(team_member)\nqueue.append((team_member, team_skill))\nreturn [i for i in self.bit_1_pos(best)]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1143.%20Longest%20Common%20Subsequence/", "title": "1143. Longest Common Subsequence", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1143.%20Longest%20Common%20Subsequence/#problem", "title": "Problem", "text": "<p>Given two strings <code>text1</code> and <code>text2</code>, return the length of their longest common subsequence. If there is no common subsequence, return <code>0</code>.</p> <p>A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p> <ul> <li>For example, <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code>.</li> </ul> <p>A common subsequence of two strings is a subsequence that is common to both strings.</p> <p>Example 1:</p> <p>Input: <code>text1 = \"abcde\", text2 = \"ace\"</code> Output: <code>3</code> Explanation: <code>The longest common subsequence is \"ace\" and its length is 3.</code></p> <p>Example 2:</p> <p>Input: <code>text1 = \"abc\", text2 = \"abc\"</code> Output: <code>3</code> Explanation: <code>The longest common subsequence is \"abc\" and its length is 3.</code></p> <p>Example 3:</p> <p>Input: <code>text1 = \"abc\", text2 = \"def\"</code> Output: <code>0</code> Explanation: <code>There is no such common subsequence, so the result is 0.</code></p> <p>Constraints:</p> <ul> <li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li> <li><code>text1</code> and <code>text2</code> consist of only lowercase English characters.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1143.%20Longest%20Common%20Subsequence/#solve", "title": "Solve", "text": "<p>A dynamic program problem, which leverage the information of pre-solve value</p> <pre><code>class Solution:\ndef longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\ndp = [[0]*len(text2) for _ in text1]\nfor i, c1 in enumerate(text1):\nfor j, c2 in enumerate(text2):\npossible_answer = []\nif i &gt; 0:\npossible_answer.append(dp[i-1][j])\nif j &gt; 0:\npossible_answer.append(dp[i][j-1])\nif c1 == c2:\nif i &gt; 0 and j &gt; 0:\npossible_answer.append(dp[i-1][j-1] + 1)\nelse:\npossible_answer.append(1)\nif len(possible_answer) &gt; 0:\ndp[i][j] = max(possible_answer)\nreturn dp[len(text1)-1][len(text2)-1]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1326.%20Minimum%20Number%20of%20Taps%20to%20Open%20to%20Water%20a%20Garden/", "title": "1326. Minimum Number of Taps to Open to Water a Garden", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1326.%20Minimum%20Number%20of%20Taps%20to%20Open%20to%20Water%20a%20Garden/#problem", "title": "Problem", "text": "<p>There is a one-dimensional garden on the x-axis. The garden starts at the point <code>0</code> and ends at the point <code>n</code>. (i.e The length of the garden is <code>n</code>).</p> <p>There are <code>n + 1</code> taps located at points <code>[0, 1, ..., n]</code> in the garden.</p> <p>Given an integer <code>n</code> and an integer array <code>ranges</code> of length <code>n + 1</code> where <code>ranges[i]</code> (0-indexed) means the <code>i-th</code> tap can water the area <code>[i - ranges[i], i + ranges[i]]</code> if it was open.</p> <p>Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.</p> <p>Example 1:</p> <p></p> <p>Input: n = 5, ranges = [3,4,1,1,0,0] Output: 1 Explanation: The tap at point 0 can cover the interval [-3,3] The tap at point 1 can cover the interval [-3,5] The tap at point 2 can cover the interval [1,3] The tap at point 3 can cover the interval [2,4] The tap at point 4 can cover the interval [4,4] The tap at point 5 can cover the interval [5,5] Opening Only the second tap will water the whole garden [0,5]</p> <p>Example 2:</p> <p>Input: n = 3, ranges = [0,0,0,0] Output: -1 Explanation: Even if you activate all the four taps you cannot water the whole garden.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10 ** 4</code></li> <li><code>ranges.length == n + 1</code></li> <li><code>0 &lt;= ranges[i] &lt;= 100</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1326.%20Minimum%20Number%20of%20Taps%20to%20Open%20to%20Water%20a%20Garden/#solve", "title": "Solve", "text": "<ul> <li>We can greedy choosing the best possible tap every step (which covered the most range possible)</li> <li>This can be done quickly by sorting the range being covered</li> <li>We start from the lowest start of range, as it sorted, we can\u2019t going back to covered that range any more, so every time, we want to chose the best of the current start range<ul> <li>If we can\u2019t find any, we can return <code>-1</code> , as we need the range to be fully covered</li> <li>If we can find any:<ul> <li>Adding it to possible queue <code>q</code></li> <li>Keep running until start of range go our of scope.</li> <li>Get the max end of range in our <code>q</code>.</li> </ul> </li> </ul> </li> <li>Update the current end as our new start point.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1326.%20Minimum%20Number%20of%20Taps%20to%20Open%20to%20Water%20a%20Garden/#sorted-preprocessing-data-chose-the-best-one", "title": "Sorted - preprocessing data - chose the best one.", "text": "<p><code>O(n log n)</code></p> <pre><code>class Solution:\ndef minTaps(self, n: int, ranges: List[int]) -&gt; int:\ncovered = [ (max(0, pos - rang) , pos + rang) for pos, rang in enumerate(ranges)]\ndef sortKey(x):\nreturn -x[1]\ncovered.sort(key = sortKey)\ndef sortKey(x):\nreturn x[0]\ncovered.sort(key = sortKey)\ncurr = None\ntotal = 0\nq = []\nfor i, j in covered:\nif curr is None:\ncurr = j\ntotal += 1\ncontinue\nif curr &lt; j and curr &gt;= i:\nq.append(j)\ncontinue\nif len(q) == 0:\nreturn -1\ncurr = max(q)\ntotal += 1\nq = []\nif len(q) &gt; 0:\ntotal += 1\nreturn total\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1326.%20Minimum%20Number%20of%20Taps%20to%20Open%20to%20Water%20a%20Garden/#problem_1", "title": "Problem:", "text": "<ol> <li> <p>Coverage range</p> <ul> <li>What I skip (from the problem) is that: The water coverage of each tap is on the tile, while the position of the tap, is the middle, which mean <code>0</code> will not covering anything (While <code>1</code> will cover 2 tiles).</li> <li>Still, as I representing <code>covered</code> range as <code>(max(0, pos - rang) , pos + rang)</code>, we can just not including <code>pos + rang</code> in the ranges, this will work wonder</li> </ul> </li> <li> <p>Not handle the finishing range well:</p> <ul> <li>Only n is needed, which mean, if the covered range is <code>curr &gt; n</code>, we can return the total, instead of keep looping.</li> <li>This can also be fixed if we create a max cap for covered range, by adding <code>min(pos + rang, n)</code> instead of just <code>pos + rang</code></li> </ul> </li> <li> <p>Adding the current tap to queue, right after choosing tap. As I only use <code>q = []</code>, the current tap isn\u2019t being processed. <code>q.append(j)</code> </p> </li> <li> <p>Adding more skip:</p> <ul> <li>If covered range <code>curr</code> is already covered the current tap, <code>curr &gt;= j</code> , we can skip over the tap, this also make the choosing next tap <code>curr = max(q)</code> less bug</li> <li>This also mean adding condition the current tap <code>if (curr &lt; j): q.append(j)</code> from (3)</li> </ul> </li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1326.%20Minimum%20Number%20of%20Taps%20to%20Open%20to%20Water%20a%20Garden/#final-implementation", "title": "Final implementation", "text": "Time Submitted Status Runtime Memory Language 08/31/2023 10:02 Accepted 117 ms 18.2 MB python3 <pre><code>class Solution:\ndef minTaps(self, n: int, ranges: List[int]) -&gt; int:\ncovered = [ (max(0, pos - rang) , min(pos + rang, n)) for pos, rang in enumerate(ranges)]\n# print(covered)\ndef sortKey(x):\nreturn -x[1]\ncovered.sort(key = sortKey)\ndef sortKey(x):\nreturn x[0]\ncovered.sort(key = sortKey)\n# print(covered)\ncurr = None\ntotal = 0\nq = []\nfor i, j in covered:\n# print(curr, i, j, q)\nif curr is None:\ncurr = j\ntotal += 1\ncontinue\nif curr &gt;= j:\ncontinue\nif curr &lt; j and curr &gt;= i:\nq.append(j)\ncontinue\nif len(q) == 0:\nreturn -1\ncurr = max(q)\ntotal += 1\nq = []\nif (curr &lt; j):\nq.append(j)\nif len(q) &gt; 0:\ntotal += 1\nreturn total\n</code></pre> <p>Time complexity: O(n log n)</p> <ul> <li>Sorted covered range, make it O(n log n)</li> <li>There is 2 loop, first loop is O(n)</li> <li>The second, is max(q) is independent with the first loop, cost O(n)</li> </ul> <p>We can reduce the need to call max(q), to reducing even more space needed. But this also mean we want a better way to store covered, which already cost O(n) space.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1326.%20Minimum%20Number%20of%20Taps%20to%20Open%20to%20Water%20a%20Garden/#optimizing-no-more-sort", "title": "Optimizing - No more sort", "text": "<p><code>O(n)</code></p> <p>I used the same input processing as the Solve that Leetcode done, this way, I can reduce the need of sorting the covered range.</p> Time Submitted Status Runtime Memory Language 08/31/2023 12:16 Accepted 121 ms 17 MB python3 <pre><code>class Solution:\ndef minTaps(self, n: int, ranges: List[int]) -&gt; int:\ncovered = [-1] * (n + 1)\nfor i, r in enumerate(ranges):\ncovered[max(0, i - r)] = min(n, i + r)\ncurr = None\ntotal = 0\nq = []\nfor i, j in enumerate(covered):\n# print(curr, i, j, q)\nif curr is None:\ncurr = j\ntotal += 1\ncontinue\nif curr &gt;= j:\ncontinue\nif curr &lt; j and curr &gt;= i:\nq.append(j)\ncontinue\nif len(q) == 0:\nreturn -1\ncurr = max(q)\ntotal += 1\nq = []\nif (curr &lt; j):\nq.append(j)\nif len(q) &gt; 0:\ntotal += 1\nreturn total\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1326.%20Minimum%20Number%20of%20Taps%20to%20Open%20to%20Water%20a%20Garden/#optimizing-2-no-more-maxarr", "title": "Optimizing 2 - No more <code>Max(arr)</code>", "text": "<p><code>O(n)</code></p> <p>It still a nested loop (even it independent with above loop) with a lot of memory allocating for array vector <code>q</code>. This could be done over a single <code>nextMax</code> variable.</p> Time Submitted Status Runtime Memory Language 08/31/2023 12:20 Accepted 119 ms 16.8 MB python3 <pre><code>class Solution:\ndef minTaps(self, n: int, ranges: List[int]) -&gt; int:\ncovered = [-1] * (n + 1)\nfor i, r in enumerate(ranges):\ncovered[max(0, i - r)] = min(n, i + r)\ncurr = None\ntotal = 0\nnextMax = -1\nfor i, j in enumerate(covered):\nif curr is None:\ncurr = j\ntotal += 1\ncontinue\nif curr &gt;= j:\ncontinue\nif curr &lt; j and curr &gt;= i:\nnextMax = max(nextMax, j)\ncontinue\nif nextMax == -1:\nreturn -1\ncurr = nextMax\ntotal += 1\nnextMax = -1\nif (curr &lt; j):\nnextMax = max(nextMax, j)\nif nextMax &gt; 0:\ntotal += 1\nreturn total\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1326.%20Minimum%20Number%20of%20Taps%20to%20Open%20to%20Water%20a%20Garden/#actual-on", "title": "Actual O(n)", "text": "<p><code>O(n)</code></p> <p>The cleaver way to preprocess the data <pre><code>        # Create a list to track the maximum reach for each position\nmax_reach = [0] * (n + 1)\n# Calculate the maximum reach for each tap\nfor i in range(len(ranges)):\n# Calculate the leftmost position the tap can reach\nstart = max(0, i - ranges[i])\n# Calculate the rightmost position the tap can reach\nend = min(n, i + ranges[i])\n# Update the maximum reach for the leftmost position\nmax_reach[start] = max(max_reach[start], end)\n</code></pre></p> <p>This way we can effective create the same data which our sort want to achieved. </p> <pre><code>class Solution:\ndef minTaps(self, n: int, ranges: List[int]) -&gt; int:\n# Create a list to track the maximum reach for each position\nmax_reach = [0] * (n + 1)\n# Calculate the maximum reach for each tap\nfor i in range(len(ranges)):\n# Calculate the leftmost position the tap can reach\nstart = max(0, i - ranges[i])\n# Calculate the rightmost position the tap can reach\nend = min(n, i + ranges[i])\n# Update the maximum reach for the leftmost position\nmax_reach[start] = max(max_reach[start], end)\n# Number of taps used\ntaps = 0\n# Current rightmost position reached\ncurr_end = 0\n# Next rightmost position that can be reached\nnext_end = 0\n# Iterate through the garden\nfor i in range(n + 1):\nif i &gt; next_end:\n# Current position cannot be reached\nreturn -1\nif i &gt; curr_end:\n# Increment taps when moving to a new tap\ntaps += 1\n# Move to the rightmost position that can be reached\ncurr_end = next_end\n# Update the next rightmost position that can be reached\nnext_end = max(next_end, max_reach[i])\n# Return the minimum number of taps used\nreturn taps\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1337.%20The%20K%20Weakest%20Rows%20in%20a%20Matrix/", "title": "1337. The K Weakest Rows in a Matrix", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n ** 2)"]}, {"location": "notes/Leetcode%201000-10000/1337.%20The%20K%20Weakest%20Rows%20in%20a%20Matrix/#problem", "title": "Problem", "text": "<p>You are given an <code>m x n</code> binary matrix <code>mat</code> of <code>1</code>\u2019s (representing soldiers) and <code>0</code>\u2019s (representing civilians). The soldiers are positioned in front of the civilians. That is, all the <code>1</code>\u2019s will appear to the left of all the <code>0</code>\u2019s in each row.</p> <p>A row <code>i</code> is weaker than a row <code>j</code> if one of the following is true:</p> <ul> <li>The number of soldiers in row <code>i</code> is less than the number of soldiers in row <code>j</code>.</li> <li>Both rows have the same number of soldiers and <code>i &lt; j</code>.</li> </ul> <p>Return the indices of the <code>k</code> weakest rows in the matrix ordered from weakest to strongest.</p> <p>Example 1:</p> <p>Input: mat =  <pre><code>[[1,1,0,0,0],\n [1,1,1,1,0],\n [1,0,0,0,0],\n [1,1,0,0,0],\n [1,1,1,1,1]], \n</code></pre> k = 3 Output: [2,0,3] Explanation:  The number of soldiers in each row is: </p> <ul> <li>Row 0: 2 </li> <li>Row 1: 4 </li> <li>Row 2: 1 </li> <li>Row 3: 2 </li> <li>Row 4: 5  The rows ordered from weakest to strongest are [2,0,3,1,4].</li> </ul> <p>Example 2:</p> <p>Input: mat =  <pre><code>[[1,0,0,0],\n [1,1,1,1],\n [1,0,0,0],\n [1,0,0,0]], \n</code></pre> k = 2 Output: [0,2] Explanation:  The number of soldiers in each row is: </p> <ul> <li>Row 0: 1 </li> <li>Row 1: 4 </li> <li>Row 2: 1 </li> <li>Row 3: 1  The rows ordered from weakest to strongest are [0,2,3,1].</li> </ul> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>2 &lt;= n, m &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= m</code></li> <li><code>matrix[i][j]</code> is either 0 or 1.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n ** 2)"]}, {"location": "notes/Leetcode%201000-10000/1337.%20The%20K%20Weakest%20Rows%20in%20a%20Matrix/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n ** 2)"]}, {"location": "notes/Leetcode%201000-10000/1337.%20The%20K%20Weakest%20Rows%20in%20a%20Matrix/#white-board", "title": "White board", "text": "<p>First glance:</p> <ul> <li>It a matrix, the normal calculation sum total soldiers each row can cost up to n, we can use binary search to reduce the needed calculation to log(n)</li> <li>We need to sort each row total soldiers right after to get k weakest, we can use any sort function and worst case will be <code>k = n</code>, which we need the whole list sorted as the return value</li> </ul> <p>So:</p> <ul> <li>The calculate for count each row soldier cost O(n log n) </li> <li>The sort cost O(n log n)</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n ** 2)"]}, {"location": "notes/Leetcode%201000-10000/1337.%20The%20K%20Weakest%20Rows%20in%20a%20Matrix/#implement-all-build-in-python", "title": "Implement, all build-in python", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n ** 2)"]}, {"location": "notes/Leetcode%201000-10000/1337.%20The%20K%20Weakest%20Rows%20in%20a%20Matrix/#bisect-sort", "title": "Bisect + Sort", "text": "<p><code>O(n log n)</code></p> <p>Python provided some level of frequently use list operation, which have sort, and binary search </p> <ul> <li>I have bisect for binary search on list: bisect right find the insert point at right most position in a small -&gt; large sorted order list. Here we have reverse order (eg [1,1,0,0]) list, so I need to use a modification <code>x -&gt; -x</code>. All is stored in <code>count</code> array</li> <li>I have <code>sort</code> and <code>sortKey</code> to sort array : Instead of sorting the count directly, I create a new index array <code>index</code>, and sort on the index list directly by the value of <code>count</code> instead.</li> </ul> <pre><code>class Solution:\ndef kWeakestRows(self, mat: List[List[int]], k: int) -&gt; List[int]:\ndef sortKey(x):\nreturn -x\ncount = [bisect_left(r, 0, key = sortKey) for r in mat]\n# print(count)\nindex = list(range(len(mat)))\ndef sortKey(x):\nreturn count[x]\nindex.sort(key = sortKey)\nreturn [i for i in index[:k]]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n ** 2)"]}, {"location": "notes/Leetcode%201000-10000/1337.%20The%20K%20Weakest%20Rows%20in%20a%20Matrix/#sum-sort", "title": "Sum + sort", "text": "<p><code>O(n ** 2)</code></p> <p>Just sum each round instead, which cost O(n ** 2)</p> <pre><code>class Solution:\ndef kWeakestRows(self, mat: List[List[int]], k: int) -&gt; List[int]:\ncount = [sum(r) for r in mat]\nindex = list(range(len(mat)))\ndef sortKey(x):\nreturn count[x]\nindex.sort(key = sortKey)\nreturn [i for i in index[:k]]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n ** 2)"]}, {"location": "notes/Leetcode%201000-10000/1569.%20Number%20of%20Ways%20to%20Reorder%20Array%20to%20Get%20Same%20BST/", "title": "1569. Number of Ways to Reorder Array to Get Same BST", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "tree"]}, {"location": "notes/Leetcode%201000-10000/1569.%20Number%20of%20Ways%20to%20Reorder%20Array%20to%20Get%20Same%20BST/#problem", "title": "Problem", "text": "<p>Given an array <code>nums</code> that represents a permutation of integers from <code>1</code> to <code>n</code>. We are going to construct a binary search tree (BST) by inserting the elements of <code>nums</code> in order into an initially empty BST. Find the number of different ways to reorder <code>nums</code> so that the constructed BST is identical to that formed from the original array <code>nums</code>.</p> <ul> <li>For example, given <code>nums = [2,1,3]</code>, we will have 2 as the root, 1 as a left child, and 3 as a right child. The array <code>[2,3,1]</code> also yields the same BST but <code>[3,2,1]</code> yields a different BST.</li> </ul> <p>Return the number of ways to reorder <code>nums</code> such that the BST formed is identical to the original BST formed from <code>nums</code>.</p> <p>Since the answer may be very large, return it modulo <code>10**9 + 7</code>.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "tree"]}, {"location": "notes/Leetcode%201000-10000/1569.%20Number%20of%20Ways%20to%20Reorder%20Array%20to%20Get%20Same%20BST/#solution", "title": "Solution", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "tree"]}, {"location": "notes/Leetcode%201000-10000/1569.%20Number%20of%20Ways%20to%20Reorder%20Array%20to%20Get%20Same%20BST/#my-sane-approach-dynamic-programming-and-some-minor-math", "title": "My sane approach: Dynamic programming and some minor math", "text": "<p>Cost me so much time, but here is step by step rundown:</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "tree"]}, {"location": "notes/Leetcode%201000-10000/1569.%20Number%20of%20Ways%20to%20Reorder%20Array%20to%20Get%20Same%20BST/#1-set-up-bts-tree-for-better-feel-of-the-problem", "title": "1. Set up BTS tree, for better feel of the problem", "text": "<p>Nothing too fancy here, as the problem told:</p> <p>construct a binary search tree (BST) by inserting the elements of <code>nums</code> in order into an initially empty BST</p> <pre><code>class BinarySearchTree:\ndef __init__(self, value, left = None, right = None):\nself.value = value\nself.left = left\nself.right = right\nself.totalNode = 1\nself.countWayCache = None\nif self.left != None:\nself.totalNode += self.left.totalNode\nif self.right != None:\nself.totalNode += self.right.totalNode\ndef addNode(self, value):\nif self.value &gt; value:\nif self.right == None:\nself.right = BinarySearchTree(value)\nelse:\nself.right.addNode(value)\nif self.value &lt; value:\nif self.left == None:\nself.left = BinarySearchTree(value)\nelse:\nself.left.addNode(value)\nself.totalNode += 1\ndef countWays(self, dp, modulo):\nif self.countWayCache != None:\nreturn self.countWayCache\ntotalWay = 1\nif self.left == None and self.right == None:\nreturn totalWay\nif self.left == None:\nreturn self.right.countWays(dp, modulo)\nif self.right == None:\nreturn self.left.countWays(dp, modulo)\ntotalWay = self.right.countWays(dp, modulo) * self.left.countWays(dp, modulo) * dp[self.left.totalNode][self.right.totalNode] % modulo\nself.countWayCache = totalWay\nreturn totalWay\n</code></pre> <p>As you see, <code>__init__()</code> and <code>addNode(self, value)</code> does exactly what the problem told. Where I try to cache <code>totalNode</code> on the tree and <code>countWayCache</code>  which is the number of different ways to construct the tree for later used as we will want to keep reuse  them to deal with the main problem.</p> <p>Also, I code <code>toDict</code>, <code>toString</code> and <code>interator</code> to debug if I done the BTS implement right <pre><code>class BinarySearchTree:\ndef toDict(self, nestedlevel = None):\nnextNestedLevel = nestedlevel\nif nestedlevel != None:\nnextNestedLevel = nestedlevel - 1\nif nextNestedLevel &lt; 0:\nreturn \"...\"\ndictSeft = {}\ndictSeft[\"value\"] = self.value\nif self.left != None:\ndictSeft[\"left\"] = self.left.toDict(nextNestedLevel)\nif self.right != None:\ndictSeft[\"right\"] = self.right.toDict(nextNestedLevel)\nreturn dictSeft\ndef toString(self, nestedlevel = None, indent = 4):\ndictSeft = self.toDict(nestedlevel)\nstringSeft = json.dumps(dictSeft, indent = indent)\nreturn stringSeft\ndef interator(self): \nnodes = []\nnodes.append(self)\nif self.left != None:\nnodes.append(*self.left.interator())\nif self.right != None:\nnodes.append(*self.right.interator())\nreturn nodes\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "tree"]}, {"location": "notes/Leetcode%201000-10000/1569.%20Number%20of%20Ways%20to%20Reorder%20Array%20to%20Get%20Same%20BST/#implement-countwaydp-modulo-directly-onto-bts-tree", "title": "Implement <code>countWay(dp, modulo)</code> directly onto BTS tree", "text": "<p>Where I try to cache <code>totalNode</code> on the tree and <code>countWayCache</code>  which is the number of different ways to construct the tree for later used as we will want to keep reuse  them to deal with the main problem.</p> <p>This is what I staged before, trying to implement <code>countWay(dp, modulo)</code> is a bit tricky, but by some analyzing we know that:</p> <ol> <li>If we already done calculate <code>countWays</code> of a Tree, we can simply return the cache result</li> <li>If there is neither left nor right node, we can only have 1 way to constructed BST</li> <li>If there is either left or right node, the root node can\u2019t be change, so we can could return <code>left.countWay(dp, modulo)</code> or <code>right.countWay(dp, modulo)</code> node </li> <li>The main focus: When both <code>left</code>, <code>right</code> are available.</li> </ol> <p>Quick reference to what we have pre-calculated variable available for use:</p> <ul> <li><code>left.countWay(dp, modulo)</code> , <code>right.countWay(dp, modulo)</code> as  leaf node will be in the case 2 or 3</li> <li><code>left.totalNode</code> , <code>right.totalNode</code> as we keep tracking of them while crafting the BTS tree</li> <li><code>module</code> is just <code>10**9 + 7</code> as the problem staged </li> <li>What left, is <code>dp</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "tree"]}, {"location": "notes/Leetcode%201000-10000/1569.%20Number%20of%20Ways%20to%20Reorder%20Array%20to%20Get%20Same%20BST/#what-is-dp", "title": "What is DP ?", "text": "<p>After a lot of paper thinking, I translate this to a new problem: \u201cWith two array A and B with n and m length, count how many way to merge them with out changing their element order (Knowing all element is unique)\u201d.</p> <p>Or similar \u201cWith two string A and B, count how many way to merge them with out changing their character order (Knowing each character is unique)\u201d</p> <p>This could be solving using dynamic programing: <code>dp[i][j]</code> is the number of way to merge an <code>i</code> length array to an <code>j</code> length array with out changing their element order</p> <ol> <li>We always have <code>dp[&lt;any&gt;][0] = dp[0][&lt;any&gt;] = 1</code> as there is only one way to merge an array with 0 length to another </li> <li>We also have <code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code>. As if we try to add a <code>A[i]</code> or <code>B[j]</code> element into the end of ?? </li> </ol> <pre><code>class BinarySearchTree:\ndef __init__(self, value, left = None, right = None):\nself.value = value\nself.left = left\nself.right = right\nself.totalNode = 1\nself.countWayCache = None\nif self.left != None:\nself.totalNode += self.left.totalNode\nif self.right != None:\nself.totalNode += self.right.totalNode\ndef addNode(self, value):\nif self.value &gt; value:\nif self.right == None:\nself.right = BinarySearchTree(value)\nelse:\nself.right.addNode(value)\nif self.value &lt; value:\nif self.left == None:\nself.left = BinarySearchTree(value)\nelse:\nself.left.addNode(value)\nself.totalNode += 1\ndef countWays(self, dp, modulo):\nif self.countWayCache != None:\nreturn self.countWayCache\ntotalWay = 1\nif self.left == None and self.right == None:\nreturn totalWay\nif self.left == None:\nreturn self.right.countWays(dp, modulo)\nif self.right == None:\nreturn self.left.countWays(dp, modulo)\ntotalWay = self.right.countWays(dp, modulo) * self.left.countWays(dp, modulo) * dp[self.left.totalNode][self.right.totalNode] % modulo\nself.countWayCache = totalWay\nreturn totalWay\nclass Solution:\ndef numOfWays(self, nums: List[int]) -&gt; int:\nMODULO = 10**9 + 7\nroot = None\nfor n in nums:\nif root == None:\nroot = BinarySearchTree(n)\nelse:\nroot.addNode(n)\ndp = [[0]*(len(nums) + 1) for i in range(len(nums) + 1)]\nfor i in range(len(nums)+1):\ndp[i][0] = 1\ndp[0][i] = 1\nfor i in range(1, len(nums)+1):\nfor j in range(1, len(nums)+1):\ndp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MODULO\ntotalWays = root.countWays(dp, MODULO)\nreturn totalWays - 1\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "tree"]}, {"location": "notes/Leetcode%201000-10000/1601.%20Maximum%20Number%20of%20Achievable%20Transfer%20Requests/", "title": "1601. Maximum Number of Achievable Transfer Requests", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1601.%20Maximum%20Number%20of%20Achievable%20Transfer%20Requests/#problem", "title": "Problem", "text": "<p>We have <code>n</code> buildings numbered from <code>0</code> to <code>n - 1</code>. Each building has a number of employees. It\u2019s transfer season, and some employees want to change the building they reside in.</p> <p>You are given an array <code>requests</code> where <code>requests[i] = [from_i, to_i]</code> represents an employee\u2019s request to transfer from building <code>from_i</code> to building <code>to_i</code>.</p> <p>All buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. This means the number of employees leaving is equal to the number of employees moving in. For example if <code>n = 3</code> and two employees are leaving building <code>0</code>, one is leaving building <code>1</code>, and one is leaving building <code>2</code>, there should be two employees moving to building <code>0</code>, one employee moving to building <code>1</code>, and one employee moving to building <code>2</code>.</p> <p>Return the maximum number of achievable requests</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>1 &lt;= requests.length &lt;= 16</code></li> <li><code>requests[i].length == 2</code></li> <li><code>0 &lt;= from_i, to_i &lt; n</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1601.%20Maximum%20Number%20of%20Achievable%20Transfer%20Requests/#solution", "title": "Solution", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1601.%20Maximum%20Number%20of%20Achievable%20Transfer%20Requests/#read-the-problem", "title": "Read the problem", "text": "<ul> <li>There is really low number of request and building. So we can try all possible request combination</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1601.%20Maximum%20Number%20of%20Achievable%20Transfer%20Requests/#evaluating", "title": "Evaluating", "text": "<ul> <li>Using a binary array to keep track of which request are served  <code>served = [False] * requests.length</code> , free slot start on each building is <code>[0] * n</code></li> <li>Let say for each request being done, we mark them as <code>True</code>, we then have a combination of <code>2 ** requests.length &lt;= 2 **16</code> or <code>65536</code>  total of possible out come</li> <li>With each one, we can then try and find the total of person in each building, is it all equal to <code>0</code>? Which cost us a total time complexity  <code>O(n) &lt;= 20</code>.</li> <li>If that true, then is could be possible answer and we can update the <code>current_max</code>.</li> <li>Know possible answer <code>current_max</code>, we will only try to check any <code>served</code> where total number of request being served is greater than  <code>current_max</code>;</li> </ul> <p>Which mean time complexity is close to <code>O(n* 2**m) = 20*65536</code> </p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1601.%20Maximum%20Number%20of%20Achievable%20Transfer%20Requests/#get-it-on", "title": "Get it on", "text": "<ul> <li>A binary representation is good enough for <code>served</code> array. We can use a for loop in range <code>[0 .. 2**16]</code>. Every <code>1</code>  position in binary number representation mean request at that position is served </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1601.%20Maximum%20Number%20of%20Achievable%20Transfer%20Requests/#implementation", "title": "Implementation", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1601.%20Maximum%20Number%20of%20Achievable%20Transfer%20Requests/#sane-way", "title": "Sane way", "text": "<pre><code>class Solution:\ndef bit_1_pos(self, number):\nfor pos, c in enumerate`-1]`:\nif c == '1':\nyield pos\ndef maximumRequests(self, n: int, requests: List[List[int]]) -&gt; int:\ncurrent_max = 0\nfor request_served in range(1 &lt;&lt; requests.__len__()):\nbuilding = [0] * n\npos = requests.__len__() - 1\nif request_served.bit_count() &lt;= current_max:\ncontinue\nfor pos in self.bit_1_pos(request_served):\nbuilding[requests[pos][0]] -= 1\nbuilding[requests[pos][1]] += 1\ncheck = True\nfor i in range(n):\nif building[i] != 0:\ncheck = False\nbreak\nif check:\ncurrent_max = request_served.bit_count()\nreturn current_max\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1601.%20Maximum%20Number%20of%20Achievable%20Transfer%20Requests/#leetcode-provided", "title": "Leetcode provided", "text": "<pre><code>class Solution:\ndef maximumRequests(self, n: int, requests: List[List[int]]) -&gt; int:\nanswer = 0\nfor mask in range(1 &lt;&lt; requests.__len__()):\nindegree = [0] * n\npos = requests.__len__() - 1\nbitCount = mask.bit_count()\nif bitCount &lt;= answer:\ncontinue\ncurr = mask\nwhile curr &gt; 0:\nif curr &amp; 1 == 1:\nindegree[requests[pos][0]] -= 1\nindegree[requests[pos][1]] += 1\ncurr &gt;&gt;= 1\npos -= 1\nflag = True\nfor i in range(n):\nif indegree[i] != 0:\nflag = False\nbreak\nif flag:\nanswer = bitCount\nreturn answer\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1615.%20Maximal%20Network%20Rank/", "title": "1615. Maximal Network Rank", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "graph", "python"]}, {"location": "notes/Leetcode%201000-10000/1615.%20Maximal%20Network%20Rank/#problem", "title": "Problem", "text": "<p>There is an infrastructure of <code>n</code> cities with some number of <code>roads</code> connecting these cities. Each <code>roads[i] = [ai, bi]</code> indicates that there is a bidirectional road between cities <code>ai</code> and <code>bi</code>.</p> <p>The network rank of two different cities is defined as the total number of directly connected roads to either city. If a road is directly connected to both cities, it is only counted once.</p> <p>The maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.</p> <p>Given the integer <code>n</code> and the array <code>roads</code>, return the maximal network rank of the entire infrastructure.</p> <p>Example 1:</p> <p></p> <p>Input: <code>n = 4, roads = [[0,1],[0,3],[1,2],[1,3|0,1],[0,3],[1,2],[1,3]]</code> Output: <code>4</code> Explanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.</p> <p>Example 2:</p> <p></p> <p>Input: <code>n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4|0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]</code> Output: <code>5</code> Explanation: There are 5 roads that are connected to cities 1 or 2.</p> <p>Example 3:</p> <p>Input: <code>n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7|0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]</code> Output: 5 Explanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.</p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= roads.length &lt;= n * (n - 1) / 2</code></li> <li><code>roads[i].length == 2</code></li> <li><code>0 &lt;= a_i, b_i &lt;= n-1</code></li> <li><code>a_i != b_i</code></li> <li>Each pair of cities has at most one road connecting them.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "graph", "python"]}, {"location": "notes/Leetcode%201000-10000/1615.%20Maximal%20Network%20Rank/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "graph", "python"]}, {"location": "notes/Leetcode%201000-10000/1615.%20Maximal%20Network%20Rank/#preprocess-data", "title": "Preprocess data", "text": "<p><code>python</code></p> <p>Consider this <code>&lt;city, road&gt;</code> problem as a graph <code>&lt;node, edge&gt;</code></p> <p>Before hand, we can calculating each node rank. Which define as the total number of out going edge of the node:</p> <p>The <code>roads</code> array is a graph represent in edges array:</p> <ul> <li>Which each connection in graph, we call it a edge <code>(u,v)</code></li> <li>All connection <code>(u,v)</code> of graph is contain in <code>E = roads</code> array</li> </ul> <p>which not that great for most of graph problem. We process it to have a adjacent table <code>adjNode</code> instead:</p> <ul> <li>Each node <code>x</code> in graph have all adjacent node in <code>adjNode[i]</code> array</li> <li>All connection of graph then is contain in  <code>adjNode</code> table</li> </ul> <p>This mean, by creating <code>adjNode</code> from <code>road</code>, we also can get the rank of node <code>x</code> by taking the length of correspond <code>adjNode[x]</code> </p> <pre><code>class Solution:\ndef maximalNetworkRank(self, n: int, roads: List[List[int]]) -&gt; int:\nadjNode = [[] for i in range(n)]\nnodeRank = []\nfor (u,v) in roads:\nadjNode[v].append(u)\nadjNode[u].append(v)\nfor i in range(n):\nnodeRank.append(len(adjNode[i]))\nprint(nodeRank)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "graph", "python"]}, {"location": "notes/Leetcode%201000-10000/1615.%20Maximal%20Network%20Rank/#brute-force-try-all-possible", "title": "Brute force / Try all possible", "text": "<p><code>python</code></p> <p>By talking all the possible combination of 2 node, we can easily calculating the maximum rank needed to be return.</p> <p>The problem specific this:</p> <p>If a road is directly connected to both cities, it is only counted once.</p> <p>So, to calculating a combination rank of 2 node <code>i</code> and <code>j</code>, we need to consider:</p> <ul> <li>If there is a <code>(i,j)</code> edge (we can check it using <code>i in adjNode[j]</code>), it already in <code>nodeRank[i] + nodeRank[j]</code> sum, and need to be reduce by one. </li> <li>Other wise this isn\u2019t needed and <code>nodeRank[i] + nodeRank[j]</code> sum being keep the same</li> </ul> <p>This is function, the trick is that Boolean numeric value is <code>True = 1</code> and <code>False = 0</code>, we can handle the if logic by using this trick in python using an <code>int</code> type cast.</p> <pre><code>possibleMaximal = nodeRank[i] + nodeRank[j] - int(i in adjNode[j])\n</code></pre> <p>This mean: </p> <ul> <li><code>- int(i in adjNode[j]) = -int(True) = -1</code></li> <li><code>- int(i in adjNode[j]) = -int(False) = -0</code></li> </ul> <p>Final implementation:</p> Time Submitted Status Runtime Memory Language 08/18/2023 22:03 Accepted 291 ms 18.1 MB python3 <pre><code>class Solution:\ndef maximalNetworkRank(self, n: int, roads: List[List[int]]) -&gt; int:\nadjNode = [[] for i in range(n)]\nnodeRank = []\nfor (u,v) in roads:\nadjNode[v].append(u)\nadjNode[u].append(v)\nfor i in range(n):\nnodeRank.append(len(adjNode[i]))\nmaximal = 0\nfor i in range(n):\nfor j in range(i+1, n):\npossible = nodeRank[i] + nodeRank[j] - int(i in adjNode[j])\nif maximal &lt; possible:\nmaximal = possible\nreturn maximal\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "graph", "python"]}, {"location": "notes/Leetcode%201000-10000/1615.%20Maximal%20Network%20Rank/#connected-tablematrix-with-brute-force", "title": "Connected table/matrix with brute force", "text": "<p><code>python</code></p> <p>Instead of adjacent table, we could also use Connected table <code>matrix</code>, as with:</p> <ul> <li>With edge <code>(u,v)</code> is in graph, we representing them in a <code>matrix[u,v] = True</code></li> <li>With edge <code>(u,v)</code> isn\u2019t in graph, we representing them in a <code>matrix[u,v] = False</code></li> </ul> <p>This is way nice than previous one, costing <code>O(1)</code> to check if the <code>(u,v)</code> edge is in the graph or not, where we using <code>(i in array)</code> expression, which need to loop through all element in the worst case scenario.</p> <p>While we can use hash map, but it cost a lot more time to allocating that much memory, especially in python.</p> <p>As we have <code>2 &lt;= n &lt;= 100</code> , which mean <code>n</code> is small enough, this Connected table <code>matrix</code> of representation is way more fitting.</p> Time Submitted Status Runtime Memory Language 08/18/2023 22:03 Accepted 291 ms 18.1 MB python3 <pre><code>class Solution:\ndef maximalNetworkRank(self, n: int, roads: List[List[int]]) -&gt; int:\nadjNode = [[False] * n for i in range(n)]\nnodeRank = [0] * n\nfor (u,v) in roads:\nadjNode[u][v] = True\nadjNode[v][u] = True\nnodeRank[u] += 1\nnodeRank[v] += 1\nmaximal = 0\nfor i in range(n):\nfor j in range(i+1, n):\npossible = nodeRank[i] + nodeRank[j] - int(adjNode[i][j])\nif maximal &lt; possible:\nmaximal = possible\nreturn maximal\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "graph", "python"]}, {"location": "notes/Leetcode%201000-10000/1615.%20Maximal%20Network%20Rank/#edge-only-representation-with-sort-binary-search-and-brute-force", "title": "Edge only representation with sort, binary search and brute force", "text": "<p><code>python</code></p> <p>A no one ask for solution, while we reduce the need to preprocessing data. Using just edges need a lot of thing to reduce the time complexity from <code>O(n**4)</code> down to <code>O(n**2 * log(n**2))</code></p> <ul> <li>Quickly check <code>(u,v)</code> in graph</li> <li>Quickly calculating all rank of individual <code>u</code></li> </ul> <p>A possible thing to do is quickly sort <code>roads</code> array, and using binary search to check if any <code>(u,v)</code> in the <code>roads</code> array</p> <p>To standardize <code>(u, v)</code>, as it\u2019s bi-direction, we enforce rule that <code>u &lt; v</code> in all case. So we need to update all roads.</p> <p>This also come with a lot of manual touch to finish like: </p> <ul> <li>Checking if roads is empty, which make our binary search throw error in runtime;</li> <li>Manually loop through all the node to update rank</li> <li>Using special sort that can handle two value comparing <code>(u, v)</code></li> </ul> Time Submitted Status Runtime Memory Language 08/18/2023 22:43 Accepted 478 ms 17.8 MB python3 <pre><code>class Solution:\ndef maximalNetworkRank(self, n: int, roads: List[List[int]]) -&gt; int:\nif len(roads) == 0:\nreturn 0\nrank = [0] * n\nfor i, (u, v) in enumerate(roads):\nif u &gt; v:\nroads[i] = (v, u)\nrank[u] += 1\nrank[v] += 1\ndef sortKey(road):\nu, v = road\nreturn 1000*u + v\nroads.sort(key = sortKey)\ndef search(u,v):\nl = -1\nr = len(roads)\nwhile l &lt; r:\nm = (l + r) // 2\nx, y = roads[m]\nif l == m:\nif l &lt; 0:\nreturn False\nreturn (x == u) and (y == v)\nelif (u &lt; x) or (x == u and v &lt; y):\nr = m\nelse:\nl = m\nreturn False\nmaximal = 0\nfor i in range(n):\nfor j in range(i+1, n):\npossible =  (rank[i] + rank[j]) - int(search(i, j))\nif maximal &lt; possible:\nmaximal = possible\nreturn maximal\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "graph", "python"]}, {"location": "notes/Leetcode%201000-10000/1615.%20Maximal%20Network%20Rank/#edge-only-with-hash-map-brute-force", "title": "Edge only with hash map, brute force", "text": "<p><code>python</code></p> <p>By using hash function, we can easily check if <code>(u,v)</code> in roads in <code>O(1)</code> time, which could be on pair with Connected table/matrix solution.</p> <p>While we can directly convent roads to <code>set()</code> in python, we need to handle case where <code>(u,v)</code> is in road, but <code>(v,u)</code> is not.</p> Time Submitted Status Runtime Memory Language 08/18/2023 22:39 Accepted 307 ms 18.7 MB python3 <pre><code>class Solution:\ndef maximalNetworkRank(self, n: int, roads: List[List[int]]) -&gt; int:\nif len(roads) == 0:\nreturn 0\ncache = set()\nrank = [0] * n\nfor u, v in roads:\nrank[u] += 1\nrank[v] += 1\nif u &gt; v:\ncache.add((v,u))\nelse:\ncache.add((u,v))\nmaximal = 0\nfor i in range(n):\nfor j in range(i+1, n):\npossible =  (rank[i] + rank[j]) - int((i, j) in cache)\nprint(possible, i, j)\nif maximal &lt; possible:\nmaximal = possible\nreturn maximal\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "graph", "python"]}, {"location": "notes/Leetcode%201000-10000/1658.%20Minimum%20Operations%20to%20Reduce%20X%20to%20Zero/", "title": "1658. Minimum Operations to Reduce X to Zero", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1658.%20Minimum%20Operations%20to%20Reduce%20X%20to%20Zero/#problem", "title": "Problem", "text": "<p>You are given an integer array <code>nums</code> and an integer <code>x</code>. In one operation, you can either remove the leftmost or the rightmost element from the array <code>nums</code> and subtract its value from <code>x</code>. Note that this modifies the array for future operations.</p> <p>Return the minimum number of operations to reduce <code>x</code> to exactly <code>0</code> if it is possible__, otherwise, return <code>-1</code>.</p> <p>Example 1:</p> <p>Input: nums = [1,1,4,2,3], x = 5 Output: 2 Explanation: The optimal solution is to remove the last two elements to reduce x to zero.</p> <p>Example 2:</p> <p>Input: nums = [5,6,7,8,9], x = 4 Output: -1</p> <p>Example 3:</p> <p>Input: nums = [3,2,20,1,1,3], x = 10 Output: 5 Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.</p> <p>Constraints:</p> <ul> <li>1 &lt;= <code>nums.length</code> &lt;= \\(10^5\\)</li> <li>1 &lt;= <code>nums[i]</code> &lt;= \\(10^4\\)</li> <li>1 &lt;= <code>x</code> &lt;= \\(10^9\\)</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1658.%20Minimum%20Operations%20to%20Reduce%20X%20to%20Zero/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1658.%20Minimum%20Operations%20to%20Reduce%20X%20to%20Zero/#white-board", "title": "White board", "text": "<ul> <li>We can describe <code>x = sum(nums[0:left]) + sum(nums[right:n])</code> where <code>(left + n-right)</code> is minimum</li> <li>The ideal is that, there is a middle point to use binary search:<ul> <li>By trying each <code>left</code> (making <code>left</code> and <code>sum(nums[0:left])</code> constant on each loop) , we have a remain <code>sum(nums[right:n]) = x - sum[:left]</code> to full fill</li> <li>With <code>right</code> travel between <code>[left .. n]</code> (no overlapping). We always have</li> <li><code>sum(nums[left:n]) &lt; sum(nums[left+1:n]) &lt; .. &lt; sum(nums[n:n]) = 0</code> (as 1 &lt;= \\(nums_i\\) &lt;= \\(10^4\\)).</li> <li>We need to find a <code>sum(nums[right:n]) = x - sum[:left]</code> inside a sorted array, making it become a binary search problem</li> </ul> </li> <li>This mean, we need a way to easily calculating <code>sum(nums[x:n])</code>, which is quite easy and can be stored in a O(n) space array.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1658.%20Minimum%20Operations%20to%20Reduce%20X%20to%20Zero/#build-in-python-binary-search-preprocessing-sum-range", "title": "Build-in python - Binary search + Preprocessing Sum range", "text": "<p><code>O(n log n)</code></p> <p>I instead making right a static, and find left using binary search</p> <ul> <li> <p>I pre-calculating all range <code>nums[0:0]</code>, <code>nums[0:1]</code>, \u2026 , <code>nums[0:n]</code> (<code>n = len(nums)</code>) and storing them in <code>sumRange</code> array.</p> </li> <li> <p>We have some built-in binary search, which I used here <code>bisect_right</code>: <code>bisect_right</code> return a <code>position</code> where <code>sumRange[:position] &lt;= x &lt; sumRange[:position+1]</code>on a sorted array, args <code>hi = right+1</code> is there to force result not cause a overlapping. Using <code>help(bisect.bisect_right)</code> for the explanation</p> </li> </ul> <p>Final implementation is here:</p> <pre><code>class Solution:\ndef minOperations(self, nums: List[int], x: int) -&gt; int:\nn = len(nums)\nsumRange = [0] * (n + 1)\nfor i in range(n):\nsumRange[i+1] = sumRange[i] + nums[i]\ndef getSum(x,y):\nreturn sumRange[y] - sumRange[x]\nminOps = n + 1\nfor right in range(n, -1, -1):\nrightSum = getSum(right, n)\nleftSum = x - rightSum\ninsertPos = bisect_right(sumRange, leftSum, hi = right+1)\n# print(sumRange[insertPos-1] - leftSum, insertPos, right)\nif sumRange[insertPos-1] == leftSum:\npossible = insertPos-1 + n - right\nif minOps &gt; possible:\nminOps = possible\n# print(possible)\n# print(n + 1)\nif minOps != n + 1:\nreturn minOps\nreturn -1\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1658.%20Minimum%20Operations%20to%20Reduce%20X%20to%20Zero/#linear-finding", "title": "Linear finding?", "text": "<p><code>O(n)</code></p> <p>We are sure that, <code>rightSum</code> is always increasing, which mean, <code>leftSum</code> always decreasing, which mean  <code>left</code> is always decreasing.</p> <p>We now instead have a sliding window like problem (but revert - sum outsize vs sum inside, not that much of a different here)</p> <ul> <li>Every right increasing, left is sliding until sum equal smaller than <code>x</code></li> <li>This making we, need to increasing right.</li> <li>Record every sliding window hit where sum = <code>x</code>, update minimum value</li> </ul> <p>Left and right loop only travel in one direction and is independent, making this a O(n) times complexity</p> <ul> <li>Still, I use a binary search for the first init value.</li> <li>In fact, If I remove all together <code>sumRange</code> and all in on sliding window, we could get O(1) in space, which is optimal solution I can get from this approach</li> </ul> <p>Final implementation:</p> <pre><code>class Solution:\ndef minOperations(self, nums: List[int], x: int) -&gt; int:\nn = len(nums)\nsumRange = [0] * (n + 1)\nfor i in range(n):\nsumRange[i+1] = sumRange[i] + nums[i]\ndef getSum(x,y):\nreturn sumRange[y] - sumRange[x]\nminOps = n + 1\ninsertPos = -1\nfor right in range(n, -1, -1):\nrightSum = getSum(right, n)\nleftSum = x - rightSum\nif insertPos == -1:\ninsertPos = bisect_right(sumRange, leftSum, hi = right+1)\nelse:\nwhile insertPos &gt; 0:\nif sumRange[insertPos-1] &lt;= leftSum:\nbreak\ninsertPos -= 1\n# print(sumRange[insertPos-1] - leftSum, insertPos, right)\nif sumRange[insertPos-1] == leftSum:\npossible = insertPos-1 + n - right\nif minOps &gt; possible:\nminOps = possible\n# print(possible)\n# print(n + 1)\nif minOps != n + 1:\nreturn minOps\nreturn -1\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "python", "O(n log n)", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1751.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended%20II/", "title": "1751. Maximum Number of Events That Can Be Attended II", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1751.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended%20II/#problem", "title": "Problem", "text": "<p>You are given an array of <code>events</code> where <code>events[i] = [startDay_i, endDay_i, value_i]</code>. The <code>ith</code> event starts at <code>startDay_i</code> and ends at <code>endDay_i</code>, and if you attend this event, you will receive a value of <code>value_i</code>. You are also given an integer <code>k</code> which represents the maximum number of events you can attend.</p> <p>You can only attend one event at a time. If you choose to attend an event, you must attend the entire event. Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.</p> <p>Return the maximum sum of values that you can receive by attending events.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= events.length</code></li> <li><code>1 &lt;= k * events.length &lt;= 10**6</code></li> <li><code>1 &lt;= startDay_i &lt;= endDay_i &lt;= 10**9</code></li> <li><code>1 &lt;= valuei &lt;= 10**6</code></li> </ul> <p>Example 1:</p> <p></p> <pre><code>**Input:** events = [[1,2,4],[3,4,3],[2,3,1|1,2,4],[3,4,3],[2,3,1]], k = 2\n**Output:** 7\n**Explanation:** Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1751.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended%20II/#solve", "title": "Solve", "text": "<p>My first thought is some dynamic programing that we try to get all possible events instead of having to limit our self with only visit <code>k</code> event. Storing them in a <code>lookup</code> array, I could found a pattern:</p> <ul> <li>Go from first event to the last event that sorted by <code>end</code> value</li> <li>Try to calculating the best total value we can get with each the <code>end</code> value. Because we have a quite large range of <code>endDay_i in  [1..10**9]</code> . So I implement a Binary search and reduce the need to storing <code>[1..10**9]</code> possible <code>end</code> value.<ul> <li>As the end day is inclusive, so we need to find index where <code>key[index-1] &lt; start &lt;= key[index]</code> . Where <code>key = events_end[0..current_event_index]</code></li> </ul> </li> <li>When calculate the best possible total value of event with each <code>lookup[end]</code>. we have either:<ul> <li>(Case 1) Last found best event <code>lookup[end] = lookup[end-1]</code> </li> <li>(Case 2) Choosing current event and best found <code>lookup[end_before]</code> with <code>end_before &lt; start[index]</code> or we can said <code>lookup[end] = value_of_current_event + lookup[start-1]</code> </li> </ul> </li> </ul> <p><code>end-1</code> or <code>start-1</code> here is just for representation, as I try to minimize the total memory for the <code>lookup</code> array by using Binary search instead.</p> <p>Here is first implementation  <pre><code>class Solution:\ndef maxValue(self, events: List[List[int]], k: int) -&gt; int:\ndef sort_key_end(x):\nreturn x[1]\ndef binary_search(arr, value):\nl = -1\nr = len(arr)\nwhile l+1&lt;r:\nm = (l + r) //2\ncurr_val = arr[m]\nif curr_val &lt; value:\nl = m\nelse:\nr = m\nis_found = l &gt; -1\nreturn is_found, l\nevents.sort(key=sort_key_end)\nlookup = []\nkey = []\nfor index, (s, e, v) in enumerate(events):\nlookup.append(v)\nkey.append(e)\nis_found, possible = binary_search(key, s)\nif is_found:\nlookup[index] += lookup[possible]\nif lookup[index] &lt; lookup[index - 1]:\nlookup[index] = lookup[index - 1]\nreturn lookup[len(events)-1]\n</code></pre></p> <p>To check my (without <code>k</code>) implementation, the best match for this solution is 2008. Maximum Earnings From Taxi, the same question without <code>k</code> maximum number of events part but it isn\u2019t inclusive thought, so I have to modify it a bit. </p> <p>To add <code>k</code> into this solution, the best and easiest way is just store lookup by a matrix of <code>n*k</code>, where we add another dimension <code>[0..k]</code> on how much event we have attend. And update function into either:</p> <pre><code>- **(Case 1)** Last found best event `lookup[curr_attend][end] = lookup[curr_attend][end-1]` \n- **(Case 2)** Choosing current event and best found `lookup[end_before]` with `end_before &lt; start[index]` and have `curr_attend-1` total event had attended; or we can said `lookup[curr_attend][end] = value_of_current_event + lookup[curr_attend-1][start-1]`\n</code></pre> <pre><code>class Solution:\ndef maxValue(self, events: List[List[int]], k: int) -&gt; int:\ndef sort_key_end(x):\nreturn x[1]\ndef binary_search(arr, value):\nl = -1\nr = len(arr)\nwhile l+1&lt;r:\nm = (l + r) //2\ncurr_val = arr[m]\nif curr_val &lt; value:\nl = m\nelse:\nr = m\nis_found = l &gt; -1\nreturn is_found, l\nevents.sort(key=sort_key_end)\nlookup = [[] for _ in range(k)]\nkey = []\nfor index, (s, e, v) in enumerate(events):\nkey.append(e)\nis_found, possible = binary_search(key, s)\nfor i in range(k):\nlookup[i].append(v)\nif is_found and i &gt; 0:\nlookup[i][index] += lookup[i-1][possible]\nif lookup[i][index] &lt; lookup[i][index - 1]:\nlookup[i][index] = lookup[i][index - 1]\nreturn lookup[k-1][len(events)-1]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1751.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended%20II/#optimized", "title": "Optimized:", "text": "<p>We can use bisect instead of Binary searching, which is similar to Leetcode problem 2008. optimal solution. Where <code>bisect_left(key, s)</code> will find the index position of <code>key</code> array where <code>key[bisect_left-1] &lt; s &lt;= key[bisect_left]</code> </p> <pre><code>class Solution:\ndef maxValue(self, events: List[List[int]], k: int) -&gt; int:\ndef sort_key_end(x):\nreturn x[1]\nevents.sort(key=sort_key_end)\nlookup = [[] for _ in range(k)]\nkey = []\nfor index, (s, e, v) in enumerate(events):\nkey.append(e)\nsearch = bisect_left(key, s)\nfor i in range(k):\nlookup[i].append(v)\nif search &gt; 0 and i &gt; 0:\nlookup[i][index] += lookup[i-1][search - 1]\nif lookup[i][index] &lt; lookup[i][index - 1]:\nlookup[i][index] = lookup[i][index - 1]\nreturn lookup[k-1][len(events)-1]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1751.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended%20II/#best-one-yet", "title": "Best one yet?", "text": "<p>Seem not, here is some thing else, where one try to implement a Python heap and a greedy approach:</p> <ul> <li>Start with the best possible event value till the lowest value.</li> <li><code>Schedule()</code> helper class<ul> <li>This is where we storing all event we had attend (<code>self.events</code> array) and total value of them (<code>self.value</code>). </li> <li>This likely to keep track which set of event we currently chose (similar to our <code>lookup</code> and <code>key</code>  helper array to store needed information dynamic programming ) </li> <li>Each time we try to add a events, we create a new copy of it, so any modify is on a different array and don\u2019t break previous found answer. </li> </ul> </li> <li>Main function store all solve <code>Schedule()</code> object into <code>schedules</code> array<ul> <li>With each <code>curr_event in events</code> we try to either:<ul> <li>Push the event into a know <code>Schedule()</code> solution</li> <li>or Create a new <code>Schedule()</code> solution branch with our <code>events</code>, this case to make sure there is a solution that had/possibly used the <code>curr_event</code> (Even if it can be push out of heap in the end)</li> </ul> </li> <li>There is some try to check and update best possible answer within every schedules update loop (on the fly). Still double check it again (with the last for loop) before return the result <code>best</code> <pre><code>from typing import List\nimport heapq\nclass Schedule:\ndef __init__(self, value=0, events=None):\nself.value = value\nself.events = [] if events is None else events\ndef __lt__(self, other):\nreturn self.value &lt; other.value or self.value == other.value and len(self.events) &gt; len(other.events)\ndef add_event(self, value, k):\nnew_events = self.events.copy()\nnew_value = self.value\nif k &gt; len(new_events):\nnew_events.append(value)\nnew_value += value\nif k == len(new_events):\nheapq.heapify(new_events)\nelif value &gt; new_events[0]:\nnew_value += value - new_events[0]\nheapq.heapreplace(new_events, value)\nreturn Schedule(new_value, new_events)\nclass Solution:\ndef maxValue(self, events: List[List[int]], k: int) -&gt; int:\nif k == 1:\nreturn max(e[2] for e in events)\nevents = sorted(tuple(event) for event in events)\nbest = Schedule()\nschedules = []\nfor start, end, value in events:\nokay = False\nwhile schedules and schedules[0][0] &lt; start:\ne, s = heapq.heappop(schedules)\nheapq.heappush(schedules, (end, s.add_event(value, k)))\nif best &lt; s:\nbest = s\nokay = True\nif not okay:\nheapq.heappush(schedules, (end, best.add_event(value, k)))\nfor e, s in schedules:\nif best &lt; s:\nbest = s\nreturn best.value\n</code></pre></li> </ul> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1751.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended%20II/#final-result", "title": "Final result", "text": "Time Submitted Status Runtime Memory Language Agro 07/16/2023 01:02 Accepted 1046 ms 62.7 MB python3 Binary search 07/16/2023 01:01 Accepted 875 ms 62.8 MB python3 Bisect optimized", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1793.%20Maximum%20Score%20of%20a%20Good%20Subarray/", "title": "1793. Maximum Score of a Good Subarray", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "go", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1793.%20Maximum%20Score%20of%20a%20Good%20Subarray/#problem", "title": "Problem", "text": "<p>You are given an array of integers <code>nums</code> (0-indexed) and an integer <code>k</code>.</p> <p>The score of a subarray <code>(i, j)</code> is defined as <code>min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)</code>. A good subarray is a subarray where <code>i &lt;= k &lt;= j</code>.</p> <p>Return the maximum possible score of a good subarray.</p> <p>Example 1:</p> <p>Input: nums = [1,4,3,7,4,5], k = 3 Output: 15 Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. </p> <p>Example 2:</p> <p>Input: nums = [5,5,4,5,4,1,1,1], k = 0 Output: 20 Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10**5</code></li> <li><code>1 &lt;= nums[i] &lt;= 2 * 10**4</code></li> <li><code>0 &lt;= k &lt; nums.length</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "go", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1793.%20Maximum%20Score%20of%20a%20Good%20Subarray/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "go", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1793.%20Maximum%20Score%20of%20a%20Good%20Subarray/#white-board", "title": "White board", "text": "<p>Looking at the problem, I saw that:</p> <ul> <li>A score of a sub-array is calculate by multiple the minimum number in that sub-array with the length of that sub-array.</li> <li>We also need to have k\u2019th element in the sub-array too.</li> </ul> <p>We may need to find minimum value in any given range quickly, this could be done by using  a min-max binary tree data structure.</p> <p>Ideally, we want to try all possible length and range, but <code>nums.length &lt;= 10**5</code>, which mean the submit  need at least a time complexity of O(n log(n)) to be accepted.</p> <p>Now let come up with a sample algorithm and start from there:</p> <ul> <li>We always need k\u2019th element. So we start with result sub-array <code>res = [ nums[k] ]</code>  with <code>score = 1 * nums[k]</code></li> <li>We try to expanding res array. Normally, we only care about the expanding only when the minimum value to be change, which start with <code>minElement = nums[k]</code> (inherits from step 1 as we only have one element from start).</li> <li>This lead to a loop of process:<ul> <li>Expanding util we need to change the minimum value</li> <li>We store the current score, compare to current maximum value, and update if necessary</li> <li>Repeat until we can\u2019t add new element into our started sub-array.</li> </ul> </li> </ul> <p>From the first glance, this look like a O(n) time complexity, which is way better than the minimum O(n log(n)) time complexity.</p> <p>I start with draft code implementation right away</p> <pre><code>class Solution:\ndef maximumScore(self, nums: List[int], k: int) -&gt; int:\nl, r = k, k # Start with a subarray nums[k:k] (inclusive, python is exlusive tho)\n# Init some defaul value\nminElement = nums[k]\nscore = nums[k]\n# Loop until all possible nums is add to the subarray\nwhile (l &gt;= 0 or r &lt; len(nums)):\n# Expanding to the left until `l` is out of array scope, and not changing the minimum value\nwhile l &gt;= 0:\nif nums[l] &gt;= minElement:\nl -= 1\nelse:\nbreak\n# Doing so with the right too\nwhile r &lt; len(nums):\nif nums[r] &gt;= minElement:\nr += 1\nelse:\nbreak\n# Calulating current score and update the maximum score value\ncurrScore = minElement * (r - l + 1)\nif score &lt; currScore:\nscore = currScore\n# Handle the updating minElement expanding\n# Case 1: No more element to add\nif l == -1 and r == len(nums):\nbreak\n# Case 2: Left or Right can't expanding any more (l or r out of scope).\nif l == -1:\nr += 1\nminElement = nums[r]\ncontinue\nif r == len(nums):\nl -= 1\nminElement = nums[l]\ncontinue\n# Case 3: We piority the side where it have the bigger value.\nif nums[l] &gt; nums[r]:\nl -= 1\nminElement = nums[l]\nelse:\nr += 1\nminElement = nums[r]\nreturn score\n</code></pre> <p>I\u2019m not adding any tracking yet, so let try with some value:</p> <p>Example 1:</p> <p>Input: nums = [1,4,3,7,4,5], k = 3 Output: 15 Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. </p> <p>Let trace the value of minElement and the current score, left right position of each one, expected value is here:</p> <pre><code>minElement = nums[3] = 7; left = 3; right = 3; currScore = 7\n-&gt; minElement = 4; left = 3; right = 6; currScore = 4*3\n-&gt; minElement = 3; left = 1; right = 6; currScore = 3*5\n-&gt; minElement = 1; left = -1; right = 6; currScore = 1*6\n</code></pre> <p>After quick look, it seem my implement need to be clear about inclusive and exclusive or the length value could be wrong. I need to add handle where left or right goes out of scope. </p> <p>Which explain the formula <code>currScore = minElement * (min(r, len(nums) -1) - max(0, l) + 1)</code></p> <p>Update version</p> <pre><code>class Solution:\ndef maximumScore(self, nums: List[int], k: int) -&gt; int:\nl, r = k, k # Start with a subarray nums[k:k] (inclusive, python is exlusive tho)\n# Init some defaul value\nminElement = nums[k]\nscore = nums[k]\n# Loop until all possible nums is add to the subarray\nwhile (l &gt;= 0 or r &lt; len(nums)):\n# Expanding to the left until `l` is out of array scope, and not changing the minimum value\nwhile l &gt;= 0:\nif nums[l] &gt;= minElement:\nl -= 1\nelse:\nbreak\n# Doing so with the right too\nwhile r &lt; len(nums):\nif nums[r] &gt;= minElement:\nr += 1\nelse:\nbreak\n# Calulating current score and update the maximum score value\ncurrScore = minElement * (min(r, len(nums) -1) - max(0, l) + 1)\n# Debug line\nprint(f\"minElement = {minElement}; left = {l}; right = {r}; score = {currScore}\")\nif score &lt; currScore:\nscore = currScore\n# Handle the updating minElement expanding\n# Case 1: No more element to add\nif l == -1 and r == len(nums):\nbreak\n# Case 2: Left or Right can't expanding any more (l or r out of scope).\nif l == -1:\nr += 1\nminElement = nums[r]\ncontinue\nif r == len(nums):\nl -= 1\nminElement = nums[l]\ncontinue\n# Case 3: We piority the side where it have the bigger value.\nif nums[l] &gt; nums[r]:\nl -= 1\nminElement = nums[l]\nelse:\nr += 1\nminElement = nums[r]\nreturn score\n</code></pre> <p>Output </p> <pre><code>minElement = 7; left = 2; right = 4; score = 21\nminElement = 5; left = 2; right = 6; score = 20\nminElement = 4; left = 0; right = 6; score = 24\n</code></pre> <p>This doen\u2019t seem right at all tho? <pre><code>minElement = nums[3] = 7; left = 3; right = 3; currScore = 7\n-&gt; minElement = 4; left = 3; right = 6; currScore = 4*3\n-&gt; minElement = 3; left = 1; right = 6; currScore = 3*5\n-&gt; minElement = 1; left = -1; right = 6; currScore = 1*6\n</code></pre></p> <p>I sawing that left and right equal to 2 and 4 right away, while <code>minElement</code> being the same at initial value (equal <code>nums[k] = 7</code>). After some looking, my expanding code is wrong, i need to compare <code>nums[l-1]</code> and <code>nums[r+1]</code> instead:</p> <p>Wrong code:</p> <pre><code>            while l &gt;= 0:\nif nums[l] &gt;= minElement:\nl -= 1\nelse:\nbreak\n# Doing so with the right too\nwhile r &lt; len(nums):\nif nums[r] &gt;= minElement:\nr += 1\nelse:\nbreak\n</code></pre> <p>This lead to a lot more on how to handle range. So here is the new implementation:</p> <ul> <li>The left and right can only expanding till <code>0</code> and <code>len(nums) - 1</code> now instead of <code>-1</code> and <code>len(nums)</code></li> <li>Making most of scope check now reduce by 1 on each side</li> <li>We no longer need to handle <code>currScore</code> out of scope case  <pre><code>from typing import List\nclass Solution:\ndef maximumScore(self, nums: List[int], k: int) -&gt; int:\n# Start with a subarray nums[k:k] (inclusive, python is exlusive tho)\nl, r = k, k\n# Init some defaul value\nminElement = nums[k]\nscore = nums[k]\n# Loop until all possible nums is add to the subarray\nwhile (l &gt;= 0 or r &lt; len(nums)):\n# Expanding to the left until `l` is out of array scope, and not changing the minimum value\nwhile l &gt; 0:\nif nums[l-1] &gt;= minElement:\nl -= 1\nelse:\nbreak\n# Doing so with the right too\nwhile r &lt; len(nums) - 1:\nif nums[r+1] &gt;= minElement:\nr += 1\nelse:\nbreak\n# Calulating current score and update the maximum score value\ncurrScore = minElement * (r - l + 1)\n# Debug line\nprint(\nf\"minElement = {minElement}; left = {l}; right = {r}; score = {currScore}\")\nif score &lt; currScore:\nscore = currScore\n# Handle the updating minElement expanding\n# Case 1: No more element to add\nif l == 0 and r == len(nums) - 1:\nbreak\n# Case 2: Left or Right can't expanding any more (l or r out of scope).\nif l == 0:\nr += 1\nminElement = nums[r]\ncontinue\nif r == len(nums) - 1:\nl -= 1\nminElement = nums[l]\ncontinue\n# Case 3: We piority the side where it have the bigger value.\nif nums[l] &gt; nums[r]:\nl -= 1\nminElement = nums[l]\nelse:\nr += 1\nminElement = nums[r]\nreturn score\na = Solution()\nnums = [1, 4, 3, 7, 4, 5]\nk = 3\na.maximumScore(nums=nums, k=k)\n</code></pre></li> </ul> <p>Output:</p> <pre><code>minElement = 7; left = 3; right = 3; score = 7\nminElement = 4; left = 3; right = 5; score = 12\nminElement = 3; left = 1; right = 5; score = 15\nminElement = 1; left = 0; right = 5; score = 6\n</code></pre> <p>Needed value, seem about right:</p> <ul> <li>We no longer have out of scope value so <code>r = 6</code> reduce to <code>r = 5</code> and <code>l = -1</code> now up to <code>l = 0</code> <pre><code>minElement = nums[3] = 7; left = 3; right = 3; currScore = 7\n-&gt; minElement = 4; left = 3; right = 5 (6); currScore = 4*3\n-&gt; minElement = 3; left = 1; right = 5 (6); currScore = 3*5\n-&gt; minElement = 1; left = 0 (-1); right = 5 (6); currScore = 1*6\n</code></pre></li> </ul> <p>There is pretty much no special case so we can use our draft to summit now.</p> <p>Well, wrong answer, i over look and forgot to update the Case 3: </p> <pre><code>    # Case 3: We piority the side where it have the bigger value.\nif nums[l] &gt; nums[r]:\nl -= 1\nminElement = nums[l]\nelse:\nr += 1\nminElement = nums[r]\n</code></pre> <p>Which need to be <code>l-1</code> and <code>r+1</code> here. Update that and we got: </p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "go", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1793.%20Maximum%20Score%20of%20a%20Good%20Subarray/#implementation-sliding-window", "title": "Implementation: Sliding window", "text": "<p><code>c</code> <code>O(n)</code> <code>O(1)</code></p> <p>Just re implement my python draft code into another language. Anything language can be possible be use here:</p> <pre><code>int maximumScore(int* nums, int numsSize, int k){\nint l = k;\nint r = k;\nint minElement = nums[k];\nint score = nums[k];\nint currScore = -1;\nwhile (l &gt;= 0 &amp;&amp; r &lt; numsSize) {\nwhile (l &gt; 0) {\nif (nums[l-1] &gt;= minElement) {\nl --;\n} else {\nbreak;\n}\n}\nwhile (r &lt; numsSize-1) {\nif (nums[r+1] &gt;= minElement) {\nr ++;\n} else {\nbreak;\n}\n}\ncurrScore = minElement * (r - l + 1);\nif (score &lt; currScore) {\nscore = currScore;\n}\nif (l == 0 &amp;&amp; r == numsSize -1) {\nbreak;\n}\nif (l == 0) {\nr ++;\nminElement = nums[r];\ncontinue;\n}\nif (r == numsSize - 1) {\nl --;\nminElement = nums[l];\ncontinue;\n}\nif (nums[l-1] &gt; nums[r+1]) {\nl --;\nminElement = nums[l];\n} else {\nr ++;\nminElement = nums[r];\n}\n}\nreturn score;\n}\n</code></pre> <p>Here is go lang, which quite identical to c</p> <p><code>go</code> <pre><code>func maximumScore(nums []int, k int) int {\nl := k\nr := k\nminElement := nums[k]\nscore := nums[k]\ncurrScore := -1\nfor l &gt;= 0 &amp;&amp; r &lt; len(nums) {\nfor l &gt; 0 {\nif nums[l-1] &gt;= minElement {\nl --\n} else {\nbreak;\n}\n}\nfor r &lt; len(nums)-1 {\nif nums[r+1] &gt;= minElement {\nr ++\n} else {\nbreak\n}\n}\ncurrScore = minElement * (r - l + 1)\nif score &lt; currScore {\nscore = currScore\n}\nif l == 0 &amp;&amp; r == len(nums) -1 {\nbreak\n}\nif l == 0 {\nr ++\nminElement = nums[r]\ncontinue\n}\nif r == len(nums) - 1 {\nl --\nminElement = nums[l]\ncontinue\n}\nif nums[l-1] &gt; nums[r+1] {\nl --\nminElement = nums[l]\n} else {\nr ++\nminElement = nums[r]\n}\n}\nreturn score\n}\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "c", "go", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/1802.%20Maximum%20Value%20at%20a%20Given%20Index%20in%20a%20Bounded%20Array/", "title": "1802. Maximum Value at a Given Index in a Bounded Array", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1802.%20Maximum%20Value%20at%20a%20Given%20Index%20in%20a%20Bounded%20Array/#problem", "title": "Problem", "text": "<p>You are given three positive integers: <code>n</code>, <code>index</code>, and <code>maxSum</code>. You want to construct an array <code>nums</code> (0-indexed) that satisfies the following conditions:</p> <ul> <li><code>nums.length == n</code></li> <li><code>nums[i]</code> is a positive integer where <code>0 &lt;= i &lt; n</code>.</li> <li><code>abs(nums[i] - nums[i+1]) &lt;= 1</code> where <code>0 &lt;= i &lt; n-1</code>.</li> <li>The sum of all the elements of <code>nums</code> does not exceed <code>maxSum</code>.</li> <li><code>nums[index]</code> is maximized.</li> </ul> <p>Return <code>nums[index]</code> of the constructed array.</p> <p>Note that <code>abs(x)</code> equals <code>x</code> if <code>x &gt;= 0</code>, and <code>-x</code> otherwise.</p> <p>Example 1:</p> <p>Input: n = 4, index = 2,  maxSum = 6 Output: 2 Explanation: nums =  is one array that satisfies all the conditions. There are no arrays that satisfy all the conditions and have nums == 3, so 2 is the maximum nums.</p> <p>Example 2:</p> <p>Input: n = 6, index = 1,  maxSum = 10 Output: 3</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= maxSum &lt;= 10**9</code></li> <li><code>0 &lt;= index &lt; n</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1802.%20Maximum%20Value%20at%20a%20Given%20Index%20in%20a%20Bounded%20Array/#solution", "title": "Solution", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1802.%20Maximum%20Value%20at%20a%20Given%20Index%20in%20a%20Bounded%20Array/#overview-my-sane", "title": "Overview (My sane)", "text": "<p>By the given input, where  <code>nums.length = n &lt;= 10**9</code> , we can be sure that O(log n) is the only way to solve the problem</p> <p>So: Binary search, which and only way. <pre><code>\n</code></pre></p> <p>We define:</p> <ul> <li><code>a...</code> Quickly calculate all elements of numbers does not exceed maxSum</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1802.%20Maximum%20Value%20at%20a%20Given%20Index%20in%20a%20Bounded%20Array/#overview", "title": "Overview", "text": "<p>As usual, let\u2019s start with the example given in the problem statement. Referring to the figure below, there are several ways to make <code>nums[2]</code> the maximum, as shown in the first two examples. However, once we want a larger <code>nums[2]</code> as <code>3</code>, the sum of the array will certainly be greater than <code>maxSum</code>.</p> <p></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1802.%20Maximum%20Value%20at%20a%20Given%20Index%20in%20a%20Bounded%20Array/#approach-greedy-binary-search", "title": "Approach: Greedy + Binary Search", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1802.%20Maximum%20Value%20at%20a%20Given%20Index%20in%20a%20Bounded%20Array/#intuition", "title": "Intuition", "text": "<p>The objective is to maximize <code>nums[index]</code> while ensuring the sum the array does not exceed <code>maxSum</code>, so we can try using a greedy algorithm. In order to maximize <code>nums[index]</code>, we need to ensure that all other values are as small as possible.</p> <p>However, we cannot take the other values to be arbitrarily small. Referring to the two rules given in the problem:</p> <ul> <li>The difference between adjacent numbers cannot be greater than <code>1</code>.</li> <li><code>nums[i]</code> must be positive.</li> </ul> <p>Therefore, the last two examples in the figure below are not valid. In the example in the middle, the difference between adjacent numbers (<code>nums[3]</code> and <code>nums[4]</code>) is greater than <code>1</code>. In the example on the right, the first number is equal to <code>0</code>, which is not allowed.</p> <p>Hence, we need to ensure that <code>nums[i]</code> satisfies these conditions as well.</p> <p></p> <p>Therefore, the straightforward approach is after setting a value for <code>nums[index]</code>, let the numbers to its left decrease one by one from right to left until they reach <code>1</code>. Similarly, the numbers to its right decrease one by one from left to right until they reach <code>1</code>. This way, we can ensure that the total sum of the array is minimized without violating the rules.</p> <p>Next, we need to calculate the sum of the array, which is a purely mathematical problem. Let\u2019s take the numbers to the left of <code>nums[index]</code> as an example. There will be an arithmetic sequence to its left, and (possibly) a consecutive sequence of <code>1</code>s if <code>nums[index]</code> is less than the number of elements to the left. We need to determine the length of the arithmetic sequence based on the relative sizes of <code>index</code> and <code>value</code>.</p> <p>Once we have determined the length of the arithmetic sequence, we can calculate the sum of the sequence using the arithmetic sequence formula:</p> <p><code>sum=(A[1]+A[n])\u22c5n/2</code></p> <p>where <code>A[1]</code> and <code>A[n]</code> are the first and last terms of the sequence respectively, and <code>n</code> is the length of the sequence.</p> <p>Take the following figure as an example:</p> <p></p> <ul> <li> <p>If <code>value &lt;= index</code>, it means in addition to the arithmetic sequence from value to <code>1</code>, there will also be a continuous sequence of <code>1</code>s with length <code>index - value + 1</code>. The sum of all elements on <code>index</code>\u2019s left (including <code>nums[index]</code>) is made up by two parts:</p> <ul> <li>The sum of arithmetic sequence <code>[1, 2, 3, ..., value - 1, value]</code>, which is <code>(value + 1) * value / 2</code>.</li> <li>The sum of sequence of length <code>index - value + 1</code> consisting of all <code>1</code>s, which is <code>index - value + 1</code>.</li> <li> <p>Otherwise, it means there is only one arithmetic sequence on the left side of index, with the first item being <code>value</code> and the last item being <code>value - index</code>, so the sum of all elements on <code>index</code>\u2019s left (including <code>nums[index]</code>) is:</p> </li> <li> <p>The sum of arithmetic sequence <code>[value - index, ..., value - 1, value]</code>, which is <code>(value + value - index) * (index + 1) / 2</code>.</p> </li> </ul> </li> </ul> <p>Similarly, the right side of <code>nums[index]</code> is exactly the same. We need to determine the length of the arithmetic sequence and the length of the continuous subarray of <code>1</code> based on the relative sizes of <code>n - index</code> and <code>value</code>.</p> <p></p> <ul> <li> <p>If <code>value</code> is less than or equal to <code>n - index</code>, it means there is a subarray of length <code>n - index - value</code> consisting of all <code>1</code>s in addition to the arithmetic sequence from <code>value</code> to <code>1</code>. The sum of all elements on <code>index</code>\u2019s right (including <code>nums[index]</code>) is made up by two parts:</p> <ul> <li>The sum of arithmetic sequence <code>[value, value - 1, ..., 2, 1]</code>, which is <code>(value + 1) * value / 2</code>.</li> <li>The sum of sequence of length <code>index - value + 1</code> consisting of all <code>1</code>s, which is <code>n - index - value</code></li> <li> <p>Otherwise, there is only an arithmetic sequence on the right side of index with the first term being <code>value</code> and the last term being <code>value - n + 1 + index</code>, so the sum of all elements on <code>index</code>\u2019s right (including <code>nums[index]</code>) is:</p> </li> <li> <p>The sum of arithmetic sequence <code>[value, value - 1, ..., value - n + 1 + index]</code>, which is <code>(value + value - n + 1 + index) * (n - index) / 2</code>.</p> </li> </ul> </li> </ul> <p>Don\u2019t forget that we have added the actual <code>value</code> at <code>index</code> twice, so we need to subtract the final sum by <code>value</code>.</p> <p>Now that we know how to calculate the array sum given a specific <code>nums[index] = value</code>, the question is how do we maximize <code>value</code>?</p> <p>We can use binary search to find the maximum <code>value</code> that meets the criteria. First, we define a search range <code>[left, right]</code> that ensures the maximum <code>value</code> falls within this range. Next, we perform a binary search within this range. For each boundary value <code>mid</code> that divides the current search space in half, we try whether <code>nums[index] = mid</code> is a feasible value that ensures the sum of the array does not exceed <code>maxSum</code>. If it is valid, we continue searching for a larger <code>mid</code> in the right half of the interval. If it is not feasible, it means that <code>mid</code> is too large, and we need to search for a smaller value in the left half of the interval. In this way, we can halve the search interval at each step, and find the maximum <code>mid</code> that meets the criteria in logarithmic time.  </p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1802.%20Maximum%20Value%20at%20a%20Given%20Index%20in%20a%20Bounded%20Array/#algorithm", "title": "Algorithm", "text": "<ol> <li>We first need to define a function <code>getSum(index, value)</code> to calculate the minimum sum of the array given <code>nums[index] = value</code>.</li> <li>Initialize the search space <code>[left, right]</code>, set <code>left = 1</code> as it is the minimum possible value, set <code>right = maxSum</code> for it is the maximum possible value.</li> <li>While <code>left &lt; right</code>, get the middle index of the search space as <code>mid = (left + right + 1) / 2</code>, and check if <code>getSum(index, mid) &lt;= maxSum</code>:<ul> <li>If so, it means that <code>nums[index] = mid</code> is a valid value, we can go for the right half by setting <code>left = mid</code>.</li> <li>Otherwise, it means that <code>mid</code> is too large for <code>nums[index]</code>, we shall go for the left half of the searching space by setting <code>right = mid - 1</code>.</li> </ul> </li> <li>Return <code>left</code> once the binary search ends.</li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1802.%20Maximum%20Value%20at%20a%20Given%20Index%20in%20a%20Bounded%20Array/#implementation", "title": "Implementation", "text": "<pre><code>class Solution:\ndef getSum(self, index: int, value: int, n: int) -&gt; int:\ncount = 0\n# On index's left:\n# If value &gt; index, there are index + 1 numbers in the arithmetic sequence:\n# [value - index, ..., value - 1, value].\n# Otherwise, there are value numbers in the arithmetic sequence:\n# [1, 2, ..., value - 1, value], plus a sequence of length (index - value + 1) of 1s. \nif value &gt; index:\ncount += (value + value - index) * (index + 1) // 2\nelse:\ncount += (value + 1) * value // 2 + index - value + 1\n# On index's right:\n# If value &gt;= n - index, there are n - index numbers in the arithmetic sequence:\n# [value, value - 1, ..., value - n + 1 + index].\n# Otherwise, there are value numbers in the arithmetic sequence:\n# [value, value - 1, ..., 1], plus a sequence of length (n - index - value) of 1s. \nif value &gt;= n - index:\ncount += (value + value - n + 1 + index) * (n - index) // 2\nelse:\ncount += (value + 1) * value // 2 + n - index - value\nreturn count - value\ndef maxValue(self, n: int, index: int, maxSum: int) -&gt; int:\nleft, right = 1, maxSum\nwhile left &lt; right:\nmid = (left + right + 1) // 2\nif self.getSum(index, mid, n) &lt;= maxSum:\nleft = mid\nelse:\nright = mid - 1\nreturn left\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/1802.%20Maximum%20Value%20at%20a%20Given%20Index%20in%20a%20Bounded%20Array/#complexity-analysis", "title": "Complexity Analysis", "text": "<ul> <li> <p>Time complexity: O(log(maxSum))</p> <ul> <li> <p>We set the searching space as <code>[1, maxSum]</code>, thus it takes O(log(maxSum)) steps to finish the binary search.</p> </li> <li> <p>At each step, we made some calculations that take O(1) time.</p> </li> </ul> </li> <li> <p>Space complexity: O(1)</p> <ul> <li>Both the binary search and the <code>getSum</code> function take O(1) space.</li> </ul> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2008.%20Maximum%20Earnings%20From%20Taxi/", "title": "2008. Maximum Earnings From Taxi", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2008.%20Maximum%20Earnings%20From%20Taxi/#problem", "title": "Problem", "text": "<p>There are <code>n</code> points on a road you are driving your taxi on. The <code>n</code> points on the road are labeled from <code>1</code> to <code>n</code> in the direction you are going, and you want to drive from point <code>1</code> to point <code>n</code> to make money by picking up passengers. You cannot change the direction of the taxi.</p> <p>The passengers are represented by a 0-indexed 2D integer array <code>rides</code>, where <code>rides[i] = [starti, endi, tipi]</code> denotes the <code>ith</code> passenger requesting a ride from point <code>starti</code> to point <code>endi</code> who is willing to give a <code>tipi</code> dollar tip.</p> <p>For each passenger <code>i</code> you pick up, you earn <code>endi - starti + tipi</code> dollars. You may only drive at most one passenger at a time.</p> <p>Given <code>n</code> and <code>rides</code>, return the maximum number of dollars you can earn by picking up the passengers optimally.</p> <p>Note: You may drop off a passenger and pick up a different passenger at the same point.</p> <p>Example 1: <pre><code>**Input:** n = 5, rides = [[2,5,4],[1,5,1|2,5,4],[1,5,1]]\n**Output:** 7\n**Explanation:** We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars.\n</code></pre></p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10**5</code></li> <li><code>1 &lt;= rides.length &lt;= 3 * 10**4</code></li> <li><code>rides[i].length == 3</code></li> <li><code>1 &lt;= start_i &lt; end_i &lt;= n</code></li> <li><code>1 &lt;= tip_i &lt;= 10**5</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2008.%20Maximum%20Earnings%20From%20Taxi/#solve", "title": "Solve", "text": "<p>This need some Dynamic programming</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2008.%20Maximum%20Earnings%20From%20Taxi/#minimize-memory-allocation-solution", "title": "Minimize memory allocation solution", "text": "<ul> <li>Closely related to 1751. Maximum Number of Events That Can Be Attended II, where I use a binary search to stored best found choosing rides/events with each <code>end</code> at position <code>index</code>. Storing it it in a  <code>lookup</code> array, we have either:<ul> <li>(Case 1) Last found best rides array <code>lookup[end] = lookup[end-1]</code> </li> <li>(Case 2) Choosing current ride and best found <code>[..., end]</code> with <code>end &lt; start[index]</code>. <code>lookup[end] = value_of_the_ride + lookup[start-1]</code> </li> </ul> </li> </ul> <p><code>end-1</code> or <code>start-1</code> here is just for representation, as I try to minimize the total memory for the <code>lookup</code> array by using Binary search instead.</p> <ul> <li>Sorting: To get the best result, any possible ride we can take between two ride in (Case 2) need to already process. so we need to sort <code>rides</code> array by <code>end</code> to make sure our calculated in a right order.</li> <li>Storing: With two array <code>key</code>, and <code>lookup</code> which is where we save the current <code>end</code> and total <code>value</code> of the path (now tbh, <code>key</code> isn\u2019t doing that much as it just a better way to get <code>[r[1] for r in rides[:index]]</code>), </li> </ul> <pre><code>class Solution:\ndef maxTaxiEarnings(self, n: int, rides: List[List[int]]) -&gt; int:\ndef sort_key_end(x):\nreturn x[1]\ndef binary_search(arr, value):\nl = -1\nr = len(arr)\nwhile l+1&lt;r:\nm = (l + r) //2\ncurr_val = arr[m]\nif curr_val &lt;= value:\nl = m\nelse:\nr = m\nis_found = l &gt; -1\nreturn is_found, l\nrides.sort(key=sort_key_end)\nlookup = []\nkey = []\nfor index, (s, e, v) in enumerate(rides):\nlookup.append(e - s + v)\nkey.append(e)\nis_found, possible = binary_search(key, s)\nif is_found:\nlookup[index] += lookup[possible]\nif lookup[index] &lt; lookup[index - 1]:\nlookup[index] = lookup[index - 1]\nreturn lookup[len(rides)-1]\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2008.%20Maximum%20Earnings%20From%20Taxi/#using-hash-map-to-sort-instead", "title": "Using hash map to sort instead", "text": "<p>We can using a hash map with <code>dict()</code> instead for better sorting in O(n) time complexity and O(1) look up too, here is a lazy <code>Crtl + C</code> implementation:</p> <ul> <li>This sorted rides by <code>start</code> instead (which making you need to go backward from <code>end</code> to <code>start</code> instead)</li> <li>The checking parse get all possible (case 2) at current position, find the max one with <code>max(dp[i], dp[e] + d)</code>, after all of that, recheck (case 1) with final update <code>dp[i] = max(dp[i], dp[i + 1])</code> <pre><code>class Solution:\ndef maxTaxiEarnings(self, n: int, rides: List[List[int]]) -&gt; int:\nrideStartAt = defaultdict(list)\nfor s, e, t in rides:\nrideStartAt[s].append([e, e - s + t])\ndp = [0] * (n + 1)\nfor i in range(n - 1, 0, -1):\nfor e, d in rideStartAt[i]:\ndp[i] = max(dp[i], dp[e] + d)\ndp[i] = max(dp[i], dp[i + 1])\nreturn dp[1]\n</code></pre></li> </ul> <p>Quick rewrite it again, yeah, same thing. <pre><code>from typing import List\nfrom collections import defaultdict\nclass Solution:\ndef maxTaxiEarnings(self, n: int, rides: List[List[int]]) -&gt; int:\nrideStartAt = defaultdict(list)\nfor start, end, tip in rides:\nrideStartAt[start].append([end, end - start + tip])\nlookup = [0] * (n + 1)\nfor i in range(n - 1, 0, -1):\nfor end, true_value in rideStartAt[i]:\nlookup[i] = max(lookup[i], lookup[end] + true_value)\nlookup[i] = max(lookup[i], lookup[i + 1])\nreturn lookup[1]\n</code></pre></p> <p>We just storing in a normal array instead of using binary search</p> <p>My first implementation is affected by 1751. Maximum Number of Events That Can Be Attended II, the binary search part isn\u2019t necessary and increasing a lot of computed time.</p> <p>Here is implementation my re implementation which <code>lookup</code> is an array with its range is base on <code>n</code> (the worst case it is only <code>[0..10**5]</code>). Which return the Accepted with <code>1550 ms</code> <pre><code>class Solution_2:\ndef maxTaxiEarnings(self, n: int, rides: List[List[int]]) -&gt; int:\ndef sort_key_end(x):\nreturn x[1]\nrides.sort(key=sort_key_end)\nlookup = [0] * (n + 1)\ncar_pos = 1\nfor s, e, v in rides:\nfor i in range(car_pos, e):\nlookup[i] = lookup[car_pos]\ncar_pos = e\npossible = (e - s + v)\nif s &gt; 0:\npossible += lookup[s]\nlookup[e] = max(lookup[e], lookup[e-1], possible)\nreturn lookup[car_pos]\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2008.%20Maximum%20Earnings%20From%20Taxi/#looking-for-the-best-of-best-implementation", "title": "Looking for the best of best implementation?", "text": "<p>Here is sample <code>1542 ms</code> submission <pre><code>class Solution:\ndef maxTaxiEarnings(self, n: int, rides: List[List[int]]) -&gt; int:\nrides.sort(key=lambda r: r[1])\ncur = [-1]\ndollars = [0]\nfor st, ed, tip in rides:\ni = bisect_right(cur, st)\nearn = dollars[i - 1] + ed - st + tip\ndollars.append(max(dollars[-1], earn))\ncur.append(ed)\nreturn dollars[-1]\n</code></pre></p> <p>Python isn\u2019t that fast, so anything that you get from standard library will get you quite far on the leader board. <code>bisect_right</code> being use here is a python array helper function that alternate Binary search implementation.</p> <ul> <li>There is a lot of similarity to the first implementation. My retry on rewriting the same function <pre><code>class Solution:\ndef maxTaxiEarnings(self, n: int, rides: List[List[int]]) -&gt; int:\ndef sort_key_end(x):\nreturn x[1]\nrides.sort(key=sort_key_end)\nkey = [-1]\nlookup = [0]\nfor start, end, tip in rides:\nsearch = bisect_right(key, start)\ntrue_rides_value = lookup[search - 1] + end - start + tip\nlookup.append(max(lookup[-1], true_rides_value))\nkey.append(end)\nreturn lookup[-1]\n</code></pre></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2008.%20Maximum%20Earnings%20From%20Taxi/#final-result", "title": "Final result", "text": "Time Submitted Status Runtime Memory Language Agro 07/15/2023 19:52 Accepted 1566 ms 36.2 MB python3 Best one 07/15/2023 17:46 Accepted 1550 ms 36.3 MB python3 Array 07/15/2023 08:10 Accepted 2043 ms 48.8 MB python3 Binary search 07/15/2023 08:08 Accepted 1962 ms 36.4 MB python3 Dict implement 07/15/2023 08:07 Accepted 2026 ms 36.5 MB python3 First try (Binary search)", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2038.%20Remove%20Colored%20Pieces%20if%20Both%20Neighbors%20are%20the%20Same%20Color/", "title": "2038. Remove Colored Pieces if Both Neighbors are the Same Color", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/2038.%20Remove%20Colored%20Pieces%20if%20Both%20Neighbors%20are%20the%20Same%20Color/#problem", "title": "Problem", "text": "<p>There are <code>n</code> pieces arranged in a line, and each piece is colored either by <code>'A'</code> or by <code>'B'</code>. You are given a string <code>colors</code> of length <code>n</code> where <code>colors[i]</code> is the color of the <code>ith</code> piece.</p> <p>Alice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first.</p> <ul> <li>Alice is only allowed to remove a piece colored <code>'A'</code> if both its neighbors are also colored <code>'A'</code>. She is not allowed to remove pieces that are colored <code>'B'</code>.</li> <li>Bob is only allowed to remove a piece colored <code>'B'</code> if both its neighbors are also colored <code>'B'</code>. He is not allowed to remove pieces that are colored <code>'A'</code>.</li> <li>Alice and Bob cannot remove pieces from the edge of the line.</li> <li>If a player cannot make a move on their turn, that player loses and the other player wins.</li> </ul> <p>Assuming Alice and Bob play optimally, return <code>true</code> if Alice wins, or return <code>false</code> if Bob wins.</p> <p>Example 1:</p> <p>Input: colors = \u201cAAABABB\u201d Output: true Explanation: AAABABB -&gt; AABABB Alice moves first. She removes the second \u2018A\u2019 from the left since that is the only \u2018A\u2019 whose neighbors are both \u2018A\u2019.</p> <p>Now it\u2019s Bob\u2019s turn. Bob cannot make a move on his turn since there are no \u2018B\u2019s whose neighbors are both \u2018B\u2019. Thus, Alice wins, so return true.</p> <p>Example 2:</p> <p>Input: colors = \u201cAA\u201d Output: false Explanation: Alice has her turn first. There are only two \u2018A\u2019s and both are on the edge of the line, so she cannot move on her turn. Thus, Bob wins, so return false.</p> <p>Example 3:</p> <p>Input: colors = \u201cABBBBBBBAAA\u201d Output: false Explanation: ABBBBBBBAAA -&gt; ABBBBBBBAA Alice moves first. Her only option is to remove the second to last \u2018A\u2019 from the right.</p> <p>ABBBBBBBAA -&gt; ABBBBBBAA Next is Bob\u2019s turn. He has many options for which \u2018B\u2019 piece to remove. He can pick any.</p> <p>On Alice\u2019s second turn, she has no more pieces that she can remove. Thus, Bob wins, so return false.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= colors.length &lt;= 10**5</code></li> <li><code>colors</code> consists of only the letters <code>'A'</code> and <code>'B'</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/2038.%20Remove%20Colored%20Pieces%20if%20Both%20Neighbors%20are%20the%20Same%20Color/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/2038.%20Remove%20Colored%20Pieces%20if%20Both%20Neighbors%20are%20the%20Same%20Color/#white-board", "title": "White board", "text": "<ul> <li>Quickly remove edge case:<ul> <li>Length less than 2 then no game is play here, Alice loss in the spot</li> </ul> </li> <li>The best move Alice can play isn\u2019t affect B at all<ul> <li>Alice can\u2019t touch color <code>B</code>, Bob also can\u2019t touch color <code>A</code></li> <li>This mean I can do some count and try to know how much move can Alice and Bob make from a stage or just simulating the game with random move until I know who won</li> </ul> </li> </ul> <p>Let start with <code>Counting</code> and see how can we done this:</p> <ul> <li>With a continuous range with same color length any we can remove at most <code>length(range)-2</code>. For example: \u201cBBBB\u201d -&gt; \u201cBBB\u201d -&gt; \u201cBB\u201d</li> <li>We can count all base on all possible continuous range we can find going in one loop from left to right</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/2038.%20Remove%20Colored%20Pieces%20if%20Both%20Neighbors%20are%20the%20Same%20Color/#implementation", "title": "Implementation", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/2038.%20Remove%20Colored%20Pieces%20if%20Both%20Neighbors%20are%20the%20Same%20Color/#counting", "title": "Counting", "text": "<p>I just start spamming keyboard for code and here is the first implementation</p> <pre><code>ALICE_WINS = True\nALICE_LOSE = False\nclass Solution:\ndef winnerOfGame(self, colors: str) -&gt; bool:\nif len(colors) &lt;= 2:\nreturn ALICE_LOSE\ncountA, countB = 0, 0\nstart = 0\nend = 0\ncolor = colors[0]\nfor i,c in enumerate(colors):\nif i == 0:\ncontinue\nif c == color:\nend += 1\ncontinue\nif color == 'A':\ncountA += end - start - 1\nelse:\ncountB += end - start - 1\nstart = end = i\ncolor = c\nif start != end:\nif color == 'A':\ncountA += end - start - 1\nelse:\ncountB += end - start - 1\nreturn countA &gt; countB\n</code></pre> <p>When we have total possible move of Alice equal to Bob\u2019s, then Alice is lose because Alice go first, this mean only when <code>countA &gt; countB</code> Alice can win </p> <p>Debug process that throwing wrong answer because of I not handle case where length of range &lt;= 2. This can be a lot of If case so I just adding <code>max(0, end - start - 1)</code> instead.</p> <p>Also, separating the final start and end range outside the loop seen prone to error, so I padding a last character to <code>colors</code> so that the last loop always trigger</p> <p>Final implementation.</p> Time Submitted Status Runtime Memory Language 10/02/2023 21:15 Accepted 197 ms 17.3 MB python3 <pre><code>ALICE_WINS = True\nALICE_LOSE = False\nclass Solution:\ndef winnerOfGame(self, colors: str) -&gt; bool:\nif len(colors) &lt;= 2:\nreturn ALICE_LOSE\ncountA, countB = 0, 0\nstart = 0\nend = 0\ncolor = colors[0]\nfor i,c in enumerate(colors + \"C\"):\nif i == 0:\ncontinue\nif c == color:\nend += 1\ncontinue\nif color == 'A':\ncountA += max(0, end - start - 1)\nelse:\ncountB += max(0, end - start - 1)\nstart = end = i\ncolor = c\nreturn countA &gt; countB\n</code></pre> <p>This have time complexity of <code>O(n)) and space complexity of O(1</code>. </p> <p>Unless we count <code>colors + \"C\"</code> cost us a O(n) space ??, remove it will return almost no different in python so I\u2019m not sure</p> <p>But here is the implementation without padding </p> Time Submitted Status Runtime Memory Language 10/02/2023 21:22 Accepted 186 ms 17.5 MB python3 <pre><code>ALICE_WINS = True\nALICE_LOSE = False\nclass Solution:\ndef winnerOfGame(self, colors: str) -&gt; bool:\nif len(colors) &lt;= 2:\nreturn ALICE_LOSE\ncountA, countB = 0, 0\nstart = 0\nend = 0\ncolor = colors[0]\nfor i,c in enumerate(colors):\nif i == 0:\ncontinue\nif c == color:\nend += 1\ncontinue\nif color == 'A':\ncountA += max(0, end - start - 1)\nelse:\ncountB += max(0, end - start - 1)\nstart = end = i\ncolor = c\nif start != end:\nif color == 'A':\ncountA += max(0, end - start - 1)\nelse:\ncountB += max(0, end - start - 1)\nreturn countA &gt; countB\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/2140.%20Questions%20With%20Brainpower/", "title": "2140. Questions With Brainpower", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2140.%20Questions%20With%20Brainpower/#problem", "title": "Problem", "text": "<p>You are given a 0-indexed 2D integer array <code>questions</code> where <code>questions[i] = [pointsi, brainpoweri]</code>.</p> <p>The array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question <code>0</code>) and make a decision whether to solve or skip each question. Solving question <code>i</code> will earn you <code>pointsi</code> points but you will be unable to solve each of the next <code>brainpoweri</code> questions. If you skip question <code>i</code>, you get to make the decision on the next question.</p> <ul> <li>For example, given <code>questions = [[3, 2], [4, 3], [4, 4], [2, 5|3, 2], [4, 3], [4, 4], [2, 5]]</code>:<ul> <li>If question <code>0</code> is solved, you will earn <code>3</code> points but you will be unable to solve questions <code>1</code> and <code>2</code>.</li> <li>If instead, question <code>0</code> is skipped and question <code>1</code> is solved, you will earn <code>4</code> points but you will be unable to solve questions <code>2</code> and <code>3</code>.</li> </ul> </li> </ul> <p>Return the maximum points you can earn for the exam.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= questions.length &lt;= 105</code></li> <li><code>questions[i].length == 2</code></li> <li><code>1 &lt;= pointsi, brainpoweri &lt;= 105</code></li> </ul> <p>Example 1:</p> <pre><code>**Input:** questions = [[3,2],[4,3],[4,4],[2,5|3,2],[4,3],[4,4],[2,5]]\n**Output:** 5\n**Explanation:** The maximum points can be earned by solving questions 0 and 3.\n\n- Solve question 0: Earn 3 points, will be unable to solve the next 2 questions\n- Unable to solve questions 1 and 2\n- Solve question 3: Earn 2 points\nTotal points earned: 3 + 2 = 5. There is no other way to earn 5 or more points.\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2140.%20Questions%20With%20Brainpower/#solve", "title": "Solve", "text": "<p>Info: https://leetcode.com/problems/solving-questions-with-brainpower/</p> <p>This is the one I come up with: <pre><code>class Solution:\ndef mostPoints(self, questions: List[List[int]]) -&gt; int:\nself.n = questions.__len__()\nself.trace = [[0,0] for i in range(self.n)]\ni = 0\nfor v,bp in questions[::-1]:\nif i &gt; 0:\nself.trace[i][0]=max(self.trace[i-1][0], self.trace[i-1][1])\nif i-bp-1&lt;0:\nself.trace[i][1] = v\nelse:\nself.trace[i][1] = v + max(self.trace[i-bp-1][0], self.trace[i-bp-1][1])\ni+= 1\nreturn max(self.trace[self.n-1][0], self.trace[self.n-1][1])\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2140.%20Questions%20With%20Brainpower/#first-look", "title": "First look", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2140.%20Questions%20With%20Brainpower/#problem-analised", "title": "Problem analised", "text": "<p>Giving the problem with the skipping, it get a bit tricky:</p> <ol> <li>Let say you go from the first to last question,<ol> <li>If there is only one question <code>questions[0]</code>, then chose to do the first question <code>questions[0]</code>  will give the most point. We have <code>maxPoint( questions[0] ) = q[0].value</code></li> <li>But if there is 2 question, there will be 2 case: <ol> <li>We want to do the second question, which lead to 2 child case:<ol> <li>We want to do only the second question:<ol> <li>This mean <code>questions[1].value &gt;= question[0].value</code></li> <li><code>questions[0]</code> .brainPower &gt;= 1: which mean if we try to do it, we need to skip at least 1 question, meanning skip the second question <code>questions[1]</code> </li> <li>maxPoint( <code>questions[0..1]</code> ) = q[1].value </li> </ol> </li> <li>We can do both questtion<ol> <li><code>questions[0]</code> .brainPower == 0: which mean if we try to do it, we can still do the second question <code>questions[1]</code> </li> <li>maxPoint( <code>questions[0..1]</code> ) = q[1].value + q[0].value</li> </ol> </li> </ol> </li> <li>We don\u2019t want to do the second question<ol> <li>This mean <code>questions[1]</code> . value &lt; <code>question[0]</code> .value</li> <li><code>questions[0]</code> .brainPower &gt;= 1: which mean if we try to do it, we need to skip at least 1 question, meanning skip the second question <code>questions[1]</code></li> <li>maxPoint( <code>questions[0..1]</code> ) =  q[0].value</li> </ol> </li> </ol> </li> <li>Let keep it going: add the third question, the best point of current could be:<ol> <li>We want to do  the third question<ol> <li>We want to do only the third question<ol> <li>This mean <code>questions[2]</code> . value &gt;= the maxPoint(question[0..1])</li> <li>Also,  <code>questions[i]</code> .brainPower &gt;= 1 + i (i=[0..1]) : which mean if we try to do it, we need to skip the third question <code>questions[2]</code> </li> <li>We could see a recusive approad here</li> </ol> </li> <li>We could do the third question, but we need to find<ol> <li><code>questions[i]</code> .brainPower &lt; 1 + i (i=[0..1]): which mean if we do it, we can still do the third question <code>questions[2]</code> </li> <li>Here, we can see a bad partent:<ol> <li>If we can find a matching <code>questions[i]</code> .brainPower &lt; 1+ i: maxPoint(question[0..i]) still isn\u2019t mean we have used <code>questions[i]</code> in it</li> <li>Which lead to a seperated:<ol> <li>maxPoint(question[0..i]) that use <code>questions[i]</code> and have the corresponding <code>questions[i]</code>.brainPower</li> <li>maxPoint(question[0..i]) that not <code>questions[i]</code> and we need to trace back which is the last <code>question[j]</code> (j != i) being done, and what is it\u2019s corresponding brainPower</li> </ol> </li> <li>This could mean we have to handle traceback/max table for each of there case</li> </ol> </li> </ol> </li> </ol> </li> <li>We skip the third question: Well, which mean we can keep the maxPoint(question[0..1]) of two last question</li> </ol> </li> </ol> </li> <li>This could mean we have a O(n^2) if we not careful to handle the trace back and find the best maxPoint(question[0..i])</li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2140.%20Questions%20With%20Brainpower/#first-implementation", "title": "First implementation", "text": "<p>Still, here could be the answer</p> <pre><code>class Solution:\ndef mostPoints(self, questions: List[List[int]]) -&gt; int:\nself.n = questions.__len__()\n# Define trace array for trace back -1 mean we have no traceback; first value is the last question we do when we not do the question [i], second value is when we do the question [i] \nself.trace = [[-1,i] for i in range(self.n)]\n# Define max array to give us a maxPoint table for cache the result instead of calling mostPoint over and over; Simmilar to trace, the first value is when we not do the question [i], second one is when we do the question[i] \nself.max = [[0,0] for i in range(self.n)]\ni = 0\nfor v,bp in questions:\n# Handle the first one\nif i==0:\nself.max[i][0]= 0\nself.max[i][1] = questions[0][0]\nself.trace[i][0] = -1\nself.trace[i][1] = 0\ncontinue\n# find max case\ninnerMax = 0\ninnerTrace = -1\nfor innerIndex in range(i):\nif self.trace[innerIndex][0] != -1:\nif innerMax &lt; self.max[innerIndex][0]:\ninnerMax = self.max[innerIndex][0]\ninnerTrace = self.trace[innerIndex][0\nif innerMax &lt; self.max[innerIndex][0]:\ninnerMax = self.max[innerIndex][0]\ninnerTrace = self.trace[innerIndex][0]\n# TODO............\ni+= 1\nreturn max(self.trace[self.n-1][0], self.trace[self.n-1][1])\n</code></pre> <p>The code it self become too much of a head ache; and also, the double for loop make me feel like there should be a better solution.</p> <p>This is when i revaluate the aproad for better solution and also, fix the mess code above.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2140.%20Questions%20With%20Brainpower/#revaluate", "title": "Revaluate", "text": "<ol> <li>We could go back-ward, doing the last question back to the first question. <ol> <li>This make the brainPower from from skip \u201cahead\u201d infomation problem (Which later information being rely on a lot of trace back info and need all history data for processing) : <code>MaxPoint(question[0..i]) = max(question[i].value + maxPoint(question[0..i-1]) that isn't *require* question[i] to be skip, maxPoint(question[0..i-1]))</code></li> <li>into a skip \u201cbehind\u201d problem (Which we can predicted exact infomation needed): when doing question[i], the maxPoint value after skipping question[i].brainPower will alway be <code>question[i].value + maxPoint([i+question[i].brainPower .. n])</code> without any condition: <code>maxPoint(question[i..n]) = max(question[i].value + maxPoint([i+question[i].brainPower .. n]), maxPoint(question[i+1..n]))</code></li> </ol> </li> <li>Now that more like it; we not need to go and code to finding something weird like <code>that isn't *require* question[i] to be skip</code></li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2140.%20Questions%20With%20Brainpower/#recusive-approad", "title": "Recusive approad", "text": "<pre><code>class Solution:\ndef mostPoints(self, questions: List[List[int]]) -&gt; int:\nif questions.__len__() == 0:\nreturn 0\nn = questions.__len__()\nv = questions[0][0]\nbp = questions[0][1]\nreturn max(v + self.mostPoints(questions[bp+1:n]), self.mostPoints( questions[1:n]))\n</code></pre> <p>quite slow tho; also, this is when i learn about <code>@cache</code> in python; it can\u2019t be use for List type, so just global the question infomation and instead using index value as parameter. Here is a updated code</p> <pre><code>class Solution:\n@cache\ndef maxPoints(self, x):\nif x&gt;=self.n:\nreturn 0\nv = self.questions[x][0]\nbp = self.questions[x][1]\nreturn max(v + self.maxPoints(x+bp+1), self.maxPoints(x+1))\ndef mostPoints(self, questions: List[List[int]]) -&gt; int:\nself.n = questions.__len__()\nself.questions = questions\nreturn maxPoints(0)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2140.%20Questions%20With%20Brainpower/#dynamic-approad", "title": "Dynamic approad", "text": "<p>Yeah, just do it at this point; These should be better to understand than my first submit</p> <pre><code>class Solution:\ndef mostPoints(self, questions: List[List[int]]) -&gt; int:\nn = questions.__len__()\nmaxTable = [0]*n\nmaxTable[n-1] = questions[n-1][0]\ni = n-2\nfor v, bp in questions[::-1]:\nif i+bp+1 &lt; n:\nv += maxTable[i+bp+1] \nmaxTable[i] = max(v, maxTable[i+1])\ni -= 1\nreturn maxTable[0]\n</code></pre> <ol> <li>The first submit code [i] value will be separate if I do it or not</li> <li>I using hard code to separate the len = 1 (which turn into an if statement inside the for loop in the first submit code)</li> <li>Invert the for loop index value from n down to 1; instead couting up 1 to n like in the first submit code.</li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2141.%20Maximum%20Running%20Time%20of%20N%20Computers/", "title": "2141. Maximum Running Time of N Computers", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2141.%20Maximum%20Running%20Time%20of%20N%20Computers/#problem", "title": "Problem", "text": "<p>You have <code>n</code> computers. You are given the integer <code>n</code> and a 0-indexed integer array <code>batteries</code> where the <code>ith</code> battery can run a computer for <code>batteries[i]</code> minutes. You are interested in running all <code>n</code> computers simultaneously using the given batteries.</p> <p>Initially, you can insert at most one battery into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.</p> <p>Note that the batteries cannot be recharged.</p> <p>Return the maximum number of minutes you can run all the <code>n</code> computers simultaneously.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2141.%20Maximum%20Running%20Time%20of%20N%20Computers/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2141.%20Maximum%20Running%20Time%20of%20N%20Computers/#first-implementation-simulation", "title": "First implementation - Simulation", "text": "<pre><code>class Solution:\ndef maxRunTime(self, n: int, batteries: List[int]) -&gt; int:\nif n == len(batteries):\nreturn min(batteries)\ntime = 0\nwhile len(batteries) &gt;= n:\nbatteries.sort(reverse = True)\nrunOut = []\nfor i in range(n):\nbatteries[i] = batteries[i] - 1\nif batteries[i] == 0:\nrunOut.append(i)\nfor i in runOut[::-1]:\nbatteries.pop(i)\ntime += 1\nreturn time\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2328.%20Number%20of%20Increasing%20Paths%20in%20a%20Grid/", "title": "2328. Number of Increasing Paths in a Grid", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2328.%20Number%20of%20Increasing%20Paths%20in%20a%20Grid/#problem", "title": "Problem", "text": "<p>You are given an <code>m x n</code> integer matrix <code>grid</code>, where you can move from a cell to any adjacent cell in all <code>4</code> directions.</p> <p>Return the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. Since the answer may be very large, return it modulo <code>109 + 7</code>.</p> <p>Two paths are considered different if they do not have exactly the same sequence of visited cells.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2328.%20Number%20of%20Increasing%20Paths%20in%20a%20Grid/#solution", "title": "Solution", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2328.%20Number%20of%20Increasing%20Paths%20in%20a%20Grid/#overview", "title": "Overview", "text": "<ul> <li>A cell itself is also a valid path, so each cell in the grid stands for a unique path.</li> <li>The path must be strictly increasing, so the paths colored in red are invalid.</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2328.%20Number%20of%20Increasing%20Paths%20in%20a%20Grid/#approach-1-sorting-dp", "title": "Approach 1: Sorting + DP.", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2328.%20Number%20of%20Increasing%20Paths%20in%20a%20Grid/#intuition", "title": "Intuition", "text": "<p>Let\u2019s build an auxiliary array <code>dp</code> of the same size as <code>grid</code> to represent the number of paths that end at each cell. Initially, the value of each <code>dp[i][j]</code> cell is <code>1</code>, which stands for the path made by <code>grid[i][j]</code> cell itself.</p> <p>Then, for each cell <code>grid[i][j]</code>, we need to look for its neighbor cells in 4 directions, if there exists a neighbor cell (let\u2019s say <code>grid[i + 1][j]</code>) that is larger than <code>grid[i][j]</code>, it means every path that ends at <code>grid[i][j]</code> can be extended to <code>grid[i + 1][j]</code>. Therefore, the number of paths ending at <code>grid[i + 1][j]</code> should be incremented by <code>grid[i][j]</code>.</p> <p>However, if we traverse all cells by arbitrary order, we might need many repeated updates, as described below.</p> <p></p> <p>It implies that we should iterate over all cells by value. If we sort these cells by value, then traverse over them from the smallest. This ensures that the number of paths ending at each cell in <code>dp</code> is updated only once.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2328.%20Number%20of%20Increasing%20Paths%20in%20a%20Grid/#algorithm", "title": "Algorithm", "text": "<ol> <li>Initialize <code>dp</code>, a 2-d array of the same size as <code>grid</code>, and set every value as <code>1</code>.</li> <li>Sort all cells by value and iterate over the sorted cells.</li> <li>For each cell <code>grid[i][j]</code>, check its 4-direction neighbor cells, if a neighbor cell <code>grid[curr_i][curr_j]</code> has a larger value, then increment <code>dp[curr_i][curr_j]</code> by <code>dp[i][j]</code>.</li> <li>Return the sum of all cells of <code>dp</code> when the iteration ends.</li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2328.%20Number%20of%20Increasing%20Paths%20in%20a%20Grid/#implementation", "title": "Implementation", "text": "<pre><code>class Solution:\ndef countPaths(self, grid: List[List[int]]) -&gt; int:\nm, n = len(grid), len(grid[0])\nmod = 10 ** 9 + 7\ndirections = [[0, 1], [0, -1], [1, 0], [-1, 0|0, 1], [0, -1], [1, 0], [-1, 0]]\n# Initialize dp, 1 stands for the path made by a cell itself.\ndp = [[1] * n for _ in range(m)]\n# Sort all cells by value.\ncell_list = [[i, j] for i in range(m) for j in range(n)]\ncell_list.sort(key = lambda x: grid[x[0]][x[1]])\n# Iterate over the sorted cells, for each cell grid[i][j]: \nfor i, j in cell_list:\n# Check its four neighbor cells, if a neighbor cell grid[curr_i][curr_j] has a\n# larger value, increment dp[curr_i][curr_j] by dp[i][j]\nfor di, dj in directions:\ncurr_i, curr_j = i + di, j + dj\nif 0 &lt;= curr_i &lt; m and 0 &lt;= curr_j &lt; n and grid[curr_i][curr_j] &gt; grid[i][j]:\ndp[curr_i][curr_j] += dp[i][j]\ndp[curr_i][curr_j] %= mod\n# Sum over dp[i][j].\nreturn sum(sum(row) % mod for row in dp) % mod\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2328.%20Number%20of%20Increasing%20Paths%20in%20a%20Grid/#complexity-analysis", "title": "Complexity Analysis", "text": "<p>Let <code>m\u00d7n</code> be the size of the input array <code>grid</code>.</p> <ol> <li> <p>Time complexity: <code>O(m\u22c5n\u22c5log(m\u22c5n))</code></p> <ul> <li>We sort all cells by value, it takes <code>O(klogk)</code> to sort an array of size <code>O(k)</code>, so it takes <code>O(m\u22c5n\u22c5log(m\u22c5n))</code> time.</li> <li>The iteration over sorted cells has <code>O(m\u22c5n)</code> steps, each step consists of checking at most four neighbor cells, thus it takes <code>O(m\u22c5n)</code> time.</li> <li>For initialization of <code>dp</code> and the calculation of <code>answer</code> we iterate over all the cells of the <code>dp</code> array, which also takes <code>O(m\u22c5n)</code> time.</li> <li>To sum up, the overall time complexity is <code>O(m\u22c5n\u22c5log(m\u22c5n))</code>.</li> </ul> </li> <li> <p>Space complexity: <code>O(m\u22c5n)</code></p> <ul> <li>We used two arrays, <code>cellList</code> and <code>dp</code>, they both contain <code>O(m\u22c5n)</code> elements.</li> </ul> </li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/", "title": "2352. Equal Row and Column Pairs   solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#problem", "title": "Problem", "text": "<p>Given a 0-indexed <code>n x n</code> integer matrix <code>grid</code>, return the number of pairs <code>(ri, cj)</code> such that row <code>ri</code> and column <code>cj</code> are equal.</p> <p>A row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).</p> <p>Example 1: <pre><code>**Input:** grid = [[3,2,1],[1,7,6],[2,7,7|3,2,1],[1,7,6],[2,7,7]]\n**Output:** 1\n**Explanation:** There is 1 equal row and column pair:\n\n- (Row 2, Column 1): [2,7,7]\n</code></pre> Example 2: <pre><code>**Input:** grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2|3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]\n**Output:** 3\n**Explanation:** There are 3 equal row and column pairs:\n- (Row 0, Column 0): [3,1,2,2]\n- (Row 2, Column 2): [2,4,2,2]\n- (Row 3, Column 2): [2,4,2,2]\n</code></pre> Constraints:</p> <ul> <li><code>n == grid.length == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 200</code></li> <li><code>1 &lt;= grid[i][j] &lt;= 105</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#solution", "title": "Solution", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#my-hash-solution", "title": "My - Hash solution", "text": "<p>Using hash function to quickly compare column and array. Define </p> <ul> <li>The <code>getColumns()</code> to get all column in the given grid, costing O(n^2) time</li> <li>Calculate and storing hash array of all row and column, costing O(n) time</li> <li>Map each <code>&lt;hash, index&gt;</code> for quickly reference all row and column sharing a same hash, costing O(n) time</li> </ul> <pre><code>class Solution:\ndef getColumns(self,grid):\ncolumns = []\ntotalRow = totalColumn = len(grid)\nfor c in range(totalColumn):\ntmp = []\nfor r in range(totalRow):\ntmp.append(grid[r][c])\ncolumns.append(tmp)\nreturn columns\ndef arrayHash(self, array):\nreturn tuple(array).__hash__()\ndef equalPairs(self, grid: List[List[int]]) -&gt; int:\nrowsHash = [self.arrayHash(r) for r in grid]\ncolumnsHash = [self.arrayHash(c) for c in self.getColumns(grid)]\nhashDict = {}\npairEquadArray = []\nfor rowID, rh in enumerate(rowsHash):\nif not rh in hashDict:\nhashDict[rh] = []\nhashDict[rh].append(rowID)\nfor columnID, ch in enumerate(columnsHash):\nif not ch in hashDict:\ncontinue\nfor rowID in hashDict[ch]:\npairEquadArray.append([rowID, columnID])\nreturn pairEquadArray.__len__()\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#approach-1-brute-force", "title": "Approach 1: Brute Force", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#intuition", "title": "Intuition", "text": "<p>Let\u2019s start with the most intuitive approach, which is brute force. Since we need to find the number of matching rows and columns, we traverse through every possible combination of rows and columns (row R, col C) and check if all elements at the same position in R and C are equal to each other.</p> <p></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#algorithm", "title": "Algorithm", "text": "<ol> <li> <p>Initialize <code>count</code> to 0.</p> </li> <li> <p>Iterate over each row R in <code>grid</code>.</p> </li> <li> <p>For each row, iterate over each column C in <code>grid</code>.</p> </li> <li> <p>Check if row R equals column C by comparing each element at the same index <code>i</code> in both R and C. If row R equals column C, increment <code>count</code> by 1.</p> </li> <li> <p>Return <code>count</code> after iterating over all row-column pairs.</p> </li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#implementation", "title": "Implementation", "text": "<pre><code>class Solution:\ndef equalPairs(self, grid: List[List[int]]) -&gt; int:\ncount = 0\nn = len(grid)\n# Check each row r against each column c.\nfor r in range(n):\nfor c in range(n):\nmatch = True\n# Iterate over row r and column c.\nfor i in range(n):\nif grid[r][i] != grid[i][c]:\nmatch = False\nbreak\n# If row r equals column c, increment count by 1.\ncount += int(match)\nreturn count\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#complexity-analysis", "title": "Complexity Analysis", "text": "<p>Let n\u00d7n be the size of <code>grid</code>.</p> <ul> <li> <p>Time complexity: O(n^3)</p> <ul> <li>There are a total of O(n^2) pairs when iterating over each row R and column C. Traversing each element in R and C takes O(n) time.</li> <li> <p>Space complexity: O(1)</p> </li> <li> <p>we are use constant amount of extra space to store the answer <code>count</code>.</p> </li> </ul> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#approach-2-hash-map", "title": "Approach 2: Hash Map", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#intuition_1", "title": "Intuition", "text": "<p>The brute force approach involves comparing each row R with each column C, resulting in a time complexity of O(n3). However, we can optimize this approach by using a hash map data structure to reduce the time complexity.</p> <p>In this approach, we can consider each row as the key and store it in a hash map. The corresponding value for each key would be the frequency of that row in the grid. Then, we can traverse through each column of the grid and increment the answer by the frequency of the equivalent row in the hash map.</p> <p></p> <p>Taking the example shown in the picture, we traverse each row of the grid and use it as a key and record its frequency in a hash map.</p> <p>Note that arrays cannot typically be used as keys, so we need to convert them into equivalent hashable objects, such as tuples in Python or strings in Java. The converted object still maintains a one-to-one correspondence with the original object, allowing us to record the frequency of the original array by hash map.</p> <p></p> <p>Next, we traverse through each column of the grid, convert the array of each column into a hashable object of the same type as the previous keys, and then retrieve its number of occurrences in the hash map. This provides us with the number of rows in the grid that are equal to this column.</p> <p></p> <p>We found that <code>[3,1,2,2]</code> appears once and <code>[2,4,2,2]</code> appears twice. Therefore, the final answer is 3.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#algorithm_1", "title": "Algorithm", "text": "<ol> <li> <p>Create an empty hash map <code>row_counter</code> and set <code>count</code> to 0.</p> </li> <li> <p>For each row <code>row</code> in the grid, convert it into an equivalent hashable object and use it as a key to the <code>row_counter</code>. Increment the value of the corresponding key by 1.</p> </li> <li> <p>For each column in the grid, convert it into the same type of hashable object and check if it appears in the <code>row_counter</code>. If it does, increment <code>count</code> by the frequency.</p> </li> <li> <p>Return the answer <code>count</code>.</p> </li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#implementation_1", "title": "Implementation", "text": "<pre><code>class Solution:\ndef equalPairs(self, grid: List[List[int]]) -&gt; int:\ncount = 0\nn = len(grid)\n# Keep track of the frequency of each row.\nrow_counter = collections.Counter(tuple(row) for row in grid)\n# Add up the frequency of each column in map.\nfor c in range(n):\ncol = [grid[i][c] for i in range(n)]\ncount += row_counter[tuple(col)]\nreturn count\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#complexity-analysis_1", "title": "Complexity Analysis", "text": "<p>Let n\u00d7n be the size of <code>grid</code>.</p> <ul> <li> <p>Time complexity: O(n^2)</p> <ul> <li>We iterate over each row and column only once, converting one array of length n into a hash table object takes O(n) time.</li> <li>Operations like adding or checking on hash map take O(1) time.</li> <li> <p>Space complexity: O(n^2)</p> </li> <li> <p>We store each row of the grid in the hash map, in the worst-case scenario, <code>row_counter</code> might contains n distinct rows of length n.</p> </li> </ul> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#approach-3-trie", "title": "Approach 3: Trie", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#intuition_2", "title": "Intuition", "text": "<p>If you are not familiar with trie, please refer to this problem Implement Trie. In this article, we will focus on the usage of trie rather than on implementation details.</p> <p>Trie, also known as prefix tree, is a tree-like data structure which is often used to store strings (In this problem, we store arrays of integers instead of strings). The key advantage of trie is its efficient search time, which can be achieved in O(n) time where n is the length of the array. Trie works by storing each element of the array in a separate node, and each node has an array of children representing the possible characters that can follow the current element.</p> <p>Depending on the requirements, we can modify the original trie by adding more elements. In this problem, we need to determine the frequency of each row, so we add a variable called <code>count</code> into the trie node. To construct the trie, we traverse each row of the grid and insert the row into the trie by traversing down the trie based on each element in the row. At the end of the row, we increment <code>count</code> associated with the last node in the trie to indicate that we have recorded the occurrence of this row.</p> <p></p> <p>To count the number of pairs of equal row and column, we traverse through each column <code>col_array</code> of the grid and search for it in the trie by traversing down the trie based on each element in <code>col_array</code>. If we reach the end of the array and encounter a node, we know that there are rows in <code>grid</code> equal to this column, and we can increment the answer by the value of <code>count</code> of this node.</p> <p></p> <p>In the above image, we see that the value of <code>count</code> of the last node is 1, indicating that there is one row in the grid that matches the column <code>col_array</code> we are searching for.</p> <p>If we can\u2019t find a node associated with current value in <code>col_array</code>, it means that there is no such array stored in the trie that is equal to <code>col_array</code>, so we stop the search.</p> <p></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#algorithm_2", "title": "Algorithm", "text": "<ol> <li> <p>Initialize a empty trie <code>my_trie</code> and set <code>count</code> as 0.</p> </li> <li> <p>Insert each row of <code>grid</code> into <code>my_trie</code>.</p> </li> <li> <p>Search for each column <code>col_array</code> in the trie.</p> </li> <li> <p>If the <code>col_array</code> is found in the trie, add the frequency count to the <code>count</code>.</p> </li> <li> <p>Return the answer <code>count</code>.</p> </li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#implementation_2", "title": "Implementation", "text": "<pre><code>class TrieNode:\ndef __init__(self):\nself.count = 0\nself.children = {}\nclass Trie:\ndef __init__(self):\nself.trie = TrieNode()\ndef insert(self, array):\nmy_trie = self.trie\nfor a in array:\nif a not in my_trie.children:\nmy_trie.children[a] = TrieNode()\nmy_trie = my_trie.children[a] \nmy_trie.count += 1\ndef search(self, array):\nmy_trie = self.trie\nfor a in array:\nif a in my_trie.children:\nmy_trie = my_trie.children[a]\nelse:\nreturn 0\nreturn my_trie.count\nclass Solution:\ndef equalPairs(self, grid: List[List[int]]) -&gt; int:\nmy_trie = Trie()\ncount = 0\nn = len(grid)\nfor row in grid:\nmy_trie.insert(row)\nfor c in range(n):\ncol_array = [grid[i][c] for i in range(n)]\ncount += my_trie.search(col_array)\nreturn count    \n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2352.%20Equal%20Row%20and%20Column%20Pairs%20-%20solve/#complexity-analysis_2", "title": "Complexity Analysis", "text": "<p>Let n\u00d7n be the size of <code>grid</code>.</p> <ul> <li> <p>Time complexity: O(n^2)</p> <ul> <li> <p>The length of input rows is fixed to n, the time complexity of building a trie for n rows is O(n^2), since we need to traverse each element in the array to insert it into the trie.</p> </li> <li> <p>The time complexity of search an array of length n is O(n) as we need to iterate over the entire array in the worst-case scenario.</p> </li> </ul> </li> <li> <p>Space complexity: O(n^2)</p> <ul> <li>In a trie, each node represents a number. Therefore, for n rows of length n, the trie has n^2 nodes in the worst-case scenario.</li> </ul> </li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2366.%20Minimum%20Replacements%20to%20Sort%20the%20Array/", "title": "2366. Minimum Replacements to Sort the Array", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/2366.%20Minimum%20Replacements%20to%20Sort%20the%20Array/#problem", "title": "Problem", "text": "<p>You are given a 0-indexed integer array <code>nums</code>. In one operation you can replace any element of the array with any two elements that sum to it.</p> <ul> <li>For example, consider <code>nums = [5,6,7]</code>. In one operation, we can replace <code>nums[1]</code> with <code>2</code> and <code>4</code> and convert <code>nums</code> to <code>[5,2,4,7]</code>.</li> </ul> <p>Return the minimum number of operations to make an array that is sorted in non-decreasing order.</p> <p>Example 1:</p> <p>Input: nums = [3,9,3] Output: 2 Explanation: Here are the steps to sort the array in non-decreasing order:</p> <ul> <li>From [3,9,3], replace the 9 with 3 and 6 so the array becomes [3,3,6,3]</li> <li>From [3,3,6,3], replace the 6 with 3 and 3 so the array becomes [3,3,3,3,3] There are 2 steps to sort the array in non-decreasing order. Therefore, we return 2.</li> </ul> <p>Example 2:</p> <p>Input: nums = [1,2,3,4,5] Output: 0 Explanation: The array is already in non-decreasing order. Therefore, we return 0. </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10**5</code></li> <li><code>1 &lt;= nums[i] &lt;= 10**9</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/2366.%20Minimum%20Replacements%20to%20Sort%20the%20Array/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/2366.%20Minimum%20Replacements%20to%20Sort%20the%20Array/#thought-on-the-problem", "title": "Thought on the problem", "text": "<p>First analysis, I think greedy appear to be the best </p> <p>2366. White board.canvas </p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/2366.%20Minimum%20Replacements%20to%20Sort%20the%20Array/#python-greedy", "title": "Python - Greedy", "text": "<pre><code>class Solution:\ndef minimumReplacement(self, nums: List[int]) -&gt; int:\ncap = nums[-1]\ntotal = 0\nfor i, curr in enumerate`-1]`:\nif i == 0:\ncap = curr\ncontinue\nif curr &lt;= cap:\ncap = curr\ncontinue\nleast_divison = curr // cap + int(curr % cap &gt; 0)\ntotal += least_divison\nbest = curr % least_divison\nif best == 0:\nbest = least_divison\ncap = best\nreturn total\n</code></pre> <p>Let run it by hand, with input [2 9 4]</p> <ul> <li>cap = 4, total = 0</li> <li>loop (0, 4) =&gt; cap = 4</li> <li>loop (1, 9) =&gt; <ul> <li>least_divison = 9 // 4 + int(9 % 4 &gt; 0) = 2 + int (1 &gt; 0) = 3</li> <li>total += 3 <code>- 1</code> (to split 9 to 3 pieces, we only need 2 split)</li> <li>best = 9 % 3 = 0</li> <li>best == 0 =&gt; best = 3 (This seem wrong)</li> <li>cap = 3</li> </ul> </li> <li>loop (2, 2) =&gt; 2 &lt; 3 =&gt; cap = 3</li> <li>return total = 3 - 1</li> </ul> <p>The first thing to fix is: <pre><code>            total += (least_divison - 1)\nbest = curr % least_divison ## What??\nif best == 0:\nbest = curr // least_divison\ncap = best\n</code></pre></p> <p>We want the best split way, that split <code>curr</code> into <code>least_divison</code> piece that close together</p> <pre><code>(9, 3) =&gt; 3 3 3\n(7, 2) =&gt; 4 3\n(7, 3) =&gt; 2 2 3\n</code></pre> <p>To make it eaiser, using <code>cap</code> directly instead of <code>least_divison</code> <pre><code>(10, 4) =&gt; 2 4 4 =&gt; 4 3 3\n(29, 12) =&gt; 12 12 5 =&gt; 11 11 7 =&gt; 10 10 9 =&gt; 9 9 11\n</code></pre></p> <p>This can be achieve by <pre><code>def split(x, cap):\nif x % cap == 0:\nreturn cap\nxmod = x % cap\nxdiv = x // cap\nminium = xmod\neq = cap\nwhile minium &lt; eq: \nminium = minium + xdiv\neq -= 1\nreturn min(eq, minium)\n</code></pre></p> <p>Test: Hand run 1: <pre><code>(29, 12)\n\n- xmod = 5\n- xdiv = 2\n- minimum = 5\n- eq = cap = 12\n- (5 &lt; 12) =&gt;\n    - minimum = 5 + 2 = 7\n    - eq = 12 - 1 = 11\n- (7 &lt; 11) =&gt;\n    - minimum = 7 + 2 = 9\n    - eq = 11 - 1 = 10\n- (9 &lt; 10) =&gt;\n    - minimum = 9 + 2 = 11\n    - eq = 10 - 1 = 9\n- (11 &lt; 9) =&gt; End loop\n- return min(11, 9) =&gt; return 9\n</code></pre></p> <p>Hand run 2: <pre><code>(7, 4)\n\n- xmod = 3\n- xdiv = 1\n- minimum = 3\n- eq = 4\n- (3 &lt; 4) =&gt; \n    - minimum = 3 + 1 = 4\n    - eq = 4 - 1 = 3\n- return min(3,4) =&gt; return 3\n</code></pre></p> <p>Hand run 3: <pre><code>(7, 6)\n\n- xmod = 1\n- xdiv = 1\n- minimum = 1\n- eq = 6\n- (1 &lt; 6) =&gt; \n    - minimum = 1 + 1 = 2\n    - eq = 6 - 1 = 5\n- (2 &lt; 5) =&gt; \n- (3 &lt; 4) =&gt; \n- (4 &lt; 3) =&gt; \n- return min(3,4) =&gt; return 3\n</code></pre></p> <p>This can round down to one equation, this belong to to do list or just dividing it duh</p> <p>Final implementation</p> Time Submitted Status Runtime Memory Language 08/30/2023 15:39 Accepted 507 ms 31.3 MB python3 <pre><code>class Solution:\ndef minimumReplacement(self, nums: List[int]) -&gt; int:\ndef split(x, cap):\nif x % cap == 0:\nreturn cap\nxmod = x % cap\nxdiv = x // cap\nminium = xmod\neq = cap\nwhile minium &lt; eq: \nminium = minium + xdiv\neq -= 1\nreturn min(eq, minium)\ncap = nums[-1]\ntotal = 0\nfor i, curr in enumerate`-1]`:\nif i == 0:\ncap = curr\ncontinue\nif curr &lt;= cap:\ncap = curr\ncontinue\nleast_divison = curr // cap + int(curr % cap &gt; 0)\ntotal += least_divison - 1\ncap = split(curr, cap)\nreturn total\n</code></pre> <p>Time complexity: O(n * ??)</p> <ul> <li>First loop: O(n)</li> <li>While loop with x mod and stuff: O( (cap - x % cap) // (x // cap + 1) ), which worst case should be 10 ** 9 (?);  But cap always smaller than x, and by doing one round of maximum worst case will reduce cap greatly afterwards.</li> </ul> <p>I found out it TLE with this input: <pre><code>[999999999,1000000000,999999999]\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/2366.%20Minimum%20Replacements%20to%20Sort%20the%20Array/#just-use-divide-turn-out-it-better", "title": "Just use divide - (Turn out) it better", "text": "<p><code>O(n)</code></p> <p>We can split by just used division result, yeah, which do not thing on improving the run times</p> Time Submitted Status Runtime Memory Language 08/30/2023 16:14 Accepted 504 ms 31.1 MB python3 <pre><code>class Solution:\ndef minimumReplacement(self, nums: List[int]) -&gt; int:\ncap = nums[-1]\ntotal = 0\nfor i, curr in enumerate`-1]`:\nif i == 0:\ncap = curr\ncontinue\nif curr &lt;= cap:\ncap = curr\ncontinue\nleast_divison = curr // cap + int(curr % cap &gt; 0)\ntotal += least_divison - 1\ncap = curr // least_divison\nreturn total\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge", "array", "python", "O(n)"]}, {"location": "notes/Leetcode%201000-10000/2369.%20Check%20if%20There%20is%20a%20Valid%20Partition%20For%20The%20Array/", "title": "2369. Check if There is a Valid Partition For The Array", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2369.%20Check%20if%20There%20is%20a%20Valid%20Partition%20For%20The%20Array/#problem", "title": "Problem", "text": "<p>You are given a 0-indexed integer array <code>nums</code>. You have to partition the array into one or more contiguous subarrays.</p> <p>We call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions: ^97b248</p> <ol> <li>The subarray consists of exactly <code>2</code> equal elements. For example, the subarray <code>[2,2]</code> is good.</li> <li>The subarray consists of exactly <code>3</code> equal elements. For example, the subarray <code>[4,4,4]</code> is good.</li> <li>The subarray consists of exactly <code>3</code> consecutive increasing elements, that is, the difference between adjacent elements is <code>1</code>. For example, the subarray <code>[3,4,5]</code> is good, but the subarray <code>[1,3,5]</code> is not.</li> </ol> <p>Return <code>true</code> if the array has at least one valid partition. Otherwise, return <code>false</code>.</p> <p>Example 1:</p> <p>Input: nums = [4,4,4,5,6] Output: true Explanation: The array can be partitioned into the subarrays [4,4] and [4,5,6]. This partition is valid, so we return true.</p> <p>Example 2:</p> <p>Input: nums = [1,1,1,2] Output: false Explanation: There is no valid partition for this array.</p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 105</code></li> <li><code>1 &lt;= nums[i] &lt;= 106</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2369.%20Check%20if%20There%20is%20a%20Valid%20Partition%20For%20The%20Array/#solve", "title": "Solve", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2369.%20Check%20if%20There%20is%20a%20Valid%20Partition%20For%20The%20Array/#recursion-check", "title": "Recursion check", "text": "<p>This is a TLE solution</p> <p>It share a lot of similarity with 131. Palindrome Partitioning, where I:</p> <ul> <li>Preprocess the Partition, to create a function <code>isContiguousSubarrays(x, y)</code> that quickly check  any sub arrays start at index <code>x</code> and end at index <code>y</code> from <code>nums</code> array is contiguous. This can be achieve by simulating 3 of the rules</li> <li>After that, a helper recursion is there to partition the array one by one, using try and error burst force process</li> </ul> Time Submitted Status Runtime Memory Language 08/13/2023 15:23 Time Limit Exceeded N/A N/A python3 <pre><code>class Solution:\ndef validPartition(self, nums: List[int]) -&gt; bool:\nlast = None\nprev = None\ncurr = None\nn = len(nums)\n# This is inclusive\ndef isContiguousSubarrays(x, y):\n# enum 0 ==&gt; 2 member; enum  1 == 3 member\nif not (x &lt; y &lt; n):\nreturn False\nsize = y - x - 1\nreturn contiguousPartition[size][x]\ncontiguousPartition = [[],[|],[]]\nfor i in nums:\nlast = prev\nprev = curr\ncurr = i\nif prev is not None:\ntype1 = (curr == prev)\ncontiguousPartition[0].append(type1)\nif last is not None:\ntype2 = (last == curr == prev)\ntype3 = (abs(last - prev) == abs(curr - prev) == 1)\ncontiguousPartition[1].append(type2 or type3)\n# This sould be inclusive, also, y is not needed and just there for sanity \ndef helper(x, y):\nif (x - 1 == y):\nreturn True\nif isContiguousSubarrays(x, x + 1):\nif helper(x + 2, y):\nreturn True\nif isContiguousSubarrays(x, x + 2):\nif helper(x + 3, y):\nreturn True\nreturn False\nreturn helper(0, n-1)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2369.%20Check%20if%20There%20is%20a%20Valid%20Partition%20For%20The%20Array/#recursion-caching", "title": "Recursion + Caching", "text": "<ul> <li>We only need to cache the <code>helper</code> function, because y not change, so an array storing data base on <code>x</code> is enough. </li> <li>Also, the third rule is <code>True</code> for <code>[1,2,3]</code>, but not for <code>[3,2,1]</code>. As it is increasing elements, which I need to modify <code>type3 = (abs(last - prev) == abs(curr - prev) == 1)</code> to pass the test <ol> <li>The subarray consists of exactly <code>3</code> consecutive increasing elements, that is, the difference between adjacent elements is <code>1</code>. For example, the subarray <code>[3,4,5]</code> is good, but the subarray <code>[1,3,5]</code> is not.</li> </ol> </li> </ul> <p>This does the job to finish the problem</p> Time Submitted Status Runtime Memory Language 08/13/2023 15:36 Accepted 1031 ms 84.1 MB python3 <pre><code>class Solution:\ndef validPartition(self, nums: List[int]) -&gt; bool:\nlast = None\nprev = None\ncurr = None\nn = len(nums)\n# This is inclusive\ndef isContiguousSubarrays(x, y):\n# enum 0 ==&gt; 2 member; enum  1 == 3 member\nif not (x &lt; y &lt; n):\nreturn False\nsize = y - x - 1\nreturn contiguousPartition[size][x]\ncontiguousPartition = [[],[|],[]]\nfor i in nums:\nlast = prev\nprev = curr\ncurr = i\nif prev is not None:\ntype1 = (curr == prev)\ncontiguousPartition[0].append(type1)\nif last is not None:\ntype2 = (last == curr == prev)\ntype3 = (prev - last == curr - prev == 1)\ncontiguousPartition[1].append(type2 or type3)\ncache = [0] * n\n# This sould be inclusive, also, y is not needed and just there for sanity \ndef helper(x, y):\nif (x - 1 == y):\nreturn True\nif cache[x] != 0:\nreturn cache[x] &gt; 0\nif isContiguousSubarrays(x, x + 1):\nif helper(x + 2, y):\ncache[x] = 1\nreturn True\nif isContiguousSubarrays(x, x + 2):\nif helper(x + 3, y):\ncache[x] = 1\nreturn True\ncache[x] = -1\nreturn False\nreturn helper(0, n-1)\n</code></pre> <p>Still, this isn\u2019t ideal, we can do a O(n) loop which is even better base on this formula <pre><code>isValid[x] = isValid[x-2] &amp;&amp; isContiguousSubarrays(x-1, x) \n            || isValid[x-3] &amp;&amp; isContiguousSubarrays(x-2, x);\n</code></pre></p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2369.%20Check%20if%20There%20is%20a%20Valid%20Partition%20For%20The%20Array/#re-implementation-in-c-recursion-caching", "title": "Re-implementation in <code>c</code> : Recursion + Caching", "text": "<p>Optimize seem better to use a compile language with a hard type system.</p> <p>Nothing much to say except I encounter a bug with the implementation, that is:</p> <ul> <li>When declare a global variable, if you try to have multiple input from console, the global variable isn\u2019t being reset (keep the last input value).</li> <li>This make my cache <code>isValid</code> and <code>contiguousPartition</code> store last know value and return wrong answer.</li> </ul> <p>There is some debug to be make until I reach above conclusion.</p> Time Submitted Status Runtime Memory Language 08/13/2023 16:11 Wrong Answer N/A N/A c <pre><code>bool contiguousPartition[2][100000] = {0};\nint isValid[100000] = {0};\nint n;\nbool isContiguousSubarrays(int x, int y) {\nif (!((x &lt; y) &amp;&amp; (y &lt; n))) return false;\nint size = y - x - 1;\nreturn contiguousPartition[size][x];\n}\nbool helper(int x, int  y){\nprintf(\"okay %d, %d\", x, y);\nif (x - 1 == y) return true;\nif (isValid[x] != 0) return isValid[x] &gt; 0;\nif (isContiguousSubarrays(x, x + 1))\nif (helper(x + 2, y)) {\nisValid[x] = 1;\nprintf(\"is true\\n\");\nreturn true;\n}\nif (isContiguousSubarrays(x, x + 2))\nif (helper(x + 3, y)) {\nisValid[x] = 1;\nprintf(\"is true\\n\");\nreturn true;\n}\nisValid[x] = -1;\nprintf(\"is false\\n\");\nreturn false;\n}\nbool validPartition(int* nums, int numsSize){\nint last, prev, curr, indexSize2, indexSize3;\nbool type1, type2, type3;\nn = numsSize;\nlast = 0; prev = 0; curr = 0;\nindexSize2 = 0; indexSize3 = 0;\nfor (int i= 0; i &lt; numsSize; i ++) {\nlast = prev;\nprev = curr;\ncurr = nums[i];\nif (prev != 0) {\ntype1 = (curr == prev);\ncontiguousPartition[0][indexSize2] = type1;\nindexSize2 += 1;\nprintf(\"%d\", contiguousPartition[0][indexSize2-1]);\n}\nif (last != 0) {\ntype2 = (last == curr &amp;&amp; curr == prev);\ntype3 = (prev - last == curr - prev &amp;&amp; curr - prev == 1);\ncontiguousPartition[1][indexSize3] = type2 || type3;\nindexSize3 += 1;\nprintf(\", %d\", contiguousPartition[1][indexSize3-1]);\n}\nprintf(\"\\n\");\n}\nreturn helper(0, n-1);\n}\n</code></pre> <p>By keeping that in mind, I just then initiation inside my main function.</p> Time Submitted Status Runtime Memory Language 08/13/2023 16:14 Accepted 122 ms 17.4 MB c <pre><code>bool contiguousPartition[2][100000] = {0};\nint isValid[100000] = {0};\nint n;\nbool isContiguousSubarrays(int x, int y) {\nif (!((x &lt; y) &amp;&amp; (y &lt; n))) return false;\nint size = y - x - 1;\nreturn contiguousPartition[size][x];\n}\nbool helper(int x, int  y){\nif (x - 1 == y) return true;\nif (isValid[x] != 0) return isValid[x] &gt; 0;\nif (isContiguousSubarrays(x, x + 1))\nif (helper(x + 2, y)) {\nisValid[x] = 1;\nreturn true;\n}\nif (isContiguousSubarrays(x, x + 2))\nif (helper(x + 3, y)) {\nisValid[x] = 1;\nreturn true;\n}\nisValid[x] = -1;\nreturn false;\n}\nbool validPartition(int* nums, int numsSize){\nint last, prev, curr, indexSize2, indexSize3;\nbool type1, type2, type3;\nlast = 0; prev = 0; curr = 0;\nindexSize2 = 0; indexSize3 = 0;\nn = numsSize;\nfor (int i= 0; i &lt; numsSize; i ++) {\nisValid[i] = 0; // &lt;== This is  the initiation needed\nlast = prev;\nprev = curr;\ncurr = nums[i];\nif (prev != 0) {\ntype1 = (curr == prev);\ncontiguousPartition[0][indexSize2] = type1;\nindexSize2 += 1;\n}\nif (last != 0) {\ntype2 = (last == curr &amp;&amp; curr == prev);\ntype3 = (prev - last == curr - prev &amp;&amp; curr - prev == 1);\ncontiguousPartition[1][indexSize3] = type2 || type3;\nindexSize3 += 1;\n}\n}\nreturn helper(0, n-1);\n}\n</code></pre> <p>Also, it seem like I the only one who done the problem in <code>c</code>, so there isn\u2019t anything to comparing.</p>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2369.%20Check%20if%20There%20is%20a%20Valid%20Partition%20For%20The%20Array/#dynamic-programming-c-implementation", "title": "Dynamic programming - <code>c</code> implementation", "text": "<p>base on this formula <pre><code>isValid[x] = isValid[x-2] &amp;&amp; isContiguousSubarrays(x-1, x) \n            || isValid[x-3] &amp;&amp; isContiguousSubarrays(x-2, x);\n</code></pre></p> <p>We can combine both of <code>isContiguousSubarrays</code> function creation process with <code>isValid</code> in one loop. It is not that much of a jump in time complexity, but we can stop the processing if <code>isValid[i-3] == isValid[i-2] == == isValid[i-1] == false</code>, as the above formula always be <code>false</code> from <code>i</code> and above</p> Time Submitted Status Runtime Memory Language 08/13/2023 16:51 Accepted 113 ms 14.3 MB c <pre><code>bool contiguousPartition[2][100000];\nbool isValid[100001];\nint n;\nbool isContiguousSubarrays(int x, int y) {\nif (!((x &lt; y) &amp;&amp; (y &lt; n))) return false;\nint size = y - x - 1;\nreturn contiguousPartition[size][x];\n}\nbool validPartition(int* nums, int numsSize){\nint last, prev, curr, indexSize2, indexSize3;\nbool type1, type2, type3;\nlast = 0; prev = 0; curr = 0;\nindexSize2 = 0; indexSize3 = 0;\nn = numsSize;\nfor (int i= 0; i &lt; numsSize; i ++) {\nlast = prev;\nprev = curr;\ncurr = nums[i];\nif (prev != 0) {\ntype1 = (curr == prev);\ncontiguousPartition[0][indexSize2] = type1;\nindexSize2 += 1;\n}\nif (last != 0) {\ntype2 = (last == curr &amp;&amp; curr == prev);\ntype3 = (prev - last == curr - prev &amp;&amp; curr - prev == 1);\ncontiguousPartition[1][indexSize3] = type2 || type3;\nindexSize3 += 1;\n}\nif (i &gt; 2)\nif (isValid[i-2] == isValid[i-3] &amp;&amp; isValid[i-2] == isValid[i-1] &amp;&amp; isValid[i-1] == false)\nreturn false;\nisValid[i] = false;\nif (i &gt; 1)\nisValid[i] = isValid[i] || (isValid[i-2] &amp;&amp; isContiguousSubarrays(i-1, i));\nelse if (i == 1)\nisValid[i] = isValid[i] || isContiguousSubarrays(i-1, i);\nif (i &gt; 2)\nisValid[i] = isValid[i] || (isValid[i-3] &amp;&amp; isContiguousSubarrays(i-2, i));\nelse if (i == 2)\nisValid[i] =  isValid[i] || isContiguousSubarrays(i-2, i);\n}\nreturn isValid[n-1];\n}\n</code></pre> <p>Even with the most optimize version, <code>c</code> still take too long to finish, it quite weird to see x10 time compare to <code>rust</code> and <code>java</code> needed to finish (is Leetcode overhead function is the problem?)</p> Time Submitted Status Runtime Memory Language 08/13/2023 18:35 Accepted 101 ms 13.8 MB c <pre><code>bool validPartition(int* nums, int numsSize) {\nbool last = false;\nbool prev = false;\nbool curr = false;\nbool type1 = false;\nbool type2 = false;\nfor (int i = 0; i &lt; numsSize; i++) {\nbool tmp;\ntmp = false;\nif (i &gt;= 1)\ntype1 = nums[i] == nums[i-1];\nif (i &gt;= 2) type2 = (nums[i] == nums[i-1] &amp;&amp; nums[i] == nums[i-2])\n|| (nums[i] - nums[i-1] ==  nums[i-1] - nums[i-2]\n&amp;&amp; nums[i] - nums[i-1] == 1);\nif (i == 1)\ntmp = tmp || type1;\nif (i == 2)\ntmp = tmp || type2;\nif (i &gt;= 3) {\ntmp = tmp || (type1 &amp;&amp; prev);\ntmp = tmp || (type2 &amp;&amp; last);\nif (!tmp &amp;&amp; !curr &amp;&amp; !prev)\nreturn false;\n}\nlast = prev; prev = curr; curr = tmp;\n}\nreturn curr;\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2369.%20Check%20if%20There%20is%20a%20Valid%20Partition%20For%20The%20Array/#java-re-implementation", "title": "<code>java</code> re-implementation", "text": "<ul> <li>By rewriting all of my code again. I have a new look of my code and and found out that the <code>isContiguousSubarrays</code> function and <code>contiguousPartition</code> array can be remove and we could directly calculate it on the fly</li> <li>Which make the code more compact, but also quite harder to understand how I can come up it it in the first place</li> </ul> <pre><code>class Solution {\npublic boolean validPartition(int[] nums) {\nint n = nums.length;\nboolean[] isValid = new boolean[n];\nint index = 0;\nint last = 0, prev = 0,curr = 0;\nboolean type1 = false, type2 = false;\nfor (int i: nums) {\nlast = prev; prev = curr; curr = i;\nisValid[index] = false;\nif (index &gt;= 1)\ntype1 = curr == prev;\nif (index &gt;= 2) type2 = (curr == prev &amp;&amp; curr == last)\n|| (curr - prev == prev - last &amp;&amp; curr - prev == 1);\nif (index == 1)\nisValid[index] = isValid[index] || type1;\nif (index == 2)\nisValid[index] = isValid[index] || type2;\nif (index &gt;= 3) {\nisValid[index] = isValid[index] || (type1 &amp;&amp; isValid[index-2]);\nisValid[index] = isValid[index] || (type2 &amp;&amp; isValid[index-3]);\nif (!isValid[index] &amp;&amp; !isValid[index - 1] &amp;&amp; !isValid[index -2])\nreturn false;\n}\nindex++;\n}\nreturn isValid[n-1];\n}\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2369.%20Check%20if%20There%20is%20a%20Valid%20Partition%20For%20The%20Array/#rust-reimplementation", "title": "<code>rust</code> reimplementation", "text": "<ul> <li>We also only use 4 most recently value of the <code>isValid</code> cache array, so we could remove the <code>isValid</code> array.</li> <li>It quite nice to use <code>nums.iter().enumerate()</code> which only python have the similarity <code>enumerate(nums)</code> while both <code>java</code> and <code>c</code> does not have. But in the final implementation, we don\u2019t use the value <code>&amp;v</code> anyway.</li> </ul> Time Submitted Status Runtime Memory Language 08/13/2023 18:13 Accepted 15 ms 3.5 MB rust 08/13/2023 18:04 Accepted 13 ms 3.7 MB rust <pre><code>impl Solution {\npub fn valid_partition(nums: Vec&lt;i32&gt;) -&gt; bool {\nlet mut last = false;\nlet mut prev = false;\nlet mut curr = false;\nlet mut type1 = false;\nlet mut type2 = false;\nfor (index, &amp;v) in nums.iter().enumerate() {\nlet mut tmp = false;\nif index &gt;= 1 {\ntype1 = nums[index] == nums[index-1];\n}\nif index &gt;= 2 {\ntype2 = (nums[index] == nums[index-1] &amp;&amp; nums[index] == nums[index-2]) || (nums[index] - nums[index-1] == nums[index-1] - nums[index-2] &amp;&amp; nums[index] - nums[index-1] == 1);\n}\nif index == 1 {\ntmp = tmp || type1;\n}\nif index == 2 {\ntmp = tmp || type2;\n}\nif index &gt;= 3 {\ntmp = tmp || (type1 &amp;&amp; prev);\ntmp = tmp || (type2 &amp;&amp; last);\nif !tmp &amp;&amp; !curr &amp;&amp; !prev {\nreturn false;\n}\n}\nlast = prev;\nprev = curr;\ncurr = tmp;\n}\ncurr\n}\n}\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2448.%20Minimum%20Cost%20to%20Make%20Array%20Equal/", "title": "2448. Minimum Cost to Make Array Equal", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2448.%20Minimum%20Cost%20to%20Make%20Array%20Equal/#problem", "title": "Problem", "text": "<p>You are given two 0-indexed arrays <code>nums</code> and cost consisting each of n positive integers.</p> <p>You can do the following operation any number of times:</p> <p>Increase or decrease any element of the array <code>nums</code> by 1. The cost of doing one operation on the <code>i-th</code> element is <code>cost[i]</code>.</p> <p>Return the minimum total cost such that all the elements of the array <code>nums</code> become equal.</p> <p>Example 1: <pre><code>Input: nums = [1,3,5,2], cost = [2,3,1,14]\nOutput: 8\nExplanation: We can make all the elements equal to 2 in the following way:\n\n- Increase the 0th element one time. The cost is 2.\n- Decrease the 1st element one time. The cost is 3.\n- Decrease the 2nd element three times. The cost is 1 + 1 + 1 = 3.\nThe total cost is 2 + 3 + 3 = 8.\nIt can be shown that we cannot make the array equal with a smaller cost.\n</code></pre></p> <p>Example 2: <pre><code>Input: nums = [2,2,2,2,2], cost = [4,2,8,1,3]\nOutput: 0\nExplanation: All the elements are already equal, so no operations are needed.\n</code></pre></p> <p>Constraints:</p> <ul> <li><code>n == nums.length == cost.length</code></li> <li><code>1 &lt;= n &lt;= 105</code></li> <li><code>1 &lt;= nums[i], cost[i] &lt;= 106</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2448.%20Minimum%20Cost%20to%20Make%20Array%20Equal/#solution", "title": "Solution", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2448.%20Minimum%20Cost%20to%20Make%20Array%20Equal/#overview", "title": "Overview", "text": "<ol> <li> <p>Assuming result always try to match one of the number inside the array - It easy to conclude that the <code>equal value</code> that we trying to find in in between min - max of the array (or else they are the min or max of the array) - We can just using binary search if the assumption isn\u2019t true, with left and right start at min - max</p> </li> <li> <p>If you can calculate the cost given a specific equal value it in <code>O(1)</code> time. The handling process rely on the fact that if you can separating all the increase / decrease part of the array, with each change quickly or not.</p> <ul> <li>After sorting the provided <code>nums</code>, which cost <code>O(n log n)</code></li> <li>We can separating increase / decrease part  in half by <code>O(1)</code> if we tryout each <code>nums</code> in sorted order; or <code>O(log n)</code> in-case we using binary search</li> <li>Then the problem becoming <code>O(n)</code> to tryout all <code>nums</code>; or <code>O(log (max - min))</code> in-case we using binary search</li> <li>We can achieve <code>O(1)</code> time complexity calculate the cost given a specific equal value this by just pre-calculating all array range with Dynamic Programming Sub array-Sum</li> <li>Overall, a <code>O(n log n) + O(n)*O(1)</code> or <code>O(n log n) + O(log n)* O(log (max - min)) *O(1)</code></li> </ul> </li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2448.%20Minimum%20Cost%20to%20Make%20Array%20Equal/#implement", "title": "Implement", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2448.%20Minimum%20Cost%20to%20Make%20Array%20Equal/#on-log-n-ono1", "title": "<code>O(n log n) + O(n)*O(1)</code>", "text": "<pre><code>class Solution:\ndef minCost(self, nums: List[int], cost: List[int]) -&gt; int:\narr = list(zip(nums, cost))\narr.sort()\nsumCost = [0] * len(arr)\nfor i, (_, cost) in enumerate(arr):\nsumCost[i] += cost\nif i &gt; 0:\nsumCost[i] += sumCost[i-1]\ndef sumRange(sumCost, left, right):\nif left == -1:\nreturn sumCost[right]\nreturn sumCost[right] - sumCost[left]\nminNums = min(nums)\nres = [0] * len(arr)\nres[0] = sum([(num - minNums) * cost for num, cost in arr])\nfor i in range(1, len(arr)):\npreNum, preCost = arr[i-1]\nnum, cost = arr[i]\nres[i] = res[i - 1]\nres[i] += sumRange(sumCost, -1, i-1) * (-preNum + num)\nres[i] -= sumRange(sumCost, i-1, len(arr) - 1) * (num - preNum)\nreturn min(res)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2448.%20Minimum%20Cost%20to%20Make%20Array%20Equal/#on-log-n-olog-n-olog-max-min-o1-wrong-first-thought-tho", "title": "<code>O(n log n) + O(log n)* O(log (max - min)) *O(1)</code> (WRONG - FIRST THOUGHT THO)", "text": "<pre><code>class Solution:\ndef minCost(self, nums: List[int], cost: List[int]) -&gt; int:\narr = list(zip(nums, cost))\narr.sort()\nsumCost = [0] * len(arr)\nfor i, (_, cost) in enumerate(arr):\nsumCost[i] += cost\nif i &gt; 0:\nsumCost[i] += sumCost[i-1]\ndef sumRange(sumCost, left, right):\nif left == -1:\nreturn sumCost[right]\nreturn sumCost[right] - sumCost[left]\nminNums = min(nums)\nexampleRes = sum([(num - minNums) * cost for num, cost in arr])\ndef findCut(arr, value):\nleft = -1\nright = len(arr)\nwhile True:\nmid = (left + right)// 2\nif left == mid:\nbreak\nif arr[mid] &lt;= value:\nleft = mid\nelse:\nright = mid\nreturn right\nmaxNums = max(nums)\nleft = minNums-1\nright = maxNums+1\nwhile True:\nmid = (left + right)// 2\ncutIndex = findCut(arr, mid)\ntestRes = exampleRes\ntestRes += sumRange(sumCost, -1, cutIndex) * (num - minNums)\ntestRes -= sumRange(sumCost, cutIndex, len(arr) - 1) * (num -  minNums)\nreturn min(res)\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2462.%20Total%20Cost%20to%20Hire%20K%20Workers/", "title": "2462. Total Cost to Hire K Workers", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2462.%20Total%20Cost%20to%20Hire%20K%20Workers/#problem", "title": "Problem", "text": "<p>You are given a 0-indexed integer array <code>costs</code> where <code>costs[i]</code> is the cost of hiring the <code>ith</code> worker.</p> <p>You are also given two integers <code>k</code> and <code>candidates</code>. We want to hire exactly <code>k</code> workers according to the following rules:</p> <ul> <li>You will run <code>k</code> sessions and hire exactly one worker in each session.</li> <li>In each hiring session, choose the worker with the lowest cost from either the first <code>candidates</code> workers or the last <code>candidates</code> workers. Break the tie by the smallest index.<ul> <li>For example, if <code>costs = [3,2,7,7,1,2]</code> and <code>candidates = 2</code>, then in the first hiring session, we will choose the <code>4th</code> worker because they have the lowest cost <code>[3,2,7,7,**1**,2]</code>.</li> <li>In the second hiring session, we will choose <code>1st</code> worker because they have the same lowest cost as <code>4th</code> worker but they have the smallest index <code>[3,**2**,7,7,2]</code>. Please note that the indexing may be changed in the process.</li> </ul> </li> <li>If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.</li> <li>A worker can only be chosen once.</li> </ul> <p>Return the total cost to hire exactly <code>k</code> workers.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= costs.length &lt;= 10**5</code></li> <li><code>1 &lt;= costs[i] &lt;= 10**5</code></li> <li><code>1 &lt;= k, candidates &lt;= costs.length</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2462.%20Total%20Cost%20to%20Hire%20K%20Workers/#reevaluate", "title": "Reevaluate", "text": "<ul> <li>A find min problem: Heap, Min Binary Tree</li> <li>We only need to find the lowest cost in first  <code>cost[0:candidates]</code>  and last <code>cost[len-1 - candidates : len]</code>, so we could used some dynamic left right pointer and a: Heap</li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2462.%20Total%20Cost%20to%20Hire%20K%20Workers/#solving-with-heap", "title": "Solving with heap", "text": "<ol> <li>Create a <code>left</code> heap and <code>right</code> heap</li> <li>Push <code>cost[0:candidates]</code> to <code>left</code> heap and <code>cost[len-1 - candidates : len]</code> to <code>right</code> heap</li> <li>Pop ether head of <code>left</code> and <code>right</code> heap then push next correspond from cost table back to the heap</li> <li>Run it <code>k</code> time</li> </ol>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2462.%20Total%20Cost%20to%20Hire%20K%20Workers/#actual-code", "title": "Actual code", "text": "<pre><code>class Solution:\ndef totalCost(self, costs: List[int], k: int, candidates: int) -&gt; int:\nleft = []\nright = []\nfor value in costs[:candidates]:\nheapq.heappush(left, value)\nfor value in costs[max(candidates, len(costs) - candidates):]:\nheapq.heappush(right, value)\npointerLeft = candidates - 1\npointerRight = len(costs) - candidates\ntotal = 0\nfor i in range(k):\nif left == [] and right == []:\nbreak\nif left == []:\ntotal += heapq.heappop(right)\ncontinue\nelif right == []:\ntotal += heapq.heappop(left)\ncontinue\nif left[0] &lt;= right[0]:\ntotal += heapq.heappop(left)\nif pointerLeft + 1 &lt; pointerRight:\npointerLeft += 1\nheapq.heappush(left, costs[pointerLeft])\nelse:\ntotal += heapq.heappop(right)\nif pointerLeft &lt; pointerRight - 1:\npointerRight -= 1\nheapq.heappush(right, costs[pointerRight])\nreturn total\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2616.%20Minimize%20the%20Maximum%20Difference%20of%20Pairs/", "title": "2616. Minimize the Maximum Difference of Pairs", "text": "", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2616.%20Minimize%20the%20Maximum%20Difference%20of%20Pairs/#problem", "title": "Problem", "text": "<p>You are given a 0-indexed integer array <code>nums</code> and an integer <code>p</code>. Find <code>p</code> pairs of indices of <code>nums</code> such that the maximum difference amongst all the pairs is minimized. Also, ensure no index appears more than once amongst the <code>p</code> pairs.</p> <p>Note that for a pair of elements at the index <code>i</code> and <code>j</code>, the difference of this pair is <code>|nums[i] - nums[j]|</code>, where <code>|x|</code> represents the absolute value of <code>x</code>.</p> <p>Return the minimum maximum difference among all <code>p</code> pairs. We define the maximum of an empty set to be zero.</p> <p>Example 1:</p> <p>Input: nums = [10,1,2,7,1,3], p = 2 Output: 1 Explanation: The first pair is formed from the indices 1 and 4, and the second pair is formed from the indices 2 and 5.  The maximum difference is max(|nums[1] - nums[4]|, |nums[2] - nums[5]|) = max(0, 1) = 1. Therefore, we return 1.</p> <p>Example 2:</p> <p>Input: nums = [4,2,1,2], p = 1 Output: 0 Explanation: Let the indices 1 and 3 form a pair. The difference of that pair is |2 - 2| = 0, which is the minimum we can attain.</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>0 &lt;= nums[i] &lt;= 109</code></li> <li><code>0 &lt;= p &lt;= (nums.length)/2</code></li> </ul>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "notes/Leetcode%201000-10000/2616.%20Minimize%20the%20Maximum%20Difference%20of%20Pairs/#solve", "title": "Solve", "text": "<pre><code>class Solution:\ndef minimizeMax(self, nums: List[int], p: int) -&gt; int:\nnums.sort()\n# Choosing pair base on sorted number, get mimimal number\n# (1,2) (3,4) (...) (2p-1, 2p)\ndef greedy(self, nums):\ndef helper(x,y):\nreturn nums[y] - nums[x]\nminimize = None\nfor i in range(0,len(nums), 2):\nif minimize is None:\nminimize = helper(i, i+1)\nelif minimize &gt; helper(i, i+1):\nminimize = helper(i, i+1)\nreturn minimize\n# We can chosing number base on their distinct, from lowest to largest\n# Keeping track of all added pair to make sure we adding not visided number\ndef smarter(self, nums)\ndef helper(x,y):\nreturn nums[y] - nums[x]\n# By sorting, we rounded down possible pair to choose to adj number only\n# by example [1,2,3,4] right next to each other\n# -&gt; We can only choing [1,2] [3,4] or [2,3] [1,4]. But because of sorting\n# [1,4] &gt; any of ([1,2] [2,3] [3,4])\n# -&gt; We won't using any pair that isn't adj each other\npossible_pair = []\nfor i in range(0, len(num)):\npair = [i, i+1]\npossible_pair.append( pair )\ndef sortkey(x):\nreturn helper(*x)\npossible_pair.sort(key = sortkey)\n# Checking and pushing each pair from the lowest to highest isn't possible\n# As we need to take care a lot of vairable stage\n\"\"\"queue = []\n        while queue:\n            pair, diff = possible_pair.pop()\n            visited_number\n            queue.append(visited_number)\"\"\"\n# Instead, we can try to using some dynamic programing and maximize the\n# pair that we can choose step by step in avaiable possible_pair \nmax_pair = []\nfor x, y in possible_pair:\n</code></pre>", "tags": ["leetcode", "computer_sience", "coding_chalenge"]}, {"location": "tags/", "title": "Tags", "text": ""}, {"location": "tags/#bfs", "title": "BFS", "text": "<ul> <li>46. Permutations</li> <li>130. Surrounded Regions</li> <li>542. 01 Matrix</li> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#o1", "title": "O(1)", "text": "<ul> <li>Array</li> <li>50. Pow(x, n)</li> </ul>"}, {"location": "tags/#olog-mn", "title": "O(log (m+n))", "text": "<ul> <li>4. Median of Two Sorted Arrays</li> </ul>"}, {"location": "tags/#olog-n-m", "title": "O(log (n + m))", "text": "<ul> <li>4. Median of Two Sorted Arrays</li> </ul>"}, {"location": "tags/#olog-n", "title": "O(log n)", "text": "<ul> <li>Binary search</li> <li>33. Search in Rotated Sorted Array</li> <li>50. Pow(x, n)</li> <li>74. Search a 2D Matrix</li> </ul>"}, {"location": "tags/#on-2-n", "title": "O(n * 2 ** n)", "text": "<ul> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#on-2-2-n", "title": "O(n ** 2 * 2 ** n)", "text": "<ul> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#on-2-log-n", "title": "O(n ** 2 log n)", "text": "<ul> <li>84. Largest Rectangle in Histogram</li> </ul>"}, {"location": "tags/#on-2", "title": "O(n ** 2)", "text": "<ul> <li>Bubble sort</li> <li>63. Unique Paths II</li> <li>84. Largest Rectangle in Histogram</li> <li>118. Pascal\u2019s Triangle</li> <li>119. Pascal\u2019s Triangle II</li> <li>121. Best Time to Buy and Sell Stock</li> <li>134. Gas Station</li> <li>377. Combination Sum IV</li> <li>518. Coin Change II</li> <li>1337. The K Weakest Rows in a Matrix</li> </ul>"}, {"location": "tags/#on-3-2-n", "title": "O(n ** 3 * 2 ** n)", "text": "<ul> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#on-log-n", "title": "O(n log n)", "text": "<ul> <li>Quick sort</li> <li>4. Median of Two Sorted Arrays</li> <li>148. Sort List</li> <li>338. Counting Bits</li> <li>1326. Minimum Number of Taps to Open to Water a Garden</li> <li>1337. The K Weakest Rows in a Matrix</li> <li>1658. Minimum Operations to Reduce X to Zero</li> </ul>"}, {"location": "tags/#on", "title": "O(n!)", "text": "<ul> <li>46. Permutations</li> <li>77. Combinations</li> </ul>"}, {"location": "tags/#on_1", "title": "O(n)", "text": "<ul> <li>Linear search</li> <li>45. Jump Game II</li> <li>55. Jump Game</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>81. Search in Rotated Sorted Array II</li> <li>86. Partition List</li> <li>88. Merge Sorted Array</li> <li>92. Reverse Linked List II</li> <li>101. Symmetric Tree</li> <li>102. Binary Tree Level Order Traversal</li> <li>103. Binary Tree Zigzag Level Order Traversal</li> <li>104. Maximum Depth of Binary Tree</li> <li>108. Convert Sorted Array to Binary Search Tree</li> <li>110. Balanced Binary Tree</li> <li>116. Populating Next Right Pointers in Each Node</li> <li>121. Best Time to Buy and Sell Stock</li> <li>134. Gas Station</li> <li>150. Evaluate Reverse Polish Notation</li> <li>225. Implement Stack using Queues</li> <li>338. Counting Bits</li> <li>389. Find the Difference</li> <li>392. Is Subsequence</li> <li>746. Min Cost Climbing Stairs</li> <li>905. Sort Array By Parity</li> <li>1326. Minimum Number of Taps to Open to Water a Garden</li> <li>1658. Minimum Operations to Reduce X to Zero</li> <li>1793. Maximum Score of a Good Subarray</li> <li>2038. Remove Colored Pieces if Both Neighbors are the Same Color</li> <li>2366. Minimum Replacements to Sort the Array</li> </ul>"}, {"location": "tags/#osqrt-n", "title": "O(sqrt n)", "text": "<ul> <li>Two Crystal Ball</li> </ul>"}, {"location": "tags/#array", "title": "array", "text": "<ul> <li>33. Search in Rotated Sorted Array</li> <li>45. Jump Game II</li> <li>46. Permutations</li> <li>63. Unique Paths II</li> <li>74. Search a 2D Matrix</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>84. Largest Rectangle in Histogram</li> <li>215. Kth Largest Element in an Array</li> <li>274. H Index</li> <li>2366. Minimum Replacements to Sort the Array</li> </ul>"}, {"location": "tags/#binary_search", "title": "binary_search", "text": "<ul> <li>74. Search a 2D Matrix</li> <li>81. Search in Rotated Sorted Array II</li> <li>84. Largest Rectangle in Histogram</li> <li>274. H Index</li> </ul>"}, {"location": "tags/#bit_manipulation", "title": "bit_manipulation", "text": "<ul> <li>50. Pow(x, n)</li> </ul>"}, {"location": "tags/#c", "title": "c", "text": "<ul> <li>Quick sort</li> <li>Two Crystal Ball</li> <li>4. Median of Two Sorted Arrays</li> <li>50. Pow(x, n)</li> <li>63. Unique Paths II</li> <li>74. Search a 2D Matrix</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>81. Search in Rotated Sorted Array II</li> <li>92. Reverse Linked List II</li> <li>118. Pascal\u2019s Triangle</li> <li>119. Pascal\u2019s Triangle II</li> <li>134. Gas Station</li> <li>138. Copy List with Random Pointer</li> <li>148. Sort List</li> <li>150. Evaluate Reverse Polish Notation</li> <li>168. Excel Sheet Column Title</li> <li>518. Coin Change II</li> <li>1793. Maximum Score of a Good Subarray</li> </ul>"}, {"location": "tags/#cache", "title": "cache", "text": "<ul> <li>84. Largest Rectangle in Histogram</li> </ul>"}, {"location": "tags/#coding_chalenge", "title": "coding_chalenge", "text": "<ul> <li>Mathematic expression calculation</li> <li>4. Median of Two Sorted Arrays</li> <li>33. Search in Rotated Sorted Array</li> <li>45. Jump Game II</li> <li>46. Permutations</li> <li>50. Pow(x, n)</li> <li>55. Jump Game</li> <li>62. Unique Paths</li> <li>63. Unique Paths II</li> <li>74. Search a 2D Matrix</li> <li>77. Combinations</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>81. Search in Rotated Sorted Array II</li> <li>84. Largest Rectangle in Histogram</li> <li>86. Partition List</li> <li>88. Merge Sorted Array</li> <li>91. Decode Ways</li> <li>92. Reverse Linked List II</li> <li>94. Binary Tree Inorder Traversal</li> <li>98. Validate Binary Search Tree</li> <li>101. Symmetric Tree</li> <li>102. Binary Tree Level Order Traversal</li> <li>103. Binary Tree Zigzag Level Order Traversal</li> <li>104. Maximum Depth of Binary Tree</li> <li>108. Convert Sorted Array to Binary Search Tree</li> <li>110. Balanced Binary Tree</li> <li>116. Populating Next Right Pointers in Each Node</li> <li>118. Pascal\u2019s Triangle</li> <li>119. Pascal\u2019s Triangle II</li> <li>121. Best Time to Buy and Sell Stock</li> <li>122. Best Time to Buy and Sell Stock II</li> <li>124. Binary Tree Maximum Path Sum</li> <li>125. Valid Palindrome</li> <li>130. Surrounded Regions</li> <li>131. Palindrome Partitioning</li> <li>134. Gas Station</li> <li>136. Single Number</li> <li>138. Copy List with Random Pointer</li> <li>139. Word Break</li> <li>141. Linked List Cycle</li> <li>146. LRU Cache</li> <li>148. Sort List</li> <li>149. Max Points on a Line</li> <li>150. Evaluate Reverse Polish Notation</li> <li>168. Excel Sheet Column Title</li> <li>169. Majority Element</li> <li>171. Excel Sheet Column Number</li> <li>190. Reverse Bits</li> <li>191. Number of 1 Bits</li> <li>202. Happy Number</li> <li>206. Reverse Linked List</li> <li>207. Course Schedule</li> <li>212. Word Search II</li> <li>215. Kth Largest Element in an Array</li> <li>217. Contains Duplicate</li> <li>225. Implement Stack using Queues</li> <li>234. Palindrome Linked List</li> <li>239. Sliding Window Maximum</li> <li>242. Valid Anagram</li> <li>268. Missing Number</li> <li>274. H Index</li> <li>283. Move Zeroes</li> <li>326. Power of Three</li> <li>338. Counting Bits</li> <li>344. Reverse String</li> <li>350. Intersection of Two Arrays II</li> <li>373. Find K Pairs with Smallest Sums</li> <li>377. Combination Sum IV</li> <li>380. Insert Delete GetRandom O(1)</li> <li>387. First Unique Character in a String</li> <li>389. Find the Difference</li> <li>392. Is Subsequence</li> <li>412. Fizz Buzz</li> <li>435. Non overlapping Intervals</li> <li>445. Add Two Numbers II</li> <li>456. 132 Pattern</li> <li>459. Repeated Substring Pattern</li> <li>518. Coin Change II</li> <li>530. Minimum Absolute Difference in BST</li> <li>542. 01 Matrix</li> <li>688. Knight Probability in Chessboard</li> <li>712. Minimum ASCII Delete Sum for Two Strings</li> <li>714. Best Time to Buy and Sell Stock with Transaction Fee</li> <li>735. Asteroid Collision</li> <li>746. Min Cost Climbing Stairs</li> <li>767. Reorganize String</li> <li>799. Champagne Tower</li> <li>802. Find Eventual Safe States</li> <li>847. Shortest Path Visiting All Nodes</li> <li>852. Peak Index in a Mountain Array</li> <li>859. Buddy Strings</li> <li>894. All Possible Full Binary Trees</li> <li>905. Sort Array By Parity</li> <li>1125. Smallest Sufficient Team</li> <li>1143. Longest Common Subsequence</li> <li>1326. Minimum Number of Taps to Open to Water a Garden</li> <li>1337. The K Weakest Rows in a Matrix</li> <li>1569. Number of Ways to Reorder Array to Get Same BST</li> <li>1601. Maximum Number of Achievable Transfer Requests</li> <li>1615. Maximal Network Rank</li> <li>1658. Minimum Operations to Reduce X to Zero</li> <li>1751. Maximum Number of Events That Can Be Attended II</li> <li>1793. Maximum Score of a Good Subarray</li> <li>1802. Maximum Value at a Given Index in a Bounded Array</li> <li>2008. Maximum Earnings From Taxi</li> <li>2038. Remove Colored Pieces if Both Neighbors are the Same Color</li> <li>2140. Questions With Brainpower</li> <li>2141. Maximum Running Time of N Computers</li> <li>2328. Number of Increasing Paths in a Grid</li> <li>2352. Equal Row and Column Pairs   solve</li> <li>2366. Minimum Replacements to Sort the Array</li> <li>2369. Check if There is a Valid Partition For The Array</li> <li>2448. Minimum Cost to Make Array Equal</li> <li>2462. Total Cost to Hire K Workers</li> <li>2616. Minimize the Maximum Difference of Pairs</li> </ul>"}, {"location": "tags/#computer_sience", "title": "computer_sience", "text": "<ul> <li>Array</li> <li>Big O Time Complexity</li> <li>Binary search</li> <li>Bubble sort</li> <li>Linear search</li> <li>Linked List</li> <li>List</li> <li>Mathematic expression calculation</li> <li>Quick sort</li> <li>Two Crystal Ball</li> <li>4. Median of Two Sorted Arrays</li> <li>33. Search in Rotated Sorted Array</li> <li>45. Jump Game II</li> <li>46. Permutations</li> <li>50. Pow(x, n)</li> <li>55. Jump Game</li> <li>62. Unique Paths</li> <li>63. Unique Paths II</li> <li>74. Search a 2D Matrix</li> <li>77. Combinations</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>81. Search in Rotated Sorted Array II</li> <li>84. Largest Rectangle in Histogram</li> <li>86. Partition List</li> <li>88. Merge Sorted Array</li> <li>91. Decode Ways</li> <li>92. Reverse Linked List II</li> <li>94. Binary Tree Inorder Traversal</li> <li>98. Validate Binary Search Tree</li> <li>101. Symmetric Tree</li> <li>102. Binary Tree Level Order Traversal</li> <li>103. Binary Tree Zigzag Level Order Traversal</li> <li>104. Maximum Depth of Binary Tree</li> <li>108. Convert Sorted Array to Binary Search Tree</li> <li>110. Balanced Binary Tree</li> <li>116. Populating Next Right Pointers in Each Node</li> <li>118. Pascal\u2019s Triangle</li> <li>119. Pascal\u2019s Triangle II</li> <li>121. Best Time to Buy and Sell Stock</li> <li>122. Best Time to Buy and Sell Stock II</li> <li>124. Binary Tree Maximum Path Sum</li> <li>125. Valid Palindrome</li> <li>130. Surrounded Regions</li> <li>131. Palindrome Partitioning</li> <li>134. Gas Station</li> <li>136. Single Number</li> <li>138. Copy List with Random Pointer</li> <li>139. Word Break</li> <li>141. Linked List Cycle</li> <li>146. LRU Cache</li> <li>148. Sort List</li> <li>149. Max Points on a Line</li> <li>150. Evaluate Reverse Polish Notation</li> <li>168. Excel Sheet Column Title</li> <li>169. Majority Element</li> <li>171. Excel Sheet Column Number</li> <li>190. Reverse Bits</li> <li>191. Number of 1 Bits</li> <li>202. Happy Number</li> <li>206. Reverse Linked List</li> <li>207. Course Schedule</li> <li>212. Word Search II</li> <li>215. Kth Largest Element in an Array</li> <li>217. Contains Duplicate</li> <li>225. Implement Stack using Queues</li> <li>234. Palindrome Linked List</li> <li>239. Sliding Window Maximum</li> <li>242. Valid Anagram</li> <li>268. Missing Number</li> <li>274. H Index</li> <li>283. Move Zeroes</li> <li>326. Power of Three</li> <li>338. Counting Bits</li> <li>344. Reverse String</li> <li>350. Intersection of Two Arrays II</li> <li>373. Find K Pairs with Smallest Sums</li> <li>377. Combination Sum IV</li> <li>380. Insert Delete GetRandom O(1)</li> <li>387. First Unique Character in a String</li> <li>389. Find the Difference</li> <li>392. Is Subsequence</li> <li>412. Fizz Buzz</li> <li>435. Non overlapping Intervals</li> <li>445. Add Two Numbers II</li> <li>456. 132 Pattern</li> <li>459. Repeated Substring Pattern</li> <li>518. Coin Change II</li> <li>530. Minimum Absolute Difference in BST</li> <li>542. 01 Matrix</li> <li>688. Knight Probability in Chessboard</li> <li>712. Minimum ASCII Delete Sum for Two Strings</li> <li>714. Best Time to Buy and Sell Stock with Transaction Fee</li> <li>735. Asteroid Collision</li> <li>746. Min Cost Climbing Stairs</li> <li>767. Reorganize String</li> <li>799. Champagne Tower</li> <li>802. Find Eventual Safe States</li> <li>847. Shortest Path Visiting All Nodes</li> <li>852. Peak Index in a Mountain Array</li> <li>859. Buddy Strings</li> <li>894. All Possible Full Binary Trees</li> <li>905. Sort Array By Parity</li> <li>1125. Smallest Sufficient Team</li> <li>1143. Longest Common Subsequence</li> <li>1326. Minimum Number of Taps to Open to Water a Garden</li> <li>1337. The K Weakest Rows in a Matrix</li> <li>1569. Number of Ways to Reorder Array to Get Same BST</li> <li>1601. Maximum Number of Achievable Transfer Requests</li> <li>1615. Maximal Network Rank</li> <li>1658. Minimum Operations to Reduce X to Zero</li> <li>1751. Maximum Number of Events That Can Be Attended II</li> <li>1793. Maximum Score of a Good Subarray</li> <li>1802. Maximum Value at a Given Index in a Bounded Array</li> <li>2008. Maximum Earnings From Taxi</li> <li>2038. Remove Colored Pieces if Both Neighbors are the Same Color</li> <li>2140. Questions With Brainpower</li> <li>2141. Maximum Running Time of N Computers</li> <li>2328. Number of Increasing Paths in a Grid</li> <li>2352. Equal Row and Column Pairs   solve</li> <li>2366. Minimum Replacements to Sort the Array</li> <li>2369. Check if There is a Valid Partition For The Array</li> <li>2448. Minimum Cost to Make Array Equal</li> <li>2462. Total Cost to Hire K Workers</li> <li>2616. Minimize the Maximum Difference of Pairs</li> </ul>"}, {"location": "tags/#divide_and_conquer", "title": "divide_and_conquer", "text": "<ul> <li>215. Kth Largest Element in an Array</li> </ul>"}, {"location": "tags/#dynamic_programing", "title": "dynamic_programing", "text": "<ul> <li>55. Jump Game</li> <li>63. Unique Paths II</li> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#go", "title": "go", "text": "<ul> <li>110. Balanced Binary Tree</li> <li>389. Find the Difference</li> <li>746. Min Cost Climbing Stairs</li> <li>799. Champagne Tower</li> <li>905. Sort Array By Parity</li> <li>1793. Maximum Score of a Good Subarray</li> </ul>"}, {"location": "tags/#graph", "title": "graph", "text": "<ul> <li>1615. Maximal Network Rank</li> </ul>"}, {"location": "tags/#heap", "title": "heap", "text": "<ul> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#heap_c_lang", "title": "heap_c_lang", "text": "<ul> <li>74. Search a 2D Matrix</li> </ul>"}, {"location": "tags/#java", "title": "java", "text": "<ul> <li>63. Unique Paths II</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>518. Coin Change II</li> </ul>"}, {"location": "tags/#javascript", "title": "javascript", "text": "<ul> <li>767. Reorganize String</li> </ul>"}, {"location": "tags/#leetcode", "title": "leetcode", "text": "<ul> <li>4. Median of Two Sorted Arrays</li> <li>33. Search in Rotated Sorted Array</li> <li>45. Jump Game II</li> <li>46. Permutations</li> <li>50. Pow(x, n)</li> <li>55. Jump Game</li> <li>62. Unique Paths</li> <li>63. Unique Paths II</li> <li>74. Search a 2D Matrix</li> <li>77. Combinations</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>81. Search in Rotated Sorted Array II</li> <li>84. Largest Rectangle in Histogram</li> <li>86. Partition List</li> <li>88. Merge Sorted Array</li> <li>91. Decode Ways</li> <li>92. Reverse Linked List II</li> <li>94. Binary Tree Inorder Traversal</li> <li>98. Validate Binary Search Tree</li> <li>101. Symmetric Tree</li> <li>102. Binary Tree Level Order Traversal</li> <li>103. Binary Tree Zigzag Level Order Traversal</li> <li>104. Maximum Depth of Binary Tree</li> <li>108. Convert Sorted Array to Binary Search Tree</li> <li>110. Balanced Binary Tree</li> <li>116. Populating Next Right Pointers in Each Node</li> <li>118. Pascal\u2019s Triangle</li> <li>119. Pascal\u2019s Triangle II</li> <li>121. Best Time to Buy and Sell Stock</li> <li>122. Best Time to Buy and Sell Stock II</li> <li>124. Binary Tree Maximum Path Sum</li> <li>125. Valid Palindrome</li> <li>130. Surrounded Regions</li> <li>131. Palindrome Partitioning</li> <li>134. Gas Station</li> <li>136. Single Number</li> <li>138. Copy List with Random Pointer</li> <li>139. Word Break</li> <li>141. Linked List Cycle</li> <li>146. LRU Cache</li> <li>148. Sort List</li> <li>149. Max Points on a Line</li> <li>150. Evaluate Reverse Polish Notation</li> <li>168. Excel Sheet Column Title</li> <li>169. Majority Element</li> <li>171. Excel Sheet Column Number</li> <li>190. Reverse Bits</li> <li>191. Number of 1 Bits</li> <li>202. Happy Number</li> <li>206. Reverse Linked List</li> <li>207. Course Schedule</li> <li>212. Word Search II</li> <li>215. Kth Largest Element in an Array</li> <li>217. Contains Duplicate</li> <li>225. Implement Stack using Queues</li> <li>234. Palindrome Linked List</li> <li>239. Sliding Window Maximum</li> <li>242. Valid Anagram</li> <li>268. Missing Number</li> <li>274. H Index</li> <li>283. Move Zeroes</li> <li>326. Power of Three</li> <li>338. Counting Bits</li> <li>344. Reverse String</li> <li>350. Intersection of Two Arrays II</li> <li>373. Find K Pairs with Smallest Sums</li> <li>377. Combination Sum IV</li> <li>380. Insert Delete GetRandom O(1)</li> <li>387. First Unique Character in a String</li> <li>389. Find the Difference</li> <li>392. Is Subsequence</li> <li>412. Fizz Buzz</li> <li>435. Non overlapping Intervals</li> <li>445. Add Two Numbers II</li> <li>456. 132 Pattern</li> <li>459. Repeated Substring Pattern</li> <li>518. Coin Change II</li> <li>530. Minimum Absolute Difference in BST</li> <li>542. 01 Matrix</li> <li>688. Knight Probability in Chessboard</li> <li>712. Minimum ASCII Delete Sum for Two Strings</li> <li>714. Best Time to Buy and Sell Stock with Transaction Fee</li> <li>735. Asteroid Collision</li> <li>746. Min Cost Climbing Stairs</li> <li>767. Reorganize String</li> <li>799. Champagne Tower</li> <li>802. Find Eventual Safe States</li> <li>847. Shortest Path Visiting All Nodes</li> <li>852. Peak Index in a Mountain Array</li> <li>859. Buddy Strings</li> <li>894. All Possible Full Binary Trees</li> <li>905. Sort Array By Parity</li> <li>1125. Smallest Sufficient Team</li> <li>1143. Longest Common Subsequence</li> <li>1326. Minimum Number of Taps to Open to Water a Garden</li> <li>1337. The K Weakest Rows in a Matrix</li> <li>1569. Number of Ways to Reorder Array to Get Same BST</li> <li>1601. Maximum Number of Achievable Transfer Requests</li> <li>1615. Maximal Network Rank</li> <li>1658. Minimum Operations to Reduce X to Zero</li> <li>1751. Maximum Number of Events That Can Be Attended II</li> <li>1793. Maximum Score of a Good Subarray</li> <li>1802. Maximum Value at a Given Index in a Bounded Array</li> <li>2008. Maximum Earnings From Taxi</li> <li>2038. Remove Colored Pieces if Both Neighbors are the Same Color</li> <li>2140. Questions With Brainpower</li> <li>2141. Maximum Running Time of N Computers</li> <li>2328. Number of Increasing Paths in a Grid</li> <li>2352. Equal Row and Column Pairs   solve</li> <li>2366. Minimum Replacements to Sort the Array</li> <li>2369. Check if There is a Valid Partition For The Array</li> <li>2448. Minimum Cost to Make Array Equal</li> <li>2462. Total Cost to Hire K Workers</li> <li>2616. Minimize the Maximum Difference of Pairs</li> </ul>"}, {"location": "tags/#linear_search", "title": "linear_search", "text": "<ul> <li>121. Best Time to Buy and Sell Stock</li> </ul>"}, {"location": "tags/#math", "title": "math", "text": "<ul> <li>168. Excel Sheet Column Title</li> </ul>"}, {"location": "tags/#matrix", "title": "matrix", "text": "<ul> <li>74. Search a 2D Matrix</li> </ul>"}, {"location": "tags/#network", "title": "network", "text": "<ul> <li>LAP 1   Routing</li> </ul>"}, {"location": "tags/#pascal", "title": "pascal", "text": "<ul> <li>List</li> <li>Mathematic expression calculation</li> <li>Quick sort</li> </ul>"}, {"location": "tags/#python", "title": "python", "text": "<ul> <li>Binary search</li> <li>Bubble sort</li> <li>Two Crystal Ball</li> <li>4. Median of Two Sorted Arrays</li> <li>33. Search in Rotated Sorted Array</li> <li>45. Jump Game II</li> <li>46. Permutations</li> <li>50. Pow(x, n)</li> <li>55. Jump Game</li> <li>63. Unique Paths II</li> <li>74. Search a 2D Matrix</li> <li>77. Combinations</li> <li>80. Remove Duplicates from Sorted Array II</li> <li>81. Search in Rotated Sorted Array II</li> <li>84. Largest Rectangle in Histogram</li> <li>86. Partition List</li> <li>88. Merge Sorted Array</li> <li>101. Symmetric Tree</li> <li>102. Binary Tree Level Order Traversal</li> <li>103. Binary Tree Zigzag Level Order Traversal</li> <li>104. Maximum Depth of Binary Tree</li> <li>108. Convert Sorted Array to Binary Search Tree</li> <li>116. Populating Next Right Pointers in Each Node</li> <li>118. Pascal\u2019s Triangle</li> <li>121. Best Time to Buy and Sell Stock</li> <li>122. Best Time to Buy and Sell Stock II</li> <li>130. Surrounded Regions</li> <li>134. Gas Station</li> <li>168. Excel Sheet Column Title</li> <li>212. Word Search II</li> <li>225. Implement Stack using Queues</li> <li>338. Counting Bits</li> <li>377. Combination Sum IV</li> <li>392. Is Subsequence</li> <li>459. Repeated Substring Pattern</li> <li>518. Coin Change II</li> <li>542. 01 Matrix</li> <li>746. Min Cost Climbing Stairs</li> <li>767. Reorganize String</li> <li>847. Shortest Path Visiting All Nodes</li> <li>905. Sort Array By Parity</li> <li>1326. Minimum Number of Taps to Open to Water a Garden</li> <li>1337. The K Weakest Rows in a Matrix</li> <li>1615. Maximal Network Rank</li> <li>1658. Minimum Operations to Reduce X to Zero</li> <li>2366. Minimum Replacements to Sort the Array</li> </ul>"}, {"location": "tags/#queue", "title": "queue", "text": "<ul> <li>847. Shortest Path Visiting All Nodes</li> </ul>"}, {"location": "tags/#recusion", "title": "recusion", "text": "<ul> <li>50. Pow(x, n)</li> <li>77. Combinations</li> </ul>"}, {"location": "tags/#runtime_memory_alocation", "title": "runtime_memory_alocation", "text": "<ul> <li>74. Search a 2D Matrix</li> </ul>"}, {"location": "tags/#rust", "title": "rust", "text": "<ul> <li>63. Unique Paths II</li> <li>134. Gas Station</li> <li>459. Repeated Substring Pattern</li> <li>518. Coin Change II</li> </ul>"}, {"location": "tags/#sort", "title": "sort", "text": "<ul> <li>215. Kth Largest Element in an Array</li> </ul>"}, {"location": "tags/#stack_c_lang", "title": "stack_c_lang", "text": "<ul> <li>74. Search a 2D Matrix</li> </ul>"}, {"location": "tags/#tree", "title": "tree", "text": "<ul> <li>1569. Number of Ways to Reorder Array to Get Same BST</li> </ul>"}, {"location": "tags/#typescript", "title": "typescript", "text": "<ul> <li>Binary search</li> <li>Linear search</li> <li>Two Crystal Ball</li> </ul>"}]}